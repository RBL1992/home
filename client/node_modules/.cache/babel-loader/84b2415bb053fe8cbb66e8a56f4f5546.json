{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { Kind } from 'graphql';\nimport { wrap } from 'optimism';\nimport { isField, resultKeyNameFromField, isReference, makeReference, shouldInclude, addTypenameToDocument, getDefaultValues, getMainDefinition, getQueryDefinition, getFragmentFromSelection, maybeDeepFreeze, mergeDeepArray, DeepMerger, isNonNullObject, canUseWeakMap, compact } from \"../../utilities/index.js\";\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from \"./entityStore.js\";\nimport { isArray, extractFragmentContext, getTypenameFromStoreObject, shouldCanonizeResults } from \"./helpers.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { canonicalStringify, ObjectCanon } from \"./object-canon.js\";\n;\nfunction execSelectionSetKeyArgs(options) {\n  return [options.selectionSet, options.objectOrReference, options.context, options.context.canonizeResults];\n}\nvar StoreReader = function () {\n  function StoreReader(config) {\n    var _this = this;\n    this.knownResults = new (canUseWeakMap ? WeakMap : Map)();\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config)\n    });\n    this.canon = config.canon || new ObjectCanon();\n    this.executeSelectionSet = wrap(function (options) {\n      var _a;\n      var canonizeResults = options.context.canonizeResults;\n      var peekArgs = execSelectionSetKeyArgs(options);\n      peekArgs[3] = !canonizeResults;\n      var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);\n      if (other) {\n        if (canonizeResults) {\n          return __assign(__assign({}, other), {\n            result: _this.canon.admit(other.result)\n          });\n        }\n        return other;\n      }\n      maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n      return _this.execSelectionSetImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      keyArgs: execSelectionSetKeyArgs,\n      makeCacheKey: function (selectionSet, parent, context, canonizeResults) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context.varString, canonizeResults);\n        }\n      }\n    });\n    this.executeSubSelectedArray = wrap(function (options) {\n      maybeDependOnExistenceOfEntity(options.context.store, options.enclosingRef.__ref);\n      return _this.execSubSelectedArrayImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: function (_a) {\n        var field = _a.field,\n          array = _a.array,\n          context = _a.context;\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(field, array, context.varString);\n        }\n      }\n    });\n  }\n  StoreReader.prototype.resetCanon = function () {\n    this.canon = new ObjectCanon();\n  };\n  StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n    var store = _a.store,\n      query = _a.query,\n      _b = _a.rootId,\n      rootId = _b === void 0 ? 'ROOT_QUERY' : _b,\n      variables = _a.variables,\n      _c = _a.returnPartialData,\n      returnPartialData = _c === void 0 ? true : _c,\n      _d = _a.canonizeResults,\n      canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;\n    var policies = this.config.cache.policies;\n    variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n    var rootRef = makeReference(rootId);\n    var execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: __assign({\n        store: store,\n        query: query,\n        policies: policies,\n        variables: variables,\n        varString: canonicalStringify(variables),\n        canonizeResults: canonizeResults\n      }, extractFragmentContext(query, this.config.fragments))\n    });\n    var missing;\n    if (execResult.missing) {\n      missing = [new MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables)];\n      if (!returnPartialData) {\n        throw missing[0];\n      }\n    }\n    return {\n      result: execResult.result,\n      complete: !missing,\n      missing: missing\n    };\n  };\n  StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {\n    if (supportsResultCaching(context.store) && this.knownResults.get(result) === selectionSet) {\n      var latest = this.executeSelectionSet.peek(selectionSet, parent, context, this.canon.isKnown(result));\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  };\n  StoreReader.prototype.execSelectionSetImpl = function (_a) {\n    var _this = this;\n    var selectionSet = _a.selectionSet,\n      objectOrReference = _a.objectOrReference,\n      enclosingRef = _a.enclosingRef,\n      context = _a.context;\n    if (isReference(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: this.canon.empty,\n        missing: \"Dangling reference to missing \".concat(objectOrReference.__ref, \" object\")\n      };\n    }\n    var variables = context.variables,\n      policies = context.policies,\n      store = context.store;\n    var typename = store.getFieldValue(objectOrReference, \"__typename\");\n    var objectsToMerge = [];\n    var missing;\n    var missingMerger = new DeepMerger();\n    if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n      objectsToMerge.push({\n        __typename: typename\n      });\n    }\n    function handleMissing(result, resultName) {\n      var _a;\n      if (result.missing) {\n        missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = result.missing, _a));\n      }\n      return result.result;\n    }\n    var workSet = new Set(selectionSet.selections);\n    workSet.forEach(function (selection) {\n      var _a, _b;\n      if (!shouldInclude(selection, variables)) return;\n      if (isField(selection)) {\n        var fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference\n        }, context);\n        var resultName = resultKeyNameFromField(selection);\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, (_a = {}, _a[resultName] = \"Can't find field '\".concat(selection.name.value, \"' on \").concat(isReference(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2)), _a));\n          }\n        } else if (isArray(fieldValue)) {\n          fieldValue = handleMissing(_this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            enclosingRef: enclosingRef,\n            context: context\n          }), resultName);\n        } else if (!selection.selectionSet) {\n          if (context.canonizeResults) {\n            fieldValue = _this.canon.pass(fieldValue);\n          }\n        } else if (fieldValue != null) {\n          fieldValue = handleMissing(_this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue,\n            enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n            context: context\n          }), resultName);\n        }\n        if (fieldValue !== void 0) {\n          objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));\n        }\n      } else {\n        var fragment = getFragmentFromSelection(selection, context.lookupFragment);\n        if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n          throw __DEV__ ? new InvariantError(\"No fragment named \".concat(selection.name.value)) : new InvariantError(5);\n        }\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n    var result = mergeDeepArray(objectsToMerge);\n    var finalResult = {\n      result: result,\n      missing: missing\n    };\n    var frozen = context.canonizeResults ? this.canon.admit(finalResult) : maybeDeepFreeze(finalResult);\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n    return frozen;\n  };\n  StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n    var _this = this;\n    var field = _a.field,\n      array = _a.array,\n      enclosingRef = _a.enclosingRef,\n      context = _a.context;\n    var missing;\n    var missingMerger = new DeepMerger();\n    function handleMissing(childResult, i) {\n      var _a;\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));\n      }\n      return childResult.result;\n    }\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n    array = array.map(function (item, i) {\n      if (item === null) {\n        return null;\n      }\n      if (isArray(item)) {\n        return handleMissing(_this.executeSubSelectedArray({\n          field: field,\n          array: item,\n          enclosingRef: enclosingRef,\n          context: context\n        }), i);\n      }\n      if (field.selectionSet) {\n        return handleMissing(_this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          enclosingRef: isReference(item) ? item : enclosingRef,\n          context: context\n        }), i);\n      }\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n      return item;\n    });\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing: missing\n    };\n  };\n  return StoreReader;\n}();\nexport { StoreReader };\nfunction firstMissing(tree) {\n  try {\n    JSON.stringify(tree, function (_, value) {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result;\n  }\n}\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n  if (!field.selectionSet) {\n    var workSet_1 = new Set([fieldValue]);\n    workSet_1.forEach(function (value) {\n      if (isNonNullObject(value)) {\n        __DEV__ ? invariant(!isReference(value), \"Missing selection set for object of type \".concat(getTypenameFromStoreObject(store, value), \" returned for query field \").concat(field.name.value)) : invariant(!isReference(value), 6);\n        Object.values(value).forEach(workSet_1.add, workSet_1);\n      }\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["invariant","InvariantError","Kind","wrap","isField","resultKeyNameFromField","isReference","makeReference","shouldInclude","addTypenameToDocument","getDefaultValues","getMainDefinition","getQueryDefinition","getFragmentFromSelection","maybeDeepFreeze","mergeDeepArray","DeepMerger","isNonNullObject","canUseWeakMap","compact","maybeDependOnExistenceOfEntity","supportsResultCaching","isArray","extractFragmentContext","getTypenameFromStoreObject","shouldCanonizeResults","MissingFieldError","canonicalStringify","ObjectCanon","execSelectionSetKeyArgs","options","selectionSet","objectOrReference","context","canonizeResults","config","WeakMap","Map","addTypename","canon","executeSelectionSet","peekArgs","other","peek","result","_this","admit","store","enclosingRef","__ref","execSelectionSetImpl","max","resultCacheMaxSize","keyArgs","makeCacheKey","parent","varString","executeSubSelectedArray","execSubSelectedArrayImpl","_a","field","array","StoreReader","query","_b","rootId","variables","_c","returnPartialData","_d","policies","cache","rootRef","execResult","fragments","missing","firstMissing","complete","knownResults","get","latest","isKnown","rootTypenamesById","has","empty","typename","getFieldValue","objectsToMerge","missingMerger","rootIdsByTypename","push","__typename","handleMissing","resultName","merge","workSet","Set","selections","forEach","selection","fieldValue","readField","fieldName","name","value","from","added","JSON","stringify","pass","fragment","lookupFragment","kind","FRAGMENT_SPREAD","__DEV__","fragmentMatches","add","finalResult","frozen","set","childResult","i","filter","canRead","map","item","assertSelectionSetForIdValue","tree","_","workSet_1","Object","values"],"sourceRoot":"","sources":["../../../src/cache/inmemory/readFromStore.ts"],"sourcesContent":["import { invariant, InvariantError } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  FieldNode,\n  Kind,\n  SelectionSetNode,\n} from 'graphql';\nimport { wrap, OptimisticWrapperFunction } from 'optimism';\n\nimport {\n  isField,\n  resultKeyNameFromField,\n  Reference,\n  isReference,\n  makeReference,\n  StoreObject,\n  FragmentMap,\n  shouldInclude,\n  addTypenameToDocument,\n  getDefaultValues,\n  getMainDefinition,\n  getQueryDefinition,\n  getFragmentFromSelection,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  DeepMerger,\n  isNonNullObject,\n  canUseWeakMap,\n  compact,\n  FragmentMapFunction,\n} from '../../utilities';\nimport { Cache } from '../core/types/Cache';\nimport {\n  DiffQueryAgainstStoreOptions,\n  InMemoryCacheConfig,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from './types';\nimport { maybeDependOnExistenceOfEntity, supportsResultCaching } from './entityStore';\nimport { isArray, extractFragmentContext, getTypenameFromStoreObject, shouldCanonizeResults } from './helpers';\nimport { Policies } from './policies';\nimport { InMemoryCache } from './inMemoryCache';\nimport { MissingFieldError, MissingTree } from '../core/types/common';\nimport { canonicalStringify, ObjectCanon } from './object-canon';\n\nexport type VariableMap = { [name: string]: any };\n\ninterface ReadContext extends ReadMergeModifyContext {\n  query: DocumentNode;\n  policies: Policies;\n  canonizeResults: boolean;\n  fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n};\n\nexport type ExecResult<R = any> = {\n  result: R;\n  missing?: MissingTree;\n};\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  objectOrReference: StoreObject | Reference;\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: readonly any[];\n  enclosingRef: Reference;\n  context: ReadContext;\n};\n\nexport interface StoreReaderConfig {\n  cache: InMemoryCache,\n  addTypename?: boolean;\n  resultCacheMaxSize?: number;\n  canonizeResults?: boolean;\n  canon?: ObjectCanon;\n  fragments?: InMemoryCacheConfig[\"fragments\"];\n}\n\n// Arguments type after keyArgs translation.\ntype ExecSelectionSetKeyArgs = [\n  SelectionSetNode,\n  StoreObject | Reference,\n  ReadMergeModifyContext,\n  boolean,\n];\n\nfunction execSelectionSetKeyArgs(\n  options: ExecSelectionSetOptions,\n): ExecSelectionSetKeyArgs {\n  return [\n    options.selectionSet,\n    options.objectOrReference,\n    options.context,\n    // We split out this property so we can pass different values\n    // independently without modifying options.context itself.\n    options.context.canonizeResults,\n  ];\n}\n\nexport class StoreReader {\n  // cached version of executeSelectionSet\n  private executeSelectionSet: OptimisticWrapperFunction<\n    [ExecSelectionSetOptions], // Actual arguments tuple type.\n    ExecResult, // Actual return type.\n    ExecSelectionSetKeyArgs\n  >;\n\n  // cached version of executeSubSelectedArray\n  private executeSubSelectedArray: OptimisticWrapperFunction<\n    [ExecSubSelectedArrayOptions],\n    ExecResult<any>,\n    [ExecSubSelectedArrayOptions]>;\n\n  private config: {\n    cache: InMemoryCache,\n    addTypename: boolean;\n    resultCacheMaxSize?: number;\n    canonizeResults: boolean;\n    fragments?: InMemoryCacheConfig[\"fragments\"];\n  };\n\n  private knownResults = new (\n    canUseWeakMap ? WeakMap : Map\n  )<Record<string, any>, SelectionSetNode>();\n\n  public canon: ObjectCanon;\n  public resetCanon() {\n    this.canon = new ObjectCanon;\n  }\n\n  constructor(config: StoreReaderConfig) {\n    this.config = compact(config, {\n      addTypename: config.addTypename !== false,\n      canonizeResults: shouldCanonizeResults(config),\n    });\n\n    this.canon = config.canon || new ObjectCanon;\n\n    this.executeSelectionSet = wrap(options => {\n      const { canonizeResults } = options.context;\n\n      const peekArgs = execSelectionSetKeyArgs(options);\n\n      // Negate this boolean option so we can find out if we've already read\n      // this result using the other boolean value.\n      peekArgs[3] = !canonizeResults;\n\n      const other = this.executeSelectionSet.peek(...peekArgs);\n\n      if (other) {\n        if (canonizeResults) {\n          return {\n            ...other,\n            // If we previously read this result without canonizing it, we can\n            // reuse that result simply by canonizing it now.\n            result: this.canon.admit(other.result),\n          };\n        }\n        // If we previously read this result with canonization enabled, we can\n        // return that canonized result as-is.\n        return other;\n      }\n\n      maybeDependOnExistenceOfEntity(\n        options.context.store,\n        options.enclosingRef.__ref,\n      );\n\n      // Finally, if we didn't find any useful previous results, run the real\n      // execSelectionSetImpl method with the given options.\n      return this.execSelectionSetImpl(options);\n\n    }, {\n      max: this.config.resultCacheMaxSize,\n      keyArgs: execSelectionSetKeyArgs,\n      // Note that the parameters of makeCacheKey are determined by the\n      // array returned by keyArgs.\n      makeCacheKey(selectionSet, parent, context, canonizeResults) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(\n            selectionSet,\n            isReference(parent) ? parent.__ref : parent,\n            context.varString,\n            canonizeResults,\n          );\n        }\n      }\n    });\n\n    this.executeSubSelectedArray = wrap((options: ExecSubSelectedArrayOptions) => {\n      maybeDependOnExistenceOfEntity(\n        options.context.store,\n        options.enclosingRef.__ref,\n      );\n      return this.execSubSelectedArrayImpl(options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey({ field, array, context }) {\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(\n            field,\n            array,\n            context.varString,\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    rootId = 'ROOT_QUERY',\n    variables,\n    returnPartialData = true,\n    canonizeResults = this.config.canonizeResults,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    const policies = this.config.cache.policies;\n\n    variables = {\n      ...getDefaultValues(getQueryDefinition(query)),\n      ...variables!,\n    };\n\n    const rootRef = makeReference(rootId);\n    const execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: rootRef,\n      enclosingRef: rootRef,\n      context: {\n        store,\n        query,\n        policies,\n        variables,\n        varString: canonicalStringify(variables),\n        canonizeResults,\n        ...extractFragmentContext(query, this.config.fragments),\n      },\n    });\n\n    let missing: MissingFieldError[] | undefined;\n    if (execResult.missing) {\n      // For backwards compatibility we still report an array of\n      // MissingFieldError objects, even though there will only ever be at most\n      // one of them, now that all missing field error messages are grouped\n      // together in the execResult.missing tree.\n      missing = [new MissingFieldError(\n        firstMissing(execResult.missing)!,\n        execResult.missing,\n        query,\n        variables,\n      )];\n      if (!returnPartialData) {\n        throw missing[0];\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !missing,\n      missing,\n    };\n  }\n\n  public isFresh(\n    result: Record<string, any>,\n    parent: StoreObject | Reference,\n    selectionSet: SelectionSetNode,\n    context: ReadMergeModifyContext,\n  ): boolean {\n    if (supportsResultCaching(context.store) &&\n        this.knownResults.get(result) === selectionSet) {\n      const latest = this.executeSelectionSet.peek(\n        selectionSet,\n        parent,\n        context,\n        // If result is canonical, then it could only have been previously\n        // cached by the canonizing version of executeSelectionSet, so we can\n        // avoid checking both possibilities here.\n        this.canon.isKnown(result),\n      );\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Uncached version of executeSelectionSet.\n  private execSelectionSetImpl({\n    selectionSet,\n    objectOrReference,\n    enclosingRef,\n    context,\n  }: ExecSelectionSetOptions): ExecResult {\n    if (isReference(objectOrReference) &&\n        !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n        !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: this.canon.empty,\n        missing: `Dangling reference to missing ${objectOrReference.__ref} object`,\n      };\n    }\n\n    const { variables, policies, store } = context;\n    const typename = store.getFieldValue<string>(objectOrReference, \"__typename\");\n\n    const objectsToMerge: Record<string, any>[] = [];\n    let missing: MissingTree | undefined;\n    const missingMerger = new DeepMerger();\n\n    if (this.config.addTypename &&\n        typeof typename === \"string\" &&\n        !policies.rootIdsByTypename[typename]) {\n      // Ensure we always include a default value for the __typename\n      // field, if we have one, and this.config.addTypename is true. Note\n      // that this field can be overridden by other merged objects.\n      objectsToMerge.push({ __typename: typename });\n    }\n\n    function handleMissing<T>(result: ExecResult<T>, resultName: string): T {\n      if (result.missing) {\n        missing = missingMerger.merge(missing, { [resultName]: result.missing });\n      }\n      return result.result;\n    }\n\n    const workSet = new Set(selectionSet.selections);\n\n    workSet.forEach(selection => {\n      // Omit fields with directives @skip(if: <truthy value>) or\n      // @include(if: <falsy value>).\n      if (!shouldInclude(selection, variables)) return;\n\n      if (isField(selection)) {\n        let fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference,\n        }, context);\n\n        const resultName = resultKeyNameFromField(selection);\n\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            missing = missingMerger.merge(missing, {\n              [resultName]: `Can't find field '${\n                selection.name.value\n              }' on ${\n                isReference(objectOrReference)\n                  ? objectOrReference.__ref + \" object\"\n                  : \"object \" + JSON.stringify(objectOrReference, null, 2)\n              }`\n            });\n          }\n\n        } else if (isArray(fieldValue)) {\n          fieldValue = handleMissing(this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            enclosingRef,\n            context,\n          }), resultName);\n\n        } else if (!selection.selectionSet) {\n          // If the field does not have a selection set, then we handle it\n          // as a scalar value. To keep this.canon from canonicalizing\n          // this value, we use this.canon.pass to wrap fieldValue in a\n          // Pass object that this.canon.admit will later unwrap as-is.\n          if (context.canonizeResults) {\n            fieldValue = this.canon.pass(fieldValue);\n          }\n\n        } else if (fieldValue != null) {\n          // In this case, because we know the field has a selection set,\n          // it must be trying to query a GraphQLObjectType, which is why\n          // fieldValue must be != null.\n          fieldValue = handleMissing(this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue as StoreObject | Reference,\n            enclosingRef: isReference(fieldValue) ? fieldValue : enclosingRef,\n            context,\n          }), resultName);\n        }\n\n        if (fieldValue !== void 0) {\n          objectsToMerge.push({ [resultName]: fieldValue });\n        }\n\n      } else {\n        const fragment = getFragmentFromSelection(\n          selection,\n          context.lookupFragment,\n        );\n\n        if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n          throw new InvariantError(`No fragment named ${selection.name.value}`);\n        }\n\n        if (fragment && policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n\n    const result = mergeDeepArray(objectsToMerge);\n    const finalResult: ExecResult = { result, missing };\n    const frozen = context.canonizeResults\n      ? this.canon.admit(finalResult)\n      // Since this.canon is normally responsible for freezing results (only in\n      // development), freeze them manually if canonization is disabled.\n      : maybeDeepFreeze(finalResult);\n\n    // Store this result with its selection set so that we can quickly\n    // recognize it again in the StoreReader#isFresh method.\n    if (frozen.result) {\n      this.knownResults.set(frozen.result, selectionSet);\n    }\n\n    return frozen;\n  }\n\n  // Uncached version of executeSubSelectedArray.\n  private execSubSelectedArrayImpl({\n    field,\n    array,\n    enclosingRef,\n    context,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: MissingTree | undefined;\n    let missingMerger = new DeepMerger<MissingTree[]>();\n\n    function handleMissing<T>(childResult: ExecResult<T>, i: number): T {\n      if (childResult.missing) {\n        missing = missingMerger.merge(missing, { [i]: childResult.missing });\n      }\n      return childResult.result;\n    }\n\n    if (field.selectionSet) {\n      array = array.filter(context.store.canRead);\n    }\n\n    array = array.map((item, i) => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray({\n          field,\n          array: item,\n          enclosingRef,\n          context,\n        }), i);\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          enclosingRef: isReference(item) ? item : enclosingRef,\n          context,\n        }), i);\n      }\n\n      if (__DEV__) {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n\n      return item;\n    });\n\n    return {\n      result: context.canonizeResults ? this.canon.admit(array) : array,\n      missing,\n    };\n  }\n}\n\nfunction firstMissing(tree: MissingTree): string | undefined {\n  try {\n    JSON.stringify(tree, (_, value) => {\n      if (typeof value === \"string\") throw value;\n      return value;\n    });\n  } catch (result) {\n    return result;\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  store: NormalizedCache,\n  field: FieldNode,\n  fieldValue: any,\n) {\n  if (!field.selectionSet) {\n    const workSet = new Set([fieldValue]);\n    workSet.forEach(value => {\n      if (isNonNullObject(value)) {\n        invariant(\n          !isReference(value),\n          `Missing selection set for object of type ${\n            getTypenameFromStoreObject(store, value)\n          } returned for query field ${field.name.value}`,\n        );\n        Object.values(value).forEach(workSet.add, workSet);\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}