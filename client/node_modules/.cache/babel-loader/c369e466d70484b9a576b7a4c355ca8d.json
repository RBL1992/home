{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { visit } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { getFragmentDefinitions } from \"../../utilities/index.js\";\nexport function createFragmentRegistry() {\n  var fragments = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    fragments[_i] = arguments[_i];\n  }\n  return new (FragmentRegistry.bind.apply(FragmentRegistry, __spreadArray([void 0], fragments, false)))();\n}\nvar arrayLikeForEach = Array.prototype.forEach;\nvar FragmentRegistry = function () {\n  function FragmentRegistry() {\n    var fragments = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      fragments[_i] = arguments[_i];\n    }\n    this.registry = Object.create(null);\n    this.resetCaches();\n    if (fragments.length) {\n      this.register.apply(this, fragments);\n    }\n  }\n  FragmentRegistry.prototype.register = function () {\n    var _this = this;\n    var definitions = new Map();\n    arrayLikeForEach.call(arguments, function (doc) {\n      getFragmentDefinitions(doc).forEach(function (node) {\n        definitions.set(node.name.value, node);\n      });\n    });\n    definitions.forEach(function (node, name) {\n      if (node !== _this.registry[name]) {\n        _this.registry[name] = node;\n        _this.invalidate(name);\n      }\n    });\n    return this;\n  };\n  FragmentRegistry.prototype.invalidate = function (name) {};\n  FragmentRegistry.prototype.resetCaches = function () {\n    this.invalidate = (this.lookup = this.cacheUnaryMethod(\"lookup\")).dirty;\n    this.transform = this.cacheUnaryMethod(\"transform\");\n    this.findFragmentSpreads = this.cacheUnaryMethod(\"findFragmentSpreads\");\n  };\n  FragmentRegistry.prototype.cacheUnaryMethod = function (name) {\n    var registry = this;\n    var originalMethod = FragmentRegistry.prototype[name];\n    return wrap(function () {\n      return originalMethod.apply(registry, arguments);\n    }, {\n      makeCacheKey: function (arg) {\n        return arg;\n      }\n    });\n  };\n  FragmentRegistry.prototype.lookup = function (fragmentName) {\n    return this.registry[fragmentName] || null;\n  };\n  FragmentRegistry.prototype.transform = function (document) {\n    var _this = this;\n    var defined = new Map();\n    getFragmentDefinitions(document).forEach(function (def) {\n      defined.set(def.name.value, def);\n    });\n    var unbound = new Set();\n    var enqueue = function (spreadName) {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n    var enqueueChildSpreads = function (node) {\n      return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);\n    };\n    enqueueChildSpreads(document);\n    var missing = [];\n    var map = Object.create(null);\n    unbound.forEach(function (fragmentName) {\n      var knownFragmentDef = defined.get(fragmentName);\n      if (knownFragmentDef) {\n        enqueueChildSpreads(map[fragmentName] = knownFragmentDef);\n      } else {\n        missing.push(fragmentName);\n        var def = _this.lookup(fragmentName);\n        if (def) {\n          enqueueChildSpreads(map[fragmentName] = def);\n        }\n      }\n    });\n    if (missing.length) {\n      var defsToAppend_1 = [];\n      missing.forEach(function (name) {\n        var def = map[name];\n        if (def) {\n          defsToAppend_1.push(def);\n        }\n      });\n      if (defsToAppend_1.length) {\n        document = __assign(__assign({}, document), {\n          definitions: document.definitions.concat(defsToAppend_1)\n        });\n      }\n    }\n    return document;\n  };\n  FragmentRegistry.prototype.findFragmentSpreads = function (root) {\n    var spreads = Object.create(null);\n    visit(root, {\n      FragmentSpread: function (node) {\n        spreads[node.name.value] = node;\n      }\n    });\n    return spreads;\n  };\n  return FragmentRegistry;\n}();","map":{"version":3,"mappings":"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","names":["visit","wrap","getFragmentDefinitions","createFragmentRegistry","_i","fragments","FragmentRegistry","arrayLikeForEach","Array","prototype","Object","create","resetCaches","length","register","apply","definitions","Map","call","arguments","doc","forEach","set","node","name","value","_this","registry","invalidate","lookup","cacheUnaryMethod","dirty","transform","findFragmentSpreads","originalMethod","makeCacheKey","fragmentName","document","defined","def","unbound","Set","enqueue","spreadName","has","add","enqueueChildSpreads","keys","missing","map","knownFragmentDef","get","push","defsToAppend_1","concat","root","spreads","FragmentSpread"],"sourceRoot":"","sources":["../../../src/cache/inmemory/fragmentRegistry.ts"],"sourcesContent":["import {\n  DocumentNode,\n  ASTNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n  visit,\n} from \"graphql\";\n\nimport { wrap } from \"optimism\";\n\nimport { FragmentMap, getFragmentDefinitions } from \"../../utilities\";\n\nexport interface FragmentRegistryAPI {\n  register(...fragments: DocumentNode[]): this;\n  lookup(fragmentName: string): FragmentDefinitionNode | null;\n  transform<D extends DocumentNode>(document: D): D;\n}\n\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nexport function createFragmentRegistry(\n  ...fragments: DocumentNode[]\n): FragmentRegistryAPI {\n  return new FragmentRegistry(...fragments);\n}\n\nconst { forEach: arrayLikeForEach } = Array.prototype;\n\nclass FragmentRegistry implements FragmentRegistryAPI {\n  private registry: FragmentMap = Object.create(null);\n\n  // Call static method FragmentRegistry.from(...) instead of invoking the\n  // FragmentRegistry constructor directly. This reserves the constructor for\n  // future configuration of the FragmentRegistry.\n  constructor(...fragments: DocumentNode[]) {\n    this.resetCaches();\n    if (fragments.length) {\n      this.register.apply(this, fragments);\n    }\n  }\n\n  public register(): this {\n    const definitions = new Map<string, FragmentDefinitionNode>();\n    arrayLikeForEach.call(arguments, (doc: DocumentNode) => {\n      getFragmentDefinitions(doc).forEach(node => {\n        definitions.set(node.name.value, node);\n      });\n    });\n\n    definitions.forEach((node, name) => {\n      if (node !== this.registry[name]) {\n        this.registry[name] = node;\n        this.invalidate(name);\n      }\n    });\n\n    return this;\n  }\n\n  // Overridden in the resetCaches method below.\n  private invalidate(name: string) {}\n\n  public resetCaches() {\n    this.invalidate = (\n      this.lookup = this.cacheUnaryMethod(\"lookup\")\n    ).dirty; // This dirty function is bound to the wrapped lookup method.\n    this.transform = this.cacheUnaryMethod(\"transform\");\n    this.findFragmentSpreads = this.cacheUnaryMethod(\"findFragmentSpreads\");\n  }\n\n  private cacheUnaryMethod<TName extends keyof Pick<FragmentRegistry,\n    | \"lookup\"\n    | \"transform\"\n    | \"findFragmentSpreads\"\n  >>(name: TName) {\n    const registry = this;\n    const originalMethod = FragmentRegistry.prototype[name];\n    return wrap(function () {\n      return originalMethod.apply(registry, arguments);\n    }, {\n      makeCacheKey: arg => arg,\n    });\n  }\n\n  public lookup(fragmentName: string): FragmentDefinitionNode | null {\n    return this.registry[fragmentName] || null;\n  }\n\n  public transform<D extends DocumentNode>(document: D): D {\n    const defined = new Map<string, FragmentDefinitionNode>();\n    getFragmentDefinitions(document).forEach(def => {\n      defined.set(def.name.value, def);\n    });\n\n    const unbound = new Set<string>();\n    const enqueue = (spreadName: string) => {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n\n    const enqueueChildSpreads = (node: ASTNode) => Object.keys(\n      this.findFragmentSpreads(node)\n    ).forEach(enqueue);\n\n    enqueueChildSpreads(document);\n\n    const missing: string[] = [];\n    const map: FragmentMap = Object.create(null);\n\n    // This Set forEach loop can be extended during iteration by adding\n    // additional strings to the unbound set.\n    unbound.forEach(fragmentName => {\n      const knownFragmentDef = defined.get(fragmentName);\n      if (knownFragmentDef) {\n        enqueueChildSpreads(map[fragmentName] = knownFragmentDef);\n      } else {\n        missing.push(fragmentName);\n        const def = this.lookup(fragmentName);\n        if (def) {\n          enqueueChildSpreads(map[fragmentName] = def);\n        }\n      }\n    });\n\n    if (missing.length) {\n      const defsToAppend: FragmentDefinitionNode[] = [];\n      missing.forEach(name => {\n        const def = map[name];\n        if (def) {\n          defsToAppend.push(def);\n        }\n      });\n\n      if (defsToAppend.length) {\n        document = {\n          ...document,\n          definitions: document.definitions.concat(defsToAppend),\n        };\n      }\n    }\n\n    return document;\n  }\n\n  public findFragmentSpreads(root: ASTNode): FragmentSpreadMap {\n    const spreads: FragmentSpreadMap = Object.create(null);\n\n    visit(root, {\n      FragmentSpread(node) {\n        spreads[node.name.value] = node;\n      },\n    });\n\n    return spreads;\n  }\n}\n\ninterface FragmentSpreadMap {\n  [fragmentSpreadName: string]: FragmentSpreadNode;\n}\n"]},"metadata":{},"sourceType":"module"}