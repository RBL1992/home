{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n  var name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\nexport function parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  __DEV__ ? invariant(!!document && !!document.kind, \"Argument of \".concat(document, \" passed to parser was not a valid GraphQL \") + \"DocumentNode. You may need to use 'graphql-tag' or another method \" + \"to convert your operation into a document\") : invariant(!!document && !!document.kind, 32);\n  var fragments = [];\n  var queries = [];\n  var mutations = [];\n  var subscriptions = [];\n  for (var _i = 0, _a = document.definitions; _i < _a.length; _i++) {\n    var x = _a[_i];\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue;\n    }\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n  __DEV__ ? invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, \"Passing only a fragment to 'graphql' is not yet supported. \" + \"You must include a query, subscription or mutation as well\") : invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 33);\n  __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" + \"\".concat(document, \" had \").concat(queries.length, \" queries, \").concat(subscriptions.length, \" \") + \"subscriptions and \".concat(mutations.length, \" mutations. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 34);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  __DEV__ ? invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \".concat(document, \" had \") + \"\".concat(definitions.length, \" definitions. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(definitions.length === 1, 35);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data';\n  }\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\nexport function verifyDocumentType(document, type) {\n  var operation = parser(document);\n  var requiredOperationName = operationName(type);\n  var usedOperationName = operationName(operation.type);\n  __DEV__ ? invariant(operation.type === type, \"Running a \".concat(requiredOperationName, \" requires a graphql \") + \"\".concat(requiredOperationName, \", but a \").concat(usedOperationName, \" was used instead.\")) : invariant(operation.type === type, 36);\n}","map":{"version":3,"mappings":"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","names":["invariant","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","cached","get","variables","__DEV__","fragments","queries","mutations","subscriptions","_a","definitions","_i","x","kind","push","operation","length","variableDefinitions","definition","verifyDocumentType","requiredOperationName"],"sourceRoot":"","sources":["../../../src/react/parser/index.ts"],"sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}