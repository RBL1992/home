{"ast":null,"code":"var _a = Object.prototype,\n  toString = _a.toString,\n  hasOwnProperty = _a.hasOwnProperty;\nvar fnToStr = Function.prototype.toString;\nvar previousComparisons = new Map();\n/**\r\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\r\n */\nfunction equal(a, b) {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\nfunction check(a, b) {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  }\n  // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n  var aTag = toString.call(a);\n  var bTag = toString.call(b);\n  // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n  if (aTag !== bTag) {\n    return false;\n  }\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n    // Fall through to object case...\n    case '[object Object]':\n      {\n        if (previouslyCompared(a, b)) return true;\n        var aKeys = definedKeys(a);\n        var bKeys = definedKeys(b);\n        // If `a` and `b` have a different number of enumerable keys, they\n        // must be different.\n        var keyCount = aKeys.length;\n        if (keyCount !== bKeys.length) return false;\n        // Now make sure they have the same keys.\n        for (var k = 0; k < keyCount; ++k) {\n          if (!hasOwnProperty.call(b, aKeys[k])) {\n            return false;\n          }\n        }\n        // Finally, check deep equality of all child properties.\n        for (var k = 0; k < keyCount; ++k) {\n          var key = aKeys[k];\n          if (!check(a[key], b[key])) {\n            return false;\n          }\n        }\n        return true;\n      }\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n    // Fall through to shared +a === +b case...\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n    case '[object RegExp]':\n    case '[object String]':\n      return a == \"\".concat(b);\n    case '[object Map]':\n    case '[object Set]':\n      {\n        if (a.size !== b.size) return false;\n        if (previouslyCompared(a, b)) return true;\n        var aIterator = a.entries();\n        var isMap = aTag === '[object Map]';\n        while (true) {\n          var info = aIterator.next();\n          if (info.done) break;\n          // If a instanceof Set, aValue === aKey.\n          var _a = info.value,\n            aKey = _a[0],\n            aValue = _a[1];\n          // So this works the same way for both Set and Map.\n          if (!b.has(aKey)) {\n            return false;\n          }\n          // However, we care about deep equality of values only when dealing\n          // with Map structures.\n          if (isMap && !check(aValue, b.get(aKey))) {\n            return false;\n          }\n        }\n        return true;\n      }\n    case '[object Uint16Array]':\n    case '[object Uint8Array]': // Buffer, in Node.js.\n    case '[object Uint32Array]':\n    case '[object Int32Array]':\n    case '[object Int8Array]':\n    case '[object Int16Array]':\n    case '[object ArrayBuffer]':\n      // DataView doesn't need these conversions, but the equality check is\n      // otherwise the same.\n      a = new Uint8Array(a);\n      b = new Uint8Array(b);\n    // Fall through...\n    case '[object DataView]':\n      {\n        var len = a.byteLength;\n        if (len === b.byteLength) {\n          while (len-- && a[len] === b[len]) {\n            // Keep looping as long as the bytes are equal.\n          }\n        }\n        return len === -1;\n      }\n    case '[object AsyncFunction]':\n    case '[object GeneratorFunction]':\n    case '[object AsyncGeneratorFunction]':\n    case '[object Function]':\n      {\n        var aCode = fnToStr.call(a);\n        if (aCode !== fnToStr.call(b)) {\n          return false;\n        }\n        // We consider non-native functions equal if they have the same code\n        // (native functions require === because their code is censored).\n        // Note that this behavior is not entirely sound, since !== function\n        // objects with the same code can behave differently depending on\n        // their closure scope. However, any function can behave differently\n        // depending on the values of its input arguments (including this)\n        // and its calling context (including its closure scope), even\n        // though the function object is === to itself; and it is entirely\n        // possible for functions that are not === to behave exactly the\n        // same under all conceivable circumstances. Because none of these\n        // factors are statically decidable in JavaScript, JS function\n        // equality is not well-defined. This ambiguity allows us to\n        // consider the best possible heuristic among various imperfect\n        // options, and equating non-native functions that have the same\n        // code has enormous practical benefits, such as when comparing\n        // functions that are repeatedly passed as fresh function\n        // expressions within objects that are otherwise deeply equal. Since\n        // any function created from the same syntactic expression (in the\n        // same code location) will always stringify to the same code\n        // according to fnToStr.call, we can reasonably expect these\n        // repeatedly passed function expressions to have the same code, and\n        // thus behave \"the same\" (with all the caveats mentioned above),\n        // even though the runtime function objects are !== to one another.\n        return !endsWith(aCode, nativeCodeSuffix);\n      }\n  }\n  // Otherwise the values are not equal.\n  return false;\n}\nfunction definedKeys(obj) {\n  // Remember that the second argument to Array.prototype.filter will be\n  // used as `this` within the callback function.\n  return Object.keys(obj).filter(isDefinedKey, obj);\n}\nfunction isDefinedKey(key) {\n  return this[key] !== void 0;\n}\nvar nativeCodeSuffix = \"{ [native code] }\";\nfunction endsWith(full, suffix) {\n  var fromIndex = full.length - suffix.length;\n  return fromIndex >= 0 && full.indexOf(suffix, fromIndex) === fromIndex;\n}\nfunction previouslyCompared(a, b) {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  var bSet = previousComparisons.get(a);\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set());\n  }\n  bSet.add(b);\n  return false;\n}\nexport { equal as default, equal };","map":{"version":3,"mappings":"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","names":["Object","prototype","toString","hasOwnProperty","fnToStr","Function","previousComparisons","Map","a","b","check","clear","aTag","call","bTag","length","previouslyCompared","aKeys","definedKeys","bKeys","keyCount","k","key","name","message","size","aIterator","entries","isMap","info","next","done","value","aKey","aValue","has","get","Uint8Array","len","byteLength","aCode","endsWith","nativeCodeSuffix","obj","keys","filter","isDefinedKey","full","suffix","fromIndex","indexOf","bSet","set","Set","add"],"sources":["../src/equality.ts"],"sourcesContent":["const { toString, hasOwnProperty } = Object.prototype;\nconst fnToStr = Function.prototype.toString;\nconst previousComparisons = new Map<object, Set<object>>();\n\n/**\n * Performs a deep equality check on two JavaScript values, tolerating cycles.\n */\nexport function equal(a: any, b: any): boolean {\n  try {\n    return check(a, b);\n  } finally {\n    previousComparisons.clear();\n  }\n}\n\n// Allow default imports as well.\nexport default equal;\n\nfunction check(a: any, b: any): boolean {\n  // If the two values are strictly equal, our job is easy.\n  if (a === b) {\n    return true;\n  }\n\n  // Object.prototype.toString returns a representation of the runtime type of\n  // the given value that is considerably more precise than typeof.\n  const aTag = toString.call(a);\n  const bTag = toString.call(b);\n\n  // If the runtime types of a and b are different, they could maybe be equal\n  // under some interpretation of equality, but for simplicity and performance\n  // we just return false instead.\n  if (aTag !== bTag) {\n    return false;\n  }\n\n  switch (aTag) {\n    case '[object Array]':\n      // Arrays are a lot like other objects, but we can cheaply compare their\n      // lengths as a short-cut before comparing their elements.\n      if (a.length !== b.length) return false;\n      // Fall through to object case...\n    case '[object Object]': {\n      if (previouslyCompared(a, b)) return true;\n\n      const aKeys = definedKeys(a);\n      const bKeys = definedKeys(b);\n\n      // If `a` and `b` have a different number of enumerable keys, they\n      // must be different.\n      const keyCount = aKeys.length;\n      if (keyCount !== bKeys.length) return false;\n\n      // Now make sure they have the same keys.\n      for (let k = 0; k < keyCount; ++k) {\n        if (!hasOwnProperty.call(b, aKeys[k])) {\n          return false;\n        }\n      }\n\n      // Finally, check deep equality of all child properties.\n      for (let k = 0; k < keyCount; ++k) {\n        const key = aKeys[k];\n        if (!check(a[key], b[key])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Error]':\n      return a.name === b.name && a.message === b.message;\n\n    case '[object Number]':\n      // Handle NaN, which is !== itself.\n      if (a !== a) return b !== b;\n      // Fall through to shared +a === +b case...\n    case '[object Boolean]':\n    case '[object Date]':\n      return +a === +b;\n\n    case '[object RegExp]':\n    case '[object String]':\n      return a == `${b}`;\n\n    case '[object Map]':\n    case '[object Set]': {\n      if (a.size !== b.size) return false;\n      if (previouslyCompared(a, b)) return true;\n\n      const aIterator = a.entries();\n      const isMap = aTag === '[object Map]';\n\n      while (true) {\n        const info = aIterator.next();\n        if (info.done) break;\n\n        // If a instanceof Set, aValue === aKey.\n        const [aKey, aValue] = info.value;\n\n        // So this works the same way for both Set and Map.\n        if (!b.has(aKey)) {\n          return false;\n        }\n\n        // However, we care about deep equality of values only when dealing\n        // with Map structures.\n        if (isMap && !check(aValue, b.get(aKey))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case '[object Uint16Array]':\n    case '[object Uint8Array]': // Buffer, in Node.js.\n    case '[object Uint32Array]':\n    case '[object Int32Array]':\n    case '[object Int8Array]':\n    case '[object Int16Array]':\n    case '[object ArrayBuffer]':\n      // DataView doesn't need these conversions, but the equality check is\n      // otherwise the same.\n      a = new Uint8Array(a);\n      b = new Uint8Array(b);\n      // Fall through...\n    case '[object DataView]': {\n      let len = a.byteLength;\n      if (len === b.byteLength) {\n        while (len-- && a[len] === b[len]) {\n          // Keep looping as long as the bytes are equal.\n        }\n      }\n      return len === -1;\n    }\n\n    case '[object AsyncFunction]':\n    case '[object GeneratorFunction]':\n    case '[object AsyncGeneratorFunction]':\n    case '[object Function]': {\n      const aCode = fnToStr.call(a);\n      if (aCode !== fnToStr.call(b)) {\n        return false;\n      }\n\n      // We consider non-native functions equal if they have the same code\n      // (native functions require === because their code is censored).\n      // Note that this behavior is not entirely sound, since !== function\n      // objects with the same code can behave differently depending on\n      // their closure scope. However, any function can behave differently\n      // depending on the values of its input arguments (including this)\n      // and its calling context (including its closure scope), even\n      // though the function object is === to itself; and it is entirely\n      // possible for functions that are not === to behave exactly the\n      // same under all conceivable circumstances. Because none of these\n      // factors are statically decidable in JavaScript, JS function\n      // equality is not well-defined. This ambiguity allows us to\n      // consider the best possible heuristic among various imperfect\n      // options, and equating non-native functions that have the same\n      // code has enormous practical benefits, such as when comparing\n      // functions that are repeatedly passed as fresh function\n      // expressions within objects that are otherwise deeply equal. Since\n      // any function created from the same syntactic expression (in the\n      // same code location) will always stringify to the same code\n      // according to fnToStr.call, we can reasonably expect these\n      // repeatedly passed function expressions to have the same code, and\n      // thus behave \"the same\" (with all the caveats mentioned above),\n      // even though the runtime function objects are !== to one another.\n      return !endsWith(aCode, nativeCodeSuffix);\n    }\n  }\n\n  // Otherwise the values are not equal.\n  return false;\n}\n\nfunction definedKeys<TObject extends object>(obj: TObject) {\n  // Remember that the second argument to Array.prototype.filter will be\n  // used as `this` within the callback function.\n  return Object.keys(obj).filter(isDefinedKey, obj);\n}\nfunction isDefinedKey<TObject extends object>(\n  this: TObject,\n  key: keyof TObject,\n) {\n  return this[key] !== void 0;\n}\n\nconst nativeCodeSuffix = \"{ [native code] }\";\n\nfunction endsWith(full: string, suffix: string) {\n  const fromIndex = full.length - suffix.length;\n  return fromIndex >= 0 &&\n    full.indexOf(suffix, fromIndex) === fromIndex;\n}\n\nfunction previouslyCompared(a: object, b: object): boolean {\n  // Though cyclic references can make an object graph appear infinite from the\n  // perspective of a depth-first traversal, the graph still contains a finite\n  // number of distinct object references. We use the previousComparisons cache\n  // to avoid comparing the same pair of object references more than once, which\n  // guarantees termination (even if we end up comparing every object in one\n  // graph to every object in the other graph, which is extremely unlikely),\n  // while still allowing weird isomorphic structures (like rings with different\n  // lengths) a chance to pass the equality test.\n  let bSet = previousComparisons.get(a);\n  if (bSet) {\n    // Return true here because we can be sure false will be returned somewhere\n    // else if the objects are not equivalent.\n    if (bSet.has(b)) return true;\n  } else {\n    previousComparisons.set(a, bSet = new Set);\n  }\n  bSet.add(b);\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}