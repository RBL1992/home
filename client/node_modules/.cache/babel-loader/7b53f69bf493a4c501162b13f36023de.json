{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\nvar delModifier = function () {\n  return DELETE;\n};\nvar INVALIDATE = Object.create(null);\nvar EntityStore = function () {\n  function EntityStore(policies, group) {\n    var _this = this;\n    this.policies = policies;\n    this.group = group;\n    this.data = Object.create(null);\n    this.rootIds = Object.create(null);\n    this.refs = Object.create(null);\n    this.getFieldValue = function (objectOrReference, storeFieldName) {\n      return maybeDeepFreeze(isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n    };\n    this.canRead = function (objOrRef) {\n      return isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n    };\n    this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n      if (typeof objOrIdOrRef === \"string\") {\n        return makeReference(objOrIdOrRef);\n      }\n      if (isReference(objOrIdOrRef)) {\n        return objOrIdOrRef;\n      }\n      var id = _this.policies.identify(objOrIdOrRef)[0];\n      if (id) {\n        var ref = makeReference(id);\n        if (mergeIntoStore) {\n          _this.merge(id, objOrIdOrRef);\n        }\n        return ref;\n      }\n    };\n  }\n  EntityStore.prototype.toObject = function () {\n    return __assign({}, this.data);\n  };\n  EntityStore.prototype.has = function (dataId) {\n    return this.lookup(dataId, true) !== void 0;\n  };\n  EntityStore.prototype.get = function (dataId, fieldName) {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      var storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  };\n  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  };\n  EntityStore.prototype.merge = function (older, newer) {\n    var _this = this;\n    var dataId;\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n    var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n    var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n    if (!incoming) return;\n    __DEV__ ? invariant(typeof dataId === \"string\", \"store.merge expects a string ID\") : invariant(typeof dataId === \"string\", 1);\n    var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    this.data[dataId] = merged;\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        var fieldsToDirty_1 = Object.create(null);\n        if (!existing) fieldsToDirty_1.__exists = 1;\n        Object.keys(incoming).forEach(function (storeFieldName) {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            fieldsToDirty_1[storeFieldName] = 1;\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty_1[fieldName] = 1;\n            }\n            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n        if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty_1.__typename;\n        }\n        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n          return _this.group.dirty(dataId, fieldName);\n        });\n      }\n    }\n  };\n  EntityStore.prototype.modify = function (dataId, fields) {\n    var _this = this;\n    var storeObject = this.lookup(dataId);\n    if (storeObject) {\n      var changedFields_1 = Object.create(null);\n      var needToMerge_1 = false;\n      var allDeleted_1 = true;\n      var sharedDetails_1 = {\n        DELETE: DELETE,\n        INVALIDATE: INVALIDATE,\n        isReference: isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: function (fieldNameOrOptions, from) {\n          return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId)\n          } : fieldNameOrOptions, {\n            store: _this\n          });\n        }\n      };\n      Object.keys(storeObject).forEach(function (storeFieldName) {\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          var newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), {\n            fieldName: fieldName,\n            storeFieldName: storeFieldName,\n            storage: _this.getStorage(dataId, storeFieldName)\n          }));\n          if (newValue === INVALIDATE) {\n            _this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields_1[storeFieldName] = newValue;\n              needToMerge_1 = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted_1 = false;\n        }\n      });\n      if (needToMerge_1) {\n        this.merge(dataId, changedFields_1);\n        if (allDeleted_1) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n  EntityStore.prototype.delete = function (dataId, fieldName, args) {\n    var _a;\n    var storeObject = this.lookup(dataId);\n    if (storeObject) {\n      var typename = this.getFieldValue(storeObject, \"__typename\");\n      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n        typename: typename,\n        fieldName: fieldName,\n        args: args\n      }) : fieldName;\n      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n    }\n    return false;\n  };\n  EntityStore.prototype.evict = function (options, limit) {\n    var evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  };\n  EntityStore.prototype.clear = function () {\n    this.replace(null);\n  };\n  EntityStore.prototype.extract = function () {\n    var _this = this;\n    var obj = this.toObject();\n    var extraRootIds = [];\n    this.getRootIdSet().forEach(function (id) {\n      if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = {\n        extraRootIds: extraRootIds.sort()\n      };\n    }\n    return obj;\n  };\n  EntityStore.prototype.replace = function (newData) {\n    var _this = this;\n    Object.keys(this.data).forEach(function (dataId) {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        _this.delete(dataId);\n      }\n    });\n    if (newData) {\n      var __META = newData.__META,\n        rest_1 = __rest(newData, [\"__META\"]);\n      Object.keys(rest_1).forEach(function (dataId) {\n        _this.merge(dataId, rest_1[dataId]);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  };\n  EntityStore.prototype.retain = function (rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  };\n  EntityStore.prototype.release = function (rootId) {\n    if (this.rootIds[rootId] > 0) {\n      var count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  };\n  EntityStore.prototype.getRootIdSet = function (ids) {\n    if (ids === void 0) {\n      ids = new Set();\n    }\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  };\n  EntityStore.prototype.gc = function () {\n    var _this = this;\n    var ids = this.getRootIdSet();\n    var snapshot = this.toObject();\n    ids.forEach(function (id) {\n      if (hasOwn.call(snapshot, id)) {\n        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n        delete snapshot[id];\n      }\n    });\n    var idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      var root_1 = this;\n      while (root_1 instanceof Layer) root_1 = root_1.parent;\n      idsToRemove.forEach(function (id) {\n        return root_1.delete(id);\n      });\n    }\n    return idsToRemove;\n  };\n  EntityStore.prototype.findChildRefIds = function (dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      var found_1 = this.refs[dataId] = Object.create(null);\n      var root = this.data[dataId];\n      if (!root) return found_1;\n      var workSet_1 = new Set([root]);\n      workSet_1.forEach(function (obj) {\n        if (isReference(obj)) {\n          found_1[obj.__ref] = true;\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(function (key) {\n            var child = obj[key];\n            if (isNonNullObject(child)) {\n              workSet_1.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  };\n  EntityStore.prototype.makeCacheKey = function () {\n    return this.group.keyMaker.lookupArray(arguments);\n  };\n  return EntityStore;\n}();\nexport { EntityStore };\nvar CacheGroup = function () {\n  function CacheGroup(caching, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n    this.caching = caching;\n    this.parent = parent;\n    this.d = null;\n    this.resetCaching();\n  }\n  CacheGroup.prototype.resetCaching = function () {\n    this.d = this.caching ? dep() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  };\n  CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      var fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  };\n  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n    }\n  };\n  return CacheGroup;\n}();\nfunction makeDepKey(dataId, storeFieldName) {\n  return storeFieldName + '#' + dataId;\n}\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n  if (supportsResultCaching(store)) {\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n(function (EntityStore) {\n  var Root = function (_super) {\n    __extends(Root, _super);\n    function Root(_a) {\n      var policies = _a.policies,\n        _b = _a.resultCaching,\n        resultCaching = _b === void 0 ? true : _b,\n        seed = _a.seed;\n      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n      _this.stump = new Stump(_this);\n      _this.storageTrie = new Trie(canUseWeakMap);\n      if (seed) _this.replace(seed);\n      return _this;\n    }\n    Root.prototype.addLayer = function (layerId, replay) {\n      return this.stump.addLayer(layerId, replay);\n    };\n    Root.prototype.removeLayer = function () {\n      return this;\n    };\n    Root.prototype.getStorage = function () {\n      return this.storageTrie.lookupArray(arguments);\n    };\n    return Root;\n  }(EntityStore);\n  EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\nvar Layer = function (_super) {\n  __extends(Layer, _super);\n  function Layer(id, parent, replay, group) {\n    var _this = _super.call(this, parent.policies, group) || this;\n    _this.id = id;\n    _this.parent = parent;\n    _this.replay = replay;\n    _this.group = group;\n    replay(_this);\n    return _this;\n  }\n  Layer.prototype.addLayer = function (layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  };\n  Layer.prototype.removeLayer = function (layerId) {\n    var _this = this;\n    var parent = this.parent.removeLayer(layerId);\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(function (dataId) {\n          var ownStoreObject = _this.data[dataId];\n          var parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            _this.delete(dataId);\n          } else if (!ownStoreObject) {\n            _this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n              _this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n              if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                _this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n      return parent;\n    }\n    if (parent === this.parent) return this;\n    return parent.addLayer(this.id, this.replay);\n  };\n  Layer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n  Layer.prototype.findChildRefIds = function (dataId) {\n    var fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n  };\n  Layer.prototype.getStorage = function () {\n    var p = this.parent;\n    while (p.parent) p = p.parent;\n    return p.getStorage.apply(p, arguments);\n  };\n  return Layer;\n}(EntityStore);\nvar Stump = function (_super) {\n  __extends(Stump, _super);\n  function Stump(root) {\n    return _super.call(this, \"EntityStore.Stump\", root, function () {}, new CacheGroup(root.group.caching, root.group)) || this;\n  }\n  Stump.prototype.removeLayer = function () {\n    return this;\n  };\n  Stump.prototype.merge = function () {\n    return this.parent.merge.apply(this.parent, arguments);\n  };\n  return Stump;\n}(Layer);\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n  var existingValue = existingObject[property];\n  var incomingValue = incomingObject[property];\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nexport function supportsResultCaching(store) {\n  return !!(store instanceof EntityStore && store.group.caching);\n}","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,kCAA0B;AACpD,SAASC,GAAG,QAAsC,UAAU;AAC5D,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,IAAI,QAAQ,WAAW;AAEhC,SACEC,WAAW,EAIXC,aAAa,EACbC,UAAU,EACVC,eAAe,EACfC,aAAa,EACbC,eAAe,QACV,0BAAkB;AAEzB,SAASC,MAAM,EAAEC,sBAAsB,QAAQ,cAAY;AAY3D,IAAMC,MAAM,GAAQC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;AACvC,IAAMC,WAAW,GAAkB;EAAM,aAAM;AAAN,CAAM;AAC/C,IAAMC,UAAU,GAAQH,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;AAE3C;EAGE,qBACkBG,QAAkB,EAClBC,KAAiB;IAFnC;IACkB,aAAQ,GAARD,QAAQ;IACR,UAAK,GAALC,KAAK;IAJb,SAAI,GAA0BL,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAqUnD,YAAO,GAEXD,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IA0Df,SAAI,GAERD,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IA6ChB,kBAAa,GAAG,UACrBK,iBAAsD,EACtDC,cAAsB;MACnB,sBAAe,CAClBhB,WAAW,CAACe,iBAAiB,CAAC,GAC1BE,KAAI,CAACC,GAAG,CAACH,iBAAiB,CAACI,KAAK,EAAEH,cAAc,CAAC,GACjDD,iBAAiB,IAAIA,iBAAiB,CAACC,cAAc,CAAC,CACxC;IAJf,CAIe;IAKb,YAAO,GAAoB,kBAAQ;MACxC,OAAOhB,WAAW,CAACoB,QAAQ,CAAC,GACxBH,KAAI,CAACI,GAAG,CAACD,QAAQ,CAACD,KAAK,CAAC,GACxB,OAAOC,QAAQ,KAAK,QAAQ;IAClC,CAAC;IAMM,gBAAW,GAAwB,UACxCE,YAAY,EACZC,cAAc;MAEd,IAAI,OAAOD,YAAY,KAAK,QAAQ,EAAE;QACpC,OAAOrB,aAAa,CAACqB,YAAY,CAAC;;MAGpC,IAAItB,WAAW,CAACsB,YAAY,CAAC,EAAE;QAC7B,OAAOA,YAAY;;MAGd,MAAE,GAAIL,KAAI,CAACJ,QAAQ,CAACW,QAAQ,CAACF,YAAY,CAAC,GAAxC;MAET,IAAIG,EAAE,EAAE;QACN,IAAMC,GAAG,GAAGzB,aAAa,CAACwB,EAAE,CAAC;QAC7B,IAAIF,cAAc,EAAE;UAClBN,KAAI,CAACU,KAAK,CAACF,EAAE,EAAEH,YAAY,CAAC;;QAE9B,OAAOI,GAAG;;IAEd,CAAC;EAtdE;EAaIE,8BAAQ,GAAf;IACE,oBAAY,IAAI,CAACC,IAAI;EACvB,CAAC;EAEMD,yBAAG,GAAV,UAAWE,MAAc;IACvB,OAAO,IAAI,CAACC,MAAM,CAACD,MAAM,EAAE,IAAI,CAAC,KAAK,KAAK,CAAC;EAC7C,CAAC;EAEMF,yBAAG,GAAV,UAAWE,MAAc,EAAEE,SAAiB;IAC1C,IAAI,CAAClB,KAAK,CAACmB,MAAM,CAACH,MAAM,EAAEE,SAAS,CAAC;IACpC,IAAI1B,MAAM,CAAC4B,IAAI,CAAC,IAAI,CAACL,IAAI,EAAEC,MAAM,CAAC,EAAE;MAClC,IAAMK,WAAW,GAAG,IAAI,CAACN,IAAI,CAACC,MAAM,CAAC;MACrC,IAAIK,WAAW,IAAI7B,MAAM,CAAC4B,IAAI,CAACC,WAAW,EAAEH,SAAS,CAAC,EAAE;QACtD,OAAOG,WAAW,CAACH,SAAS,CAAC;;;IAGjC,IAAIA,SAAS,KAAK,YAAY,IAC1B1B,MAAM,CAAC4B,IAAI,CAAC,IAAI,CAACrB,QAAQ,CAACuB,iBAAiB,EAAEN,MAAM,CAAC,EAAE;MACxD,OAAO,IAAI,CAACjB,QAAQ,CAACuB,iBAAiB,CAACN,MAAM,CAAC;;IAEhD,IAAI,IAAI,YAAYO,KAAK,EAAE;MACzB,OAAO,IAAI,CAACC,MAAM,CAACpB,GAAG,CAACY,MAAM,EAAEE,SAAS,CAAC;;EAE7C,CAAC;EAESJ,4BAAM,GAAhB,UAAiBE,MAAc,EAAES,iBAA2B;IAM1D,IAAIA,iBAAiB,EAAE,IAAI,CAACzB,KAAK,CAACmB,MAAM,CAACH,MAAM,EAAE,UAAU,CAAC;IAE5D,IAAIxB,MAAM,CAAC4B,IAAI,CAAC,IAAI,CAACL,IAAI,EAAEC,MAAM,CAAC,EAAE;MAClC,OAAO,IAAI,CAACD,IAAI,CAACC,MAAM,CAAC;;IAG1B,IAAI,IAAI,YAAYO,KAAK,EAAE;MACzB,OAAO,IAAI,CAACC,MAAM,CAACP,MAAM,CAACD,MAAM,EAAES,iBAAiB,CAAC;;IAGtD,IAAI,IAAI,CAAC1B,QAAQ,CAACuB,iBAAiB,CAACN,MAAM,CAAC,EAAE;MAC3C,OAAOrB,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;;EAE9B,CAAC;EAEMkB,2BAAK,GAAZ,UACEY,KAA2B,EAC3BC,KAA2B;IAF7B;IAIE,IAAIX,MAA0B;IAG9B,IAAI9B,WAAW,CAACwC,KAAK,CAAC,EAAEA,KAAK,GAAGA,KAAK,CAACrB,KAAK;IAC3C,IAAInB,WAAW,CAACyC,KAAK,CAAC,EAAEA,KAAK,GAAGA,KAAK,CAACtB,KAAK;IAE3C,IAAMuB,QAAQ,GACZ,OAAOF,KAAK,KAAK,QAAQ,GACrB,IAAI,CAACT,MAAM,CAACD,MAAM,GAAGU,KAAK,CAAC,GAC3BA,KAAK;IAEX,IAAMG,QAAQ,GACZ,OAAOF,KAAK,KAAK,QAAQ,GACrB,IAAI,CAACV,MAAM,CAACD,MAAM,GAAGW,KAAK,CAAC,GAC3BA,KAAK;IAIX,IAAI,CAACE,QAAQ,EAAE;IAEfC,UACEhD,SAAO,QAAMkC,MAAK,KAClB,2CACA;IAEF,IAAMe,MAAM,GACV,IAAI3C,UAAU,CAAC4C,qBAAqB,CAAC,CAACnB,KAAK,CAACe,QAAQ,EAAEC,QAAQ,CAAC;IAIjE,IAAI,CAACd,IAAI,CAACC,MAAM,CAAC,GAAGe,MAAM;IAE1B,IAAIA,MAAM,KAAKH,QAAQ,EAAE;MACvB,OAAO,IAAI,CAACK,IAAI,CAACjB,MAAM,CAAC;MACxB,IAAI,IAAI,CAAChB,KAAK,CAACkC,OAAO,EAAE;QACtB,IAAMC,eAAa,GAAsBxC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QAK5D,IAAI,CAACgC,QAAQ,EAAEO,eAAa,CAACC,QAAQ,GAAG,CAAC;QAIzCzC,MAAM,CAAC0C,IAAI,CAACR,QAAQ,CAAC,CAACS,OAAO,CAAC,wBAAc;UAC1C,IAAI,CAACV,QAAQ,IAAIA,QAAQ,CAAC1B,cAAc,CAAC,KAAK6B,MAAM,CAAC7B,cAAc,CAAC,EAAE;YAGpEiC,eAAa,CAACjC,cAAc,CAAC,GAAG,CAAC;YASjC,IAAMgB,SAAS,GAAGzB,sBAAsB,CAACS,cAAc,CAAC;YACxD,IAAIgB,SAAS,KAAKhB,cAAc,IAC5B,CAACC,KAAI,CAACJ,QAAQ,CAACwC,UAAU,CAACR,MAAM,CAACS,UAAU,EAAEtB,SAAS,CAAC,EAAE;cAC3DiB,eAAa,CAACjB,SAAS,CAAC,GAAG,CAAC;;YAM9B,IAAIa,MAAM,CAAC7B,cAAc,CAAC,KAAK,KAAK,CAAC,IAAI,EAAEC,KAAI,YAAYoB,KAAK,CAAC,EAAE;cACjE,OAAOQ,MAAM,CAAC7B,cAAc,CAAC;;;QAGnC,CAAC,CAAC;QAEF,IAAIiC,eAAa,CAACK,UAAU,IACxB,EAAEZ,QAAQ,IAAIA,QAAQ,CAACY,UAAU,CAAC,IAKlC,IAAI,CAACzC,QAAQ,CAACuB,iBAAiB,CAACN,MAAM,CAAC,KAAKe,MAAM,CAACS,UAAU,EAAE;UACjE,OAAOL,eAAa,CAACK,UAAU;;QAGjC7C,MAAM,CAAC0C,IAAI,CAACF,eAAa,CAAC,CAACG,OAAO,CAChC,mBAAS;UAAI,YAAI,CAACtC,KAAK,CAACyC,KAAK,CAACzB,MAAgB,EAAEE,SAAS,CAAC;QAA7C,CAA6C,CAAC;;;EAGnE,CAAC;EAEMJ,4BAAM,GAAb,UACEE,MAAc,EACd0B,MAAiC;IAFnC;IAIE,IAAMrB,WAAW,GAAG,IAAI,CAACJ,MAAM,CAACD,MAAM,CAAC;IAEvC,IAAIK,WAAW,EAAE;MACf,IAAMsB,eAAa,GAAwBhD,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MAC9D,IAAIgD,aAAW,GAAG,KAAK;MACvB,IAAIC,YAAU,GAAG,IAAI;MAErB,IAAMC,eAAa,GAAG;QACpBpD,MAAM;QACNI,UAAU;QACVZ,WAAW;QACX6D,WAAW,EAAE,IAAI,CAACA,WAAW;QAC7BC,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBC,SAAS,EAAE,UACTC,kBAA6C,EAC7CC,IAA8B;UAC3B,YAAI,CAACpD,QAAQ,CAACkD,SAAS,CAC1B,OAAOC,kBAAkB,KAAK,QAAQ,GAAG;YACvChC,SAAS,EAAEgC,kBAAkB;YAC7BC,IAAI,EAAEA,IAAI,IAAIhE,aAAa,CAAC6B,MAAM;WACnC,GAAGkC,kBAAkB,EACtB;YAAEE,KAAK,EAAEjD;UAAI,CAAE,CAChB;QANI;OAON;MAEDR,MAAM,CAAC0C,IAAI,CAAChB,WAAW,CAAC,CAACiB,OAAO,CAAC,wBAAc;QAC7C,IAAMpB,SAAS,GAAGzB,sBAAsB,CAACS,cAAc,CAAC;QACxD,IAAImD,UAAU,GAAGhC,WAAW,CAACnB,cAAc,CAAC;QAC5C,IAAImD,UAAU,KAAK,KAAK,CAAC,EAAE;QAC3B,IAAMC,MAAM,GAAyB,OAAOZ,MAAM,KAAK,UAAU,GAC7DA,MAAM,GACNA,MAAM,CAACxC,cAAc,CAAC,IAAIwC,MAAM,CAACxB,SAAS,CAAC;QAC/C,IAAIoC,MAAM,EAAE;UACV,IAAIC,QAAQ,GAAGD,MAAM,KAAKzD,WAAW,GAAGH,MAAM,GAC5C4D,MAAM,CAACjE,eAAe,CAACgE,UAAU,CAAC,wBAC7BP,eAAa;YAChB5B,SAAS;YACThB,cAAc;YACdsD,OAAO,EAAErD,KAAI,CAACsD,UAAU,CAACzC,MAAM,EAAEd,cAAc;UAAC,GAChD;UACJ,IAAIqD,QAAQ,KAAKzD,UAAU,EAAE;YAC3BK,KAAI,CAACH,KAAK,CAACyC,KAAK,CAACzB,MAAM,EAAEd,cAAc,CAAC;WACzC,MAAM;YACL,IAAIqD,QAAQ,KAAK7D,MAAM,EAAE6D,QAAQ,GAAG,KAAK,CAAC;YAC1C,IAAIA,QAAQ,KAAKF,UAAU,EAAE;cAC3BV,eAAa,CAACzC,cAAc,CAAC,GAAGqD,QAAQ;cACxCX,aAAW,GAAG,IAAI;cAClBS,UAAU,GAAGE,QAAQ;;;;QAI3B,IAAIF,UAAU,KAAK,KAAK,CAAC,EAAE;UACzBR,YAAU,GAAG,KAAK;;MAEtB,CAAC,CAAC;MAEF,IAAID,aAAW,EAAE;QACf,IAAI,CAAC/B,KAAK,CAACG,MAAM,EAAE2B,eAAa,CAAC;QAEjC,IAAIE,YAAU,EAAE;UACd,IAAI,IAAI,YAAYtB,KAAK,EAAE;YACzB,IAAI,CAACR,IAAI,CAACC,MAAM,CAAC,GAAG,KAAK,CAAC;WAC3B,MAAM;YACL,OAAO,IAAI,CAACD,IAAI,CAACC,MAAM,CAAC;;UAE1B,IAAI,CAAChB,KAAK,CAACyC,KAAK,CAACzB,MAAM,EAAE,UAAU,CAAC;;QAGtC,OAAO,IAAI;;;IAIf,OAAO,KAAK;EACd,CAAC;EAQMF,4BAAM,GAAb,UACEE,MAAc,EACdE,SAAkB,EAClBwC,IAA0B;;IAE1B,IAAMrC,WAAW,GAAG,IAAI,CAACJ,MAAM,CAACD,MAAM,CAAC;IACvC,IAAIK,WAAW,EAAE;MACf,IAAMsC,QAAQ,GAAG,IAAI,CAACC,aAAa,CAASvC,WAAW,EAAE,YAAY,CAAC;MACtE,IAAMnB,cAAc,GAAGgB,SAAS,IAAIwC,IAAI,GACpC,IAAI,CAAC3D,QAAQ,CAAC8D,iBAAiB,CAAC;QAAEF,QAAQ;QAAEzC,SAAS;QAAEwC,IAAI;MAAA,CAAE,CAAC,GAC9DxC,SAAS;MACb,OAAO,IAAI,CAACoC,MAAM,CAACtC,MAAM,EAAEd,cAAc,IAAE4D,SACzCA,GAAC5D,cAAc,IAAGL,WAAW,QAC3BA,WAAW,CAAC;;IAElB,OAAO,KAAK;EACd,CAAC;EAEMiB,2BAAK,GAAZ,UACEiD,OAA2B,EAC3BC,KAAkB;IAElB,IAAIC,OAAO,GAAG,KAAK;IACnB,IAAIF,OAAO,CAACpD,EAAE,EAAE;MACd,IAAInB,MAAM,CAAC4B,IAAI,CAAC,IAAI,CAACL,IAAI,EAAEgD,OAAO,CAACpD,EAAE,CAAC,EAAE;QACtCsD,OAAO,GAAG,IAAI,CAACC,MAAM,CAACH,OAAO,CAACpD,EAAE,EAAEoD,OAAO,CAAC7C,SAAS,EAAE6C,OAAO,CAACL,IAAI,CAAC;;MAEpE,IAAI,IAAI,YAAYnC,KAAK,IAAI,IAAI,KAAKyC,KAAK,EAAE;QAC3CC,OAAO,GAAG,IAAI,CAACzC,MAAM,CAAC2C,KAAK,CAACJ,OAAO,EAAEC,KAAK,CAAC,IAAIC,OAAO;;MAMxD,IAAIF,OAAO,CAAC7C,SAAS,IAAI+C,OAAO,EAAE;QAChC,IAAI,CAACjE,KAAK,CAACyC,KAAK,CAACsB,OAAO,CAACpD,EAAE,EAAEoD,OAAO,CAAC7C,SAAS,IAAI,UAAU,CAAC;;;IAGjE,OAAO+C,OAAO;EAChB,CAAC;EAEMnD,2BAAK,GAAZ;IACE,IAAI,CAACsD,OAAO,CAAC,IAAI,CAAC;EACpB,CAAC;EAEMtD,6BAAO,GAAd;IAAA;IACE,IAAMuD,GAAG,GAAG,IAAI,CAACC,QAAQ,EAAE;IAC3B,IAAMC,YAAY,GAAa,EAAE;IACjC,IAAI,CAACC,YAAY,EAAE,CAAClC,OAAO,CAAC,YAAE;MAC5B,IAAI,CAAC9C,MAAM,CAAC4B,IAAI,CAACjB,KAAI,CAACJ,QAAQ,CAACuB,iBAAiB,EAAEX,EAAE,CAAC,EAAE;QACrD4D,YAAY,CAACE,IAAI,CAAC9D,EAAE,CAAC;;IAEzB,CAAC,CAAC;IACF,IAAI4D,YAAY,CAACG,MAAM,EAAE;MACvBL,GAAG,CAACM,MAAM,GAAG;QAAEJ,YAAY,EAAEA,YAAY,CAACK,IAAI;MAAE,CAAE;;IAEpD,OAAOP,GAAG;EACZ,CAAC;EAEMvD,6BAAO,GAAd,UAAe+D,OAAqC;IAApD;IACElF,MAAM,CAAC0C,IAAI,CAAC,IAAI,CAACtB,IAAI,CAAC,CAACuB,OAAO,CAAC,gBAAM;MACnC,IAAI,EAAEuC,OAAO,IAAIrF,MAAM,CAAC4B,IAAI,CAACyD,OAAO,EAAE7D,MAAM,CAAC,CAAC,EAAE;QAC9Cb,KAAI,CAAC+D,MAAM,CAAClD,MAAM,CAAC;;IAEvB,CAAC,CAAC;IACF,IAAI6D,OAAO,EAAE;MACH,UAAM,GAAcA,OAAO,OAArB;QAAKC,MAAI,UAAKD,OAAO,EAA7B,UAAmB,CAAF;MACvBlF,MAAM,CAAC0C,IAAI,CAACyC,MAAI,CAAC,CAACxC,OAAO,CAAC,gBAAM;QAC9BnC,KAAI,CAACU,KAAK,CAACG,MAAM,EAAE8D,MAAI,CAAC9D,MAAM,CAAgB,CAAC;MACjD,CAAC,CAAC;MACF,IAAI2D,MAAM,EAAE;QACVA,MAAM,CAACJ,YAAY,CAACjC,OAAO,CAAC,IAAI,CAACyC,MAAM,EAAE,IAAI,CAAC;;;EAGpD,CAAC;EAcMjE,4BAAM,GAAb,UAAckE,MAAc;IAC1B,OAAO,IAAI,CAACC,OAAO,CAACD,MAAM,CAAC,GAAG,CAAC,IAAI,CAACC,OAAO,CAACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;EAC/D,CAAC;EAEMlE,6BAAO,GAAd,UAAekE,MAAc;IAC3B,IAAI,IAAI,CAACC,OAAO,CAACD,MAAM,CAAC,GAAG,CAAC,EAAE;MAC5B,IAAME,KAAK,GAAG,EAAE,IAAI,CAACD,OAAO,CAACD,MAAM,CAAC;MACpC,IAAI,CAACE,KAAK,EAAE,OAAO,IAAI,CAACD,OAAO,CAACD,MAAM,CAAC;MACvC,OAAOE,KAAK;;IAEd,OAAO,CAAC;EACV,CAAC;EAIMpE,kCAAY,GAAnB,UAAoBqE,GAAuB;IAAvB;MAAAA,UAAUC,GAAG,EAAU;IAAA;IACzCzF,MAAM,CAAC0C,IAAI,CAAC,IAAI,CAAC4C,OAAO,CAAC,CAAC3C,OAAO,CAAC6C,GAAG,CAACE,GAAG,EAAEF,GAAG,CAAC;IAC/C,IAAI,IAAI,YAAY5D,KAAK,EAAE;MACzB,IAAI,CAACC,MAAM,CAACgD,YAAY,CAACW,GAAG,CAAC;KAC9B,MAAM;MAILxF,MAAM,CAAC0C,IAAI,CAAC,IAAI,CAACtC,QAAQ,CAACuB,iBAAiB,CAAC,CAACgB,OAAO,CAAC6C,GAAG,CAACE,GAAG,EAAEF,GAAG,CAAC;;IAEpE,OAAOA,GAAG;EACZ,CAAC;EAMMrE,wBAAE,GAAT;IAAA;IACE,IAAMqE,GAAG,GAAG,IAAI,CAACX,YAAY,EAAE;IAC/B,IAAMc,QAAQ,GAAG,IAAI,CAAChB,QAAQ,EAAE;IAChCa,GAAG,CAAC7C,OAAO,CAAC,YAAE;MACZ,IAAI9C,MAAM,CAAC4B,IAAI,CAACkE,QAAQ,EAAE3E,EAAE,CAAC,EAAE;QAI7BhB,MAAM,CAAC0C,IAAI,CAAClC,KAAI,CAACoF,eAAe,CAAC5E,EAAE,CAAC,CAAC,CAAC2B,OAAO,CAAC6C,GAAG,CAACE,GAAG,EAAEF,GAAG,CAAC;QAG3D,OAAOG,QAAQ,CAAC3E,EAAE,CAAC;;IAEvB,CAAC,CAAC;IACF,IAAM6E,WAAW,GAAG7F,MAAM,CAAC0C,IAAI,CAACiD,QAAQ,CAAC;IACzC,IAAIE,WAAW,CAACd,MAAM,EAAE;MACtB,IAAIe,MAAI,GAAgB,IAAI;MAC5B,OAAOA,MAAI,YAAYlE,KAAK,EAAEkE,MAAI,GAAGA,MAAI,CAACjE,MAAM;MAChDgE,WAAW,CAAClD,OAAO,CAAC,YAAE;QAAI,aAAI,CAAC4B,MAAM,CAACvD,EAAE,CAAC;MAAf,CAAe,CAAC;;IAE5C,OAAO6E,WAAW;EACpB,CAAC;EAOM1E,qCAAe,GAAtB,UAAuBE,MAAc;IACnC,IAAI,CAACxB,MAAM,CAAC4B,IAAI,CAAC,IAAI,CAACa,IAAI,EAAEjB,MAAM,CAAC,EAAE;MACnC,IAAM0E,OAAK,GAAG,IAAI,CAACzD,IAAI,CAACjB,MAAM,CAAC,GAAGrB,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MACrD,IAAM+F,IAAI,GAAG,IAAI,CAAC5E,IAAI,CAACC,MAAM,CAAC;MAC9B,IAAI,CAAC2E,IAAI,EAAE,OAAOD,OAAK;MAEvB,IAAME,SAAO,GAAG,IAAIR,GAAG,CAA+B,CAACO,IAAI,CAAC,CAAC;MAG7DC,SAAO,CAACtD,OAAO,CAAC,aAAG;QACjB,IAAIpD,WAAW,CAACmF,GAAG,CAAC,EAAE;UACpBqB,OAAK,CAACrB,GAAG,CAAChE,KAAK,CAAC,GAAG,IAAI;;QASzB,IAAId,eAAe,CAAC8E,GAAG,CAAC,EAAE;UACxB1E,MAAM,CAAC0C,IAAI,CAACgC,GAAG,CAAC,CAAC/B,OAAO,CAAC,aAAG;YAC1B,IAAMuD,KAAK,GAAGxB,GAAG,CAACyB,GAAG,CAAC;YAGtB,IAAIvG,eAAe,CAACsG,KAAK,CAAC,EAAE;cAC1BD,SAAO,CAACP,GAAG,CAACQ,KAAK,CAAC;;UAEtB,CAAC,CAAC;;MAEN,CAAC,CAAC;;IAEJ,OAAO,IAAI,CAAC5D,IAAI,CAACjB,MAAM,CAAC;EAC1B,CAAC;EAIMF,kCAAY,GAAnB;IACE,OAAO,IAAI,CAACd,KAAK,CAAC+F,QAAQ,CAACC,WAAW,CAACC,SAAS,CAAC;EACnD,CAAC;EAgDH,kBAAC;AAAD,CAAC,EA7dD;;AA8eA;EAOE,oBACkB/D,OAAgB,EACxBV,MAAgC;IAAhC;MAAAA,aAAgC;IAAA;IADxB,YAAO,GAAPU,OAAO;IACf,WAAM,GAANV,MAAM;IARR,MAAC,GAAgD,IAAI;IAU3D,IAAI,CAAC0E,YAAY,EAAE;EACrB;EAEOC,iCAAY,GAAnB;IACE,IAAI,CAACC,CAAC,GAAG,IAAI,CAAClE,OAAO,GAAGnD,GAAG,EAAU,GAAG,IAAI;IAC5C,IAAI,CAACgH,QAAQ,GAAG,IAAI9G,IAAI,CAACK,aAAa,CAAC;EACzC,CAAC;EAEM6G,2BAAM,GAAb,UAAcnF,MAAc,EAAEd,cAAsB;IAClD,IAAI,IAAI,CAACkG,CAAC,EAAE;MACV,IAAI,CAACA,CAAC,CAACC,UAAU,CAACrF,MAAM,EAAEd,cAAc,CAAC,CAAC;MAC1C,IAAMgB,SAAS,GAAGzB,sBAAsB,CAACS,cAAc,CAAC;MACxD,IAAIgB,SAAS,KAAKhB,cAAc,EAAE;QAMhC,IAAI,CAACkG,CAAC,CAACC,UAAU,CAACrF,MAAM,EAAEE,SAAS,CAAC,CAAC;;MAEvC,IAAI,IAAI,CAACM,MAAM,EAAE;QACf,IAAI,CAACA,MAAM,CAACL,MAAM,CAACH,MAAM,EAAEd,cAAc,CAAC;;;EAGhD,CAAC;EAEMiG,0BAAK,GAAZ,UAAanF,MAAc,EAAEd,cAAsB;IACjD,IAAI,IAAI,CAACkG,CAAC,EAAE;MACV,IAAI,CAACA,CAAC,CAAC3D,KAAK,CACV4D,UAAU,CAACrF,MAAM,EAAEd,cAAc,CAAC,EAQlCA,cAAc,KAAK,UAAU,GAAG,QAAQ,GAAG,UAAU,CACtD;;EAEL,CAAC;EACH,iBAAC;AAAD,CAAC,EApDD;AAsDA,SAASmG,UAAU,CAACrF,MAAc,EAAEd,cAAsB;EAIxD,OAAOA,cAAc,GAAG,GAAG,GAAGc,MAAM;AACtC;AAEA,OAAM,SAAUsF,8BAA8B,CAC5ClD,KAAsB,EACtBmD,QAAgB;EAEhB,IAAIC,qBAAqB,CAACpD,KAAK,CAAC,EAAE;IAShCA,KAAK,CAACpD,KAAK,CAACmB,MAAM,CAACoF,QAAQ,EAAE,UAAU,CAAC;;AAE5C;AAEA,WAAiBzF,WAAW;EAE1B;IAA0B2F;IACxB,cAAY3C,EAQX;UAPC/D,QAAQ;QACR2G,qBAAoB;QAApBC,aAAa,mBAAG,IAAI;QACpBC,IAAI;MAHN,YASEC,kBAAM9G,QAAQ,EAAE,IAAIoG,UAAU,CAACQ,aAAa,CAAC,CAAC;MAIhCxG,WAAK,GAAG,IAAI2G,KAAK,CAAC3G,KAAI,CAAC;MAiBvBA,iBAAW,GAAG,IAAIlB,IAAI,CAAcK,aAAa,CAAC;MApBhE,IAAIsH,IAAI,EAAEzG,KAAI,CAACiE,OAAO,CAACwC,IAAI,CAAC;;IAC9B;IAIOG,uBAAQ,GAAf,UACEC,OAAe,EACfC,MAAmC;MAKnC,OAAO,IAAI,CAACC,KAAK,CAACC,QAAQ,CAACH,OAAO,EAAEC,MAAM,CAAC;IAC7C,CAAC;IAEMF,0BAAW,GAAlB;MAEE,OAAO,IAAI;IACb,CAAC;IAGMA,yBAAU,GAAjB;MACE,OAAO,IAAI,CAACK,WAAW,CAACpB,WAAW,CAACC,SAAS,CAAC;IAChD,CAAC;IACH,WAAC;EAAD,CAAC,CAnCyBnF,WAAW;EAAxBA,gBAAI,OAmChB;AACH,CAAC,EAtCgBA,WAAW,KAAXA,WAAW;AA0C5B;EAAoB2F;EAClB,eACkB9F,EAAU,EACVa,MAAmB,EACnByF,MAAmC,EACnCjH,KAAiB;IAJnC,YAME6G,kBAAMrF,MAAM,CAACzB,QAAQ,EAAEC,KAAK,CAAC;IALbG,QAAE,GAAFQ,EAAE;IACFR,YAAM,GAANqB,MAAM;IACNrB,YAAM,GAAN8G,MAAM;IACN9G,WAAK,GAALH,KAAK;IAGrBiH,MAAM,CAAC9G,KAAI,CAAC;;EACd;EAEOoB,wBAAQ,GAAf,UACEyF,OAAe,EACfC,MAAmC;IAEnC,OAAO,IAAI1F,KAAK,CAACyF,OAAO,EAAE,IAAI,EAAEC,MAAM,EAAE,IAAI,CAACjH,KAAK,CAAC;EACrD,CAAC;EAEMuB,2BAAW,GAAlB,UAAmByF,OAAe;IAAlC;IAEE,IAAMxF,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC6F,WAAW,CAACL,OAAO,CAAC;IAE/C,IAAIA,OAAO,KAAK,IAAI,CAACrG,EAAE,EAAE;MACvB,IAAI,IAAI,CAACX,KAAK,CAACkC,OAAO,EAAE;QAKtBvC,MAAM,CAAC0C,IAAI,CAAC,IAAI,CAACtB,IAAI,CAAC,CAACuB,OAAO,CAAC,gBAAM;UACnC,IAAMgF,cAAc,GAAGnH,KAAI,CAACY,IAAI,CAACC,MAAM,CAAC;UACxC,IAAMuG,iBAAiB,GAAG/F,MAAM,CAAC,QAAQ,CAAC,CAACR,MAAM,CAAC;UAClD,IAAI,CAACuG,iBAAiB,EAAE;YAMtBpH,KAAI,CAAC+D,MAAM,CAAClD,MAAM,CAAC;WACpB,MAAM,IAAI,CAACsG,cAAc,EAAE;YAK1BnH,KAAI,CAACH,KAAK,CAACyC,KAAK,CAACzB,MAAM,EAAE,UAAU,CAAC;YACpCrB,MAAM,CAAC0C,IAAI,CAACkF,iBAAiB,CAAC,CAACjF,OAAO,CAAC,wBAAc;cACnDnC,KAAI,CAACH,KAAK,CAACyC,KAAK,CAACzB,MAAM,EAAEd,cAAc,CAAC;YAC1C,CAAC,CAAC;WACH,MAAM,IAAIoH,cAAc,KAAKC,iBAAiB,EAAE;YAI/C5H,MAAM,CAAC0C,IAAI,CAACiF,cAAc,CAAC,CAAChF,OAAO,CAAC,wBAAc;cAChD,IAAI,CAACtD,KAAK,CAACsI,cAAc,CAACpH,cAAc,CAAC,EAC9BqH,iBAAiB,CAACrH,cAAc,CAAC,CAAC,EAAE;gBAC7CC,KAAI,CAACH,KAAK,CAACyC,KAAK,CAACzB,MAAM,EAAEd,cAAc,CAAC;;YAE5C,CAAC,CAAC;;QAEN,CAAC,CAAC;;MAGJ,OAAOsB,MAAM;;IAIf,IAAIA,MAAM,KAAK,IAAI,CAACA,MAAM,EAAE,OAAO,IAAI;IAGvC,OAAOA,MAAM,CAAC2F,QAAQ,CAAC,IAAI,CAACxG,EAAE,EAAE,IAAI,CAACsG,MAAM,CAAC;EAC9C,CAAC;EAEM1F,wBAAQ,GAAf;IACE,6BACK,IAAI,CAACC,MAAM,CAAC8C,QAAQ,EAAE,GACtB,IAAI,CAACvD,IAAI;EAEhB,CAAC;EAEMQ,+BAAe,GAAtB,UAAuBP,MAAc;IACnC,IAAMwG,UAAU,GAAG,IAAI,CAAChG,MAAM,CAAC+D,eAAe,CAACvE,MAAM,CAAC;IACtD,OAAOxB,MAAM,CAAC4B,IAAI,CAAC,IAAI,CAACL,IAAI,EAAEC,MAAM,CAAC,GAAEyG,sBAClCD,UAAU,GACVX,iBAAMtB,eAAe,YAACvE,MAAM,CAAC,IAC9BwG,UAAU;EAChB,CAAC;EAEMjG,0BAAU,GAAjB;IACE,IAAImG,CAAC,GAAgB,IAAI,CAAClG,MAAM;IAChC,OAAQkG,CAAW,CAAClG,MAAM,EAAEkG,CAAC,GAAIA,CAAW,CAAClG,MAAM;IACnD,OAAOkG,CAAC,CAACjE,UAAU,CAACkE,KAAK,CAACD,CAAC,EAAEzB,SAAS,CAAC;EACzC,CAAC;EACH,YAAC;AAAD,CAAC,CA3FmBnF,WAAW;AAiG/B;EAAoB2F;EAClB,eAAYd,IAAsB;WAChCkB,kBACE,mBAAmB,EACnBlB,IAAI,EACJ,aAAO,CAAC,EACR,IAAIQ,UAAU,CAACR,IAAI,CAAC3F,KAAK,CAACkC,OAAO,EAAEyD,IAAI,CAAC3F,KAAK,CAAC,CAC/C;EACH;EAEO8G,2BAAW,GAAlB;IAEE,OAAO,IAAI;EACb,CAAC;EAEMA,qBAAK,GAAZ;IAME,OAAO,IAAI,CAACtF,MAAM,CAACX,KAAK,CAAC8G,KAAK,CAAC,IAAI,CAACnG,MAAM,EAAEyE,SAAS,CAAC;EACxD,CAAC;EACH,YAAC;AAAD,CAAC,CAvBmB1E,KAAK;AAyBzB,SAASS,qBAAqB,CAC5B4F,cAA2B,EAC3BC,cAA2B,EAC3BC,QAAgB;EAEhB,IAAMC,aAAa,GAAGH,cAAc,CAACE,QAAQ,CAAC;EAC9C,IAAME,aAAa,GAAGH,cAAc,CAACC,QAAQ,CAAC;EAM9C,OAAO9I,KAAK,CAAC+I,aAAa,EAAEC,aAAa,CAAC,GAAGD,aAAa,GAAGC,aAAa;AAC5E;AAEA,OAAM,SAAUxB,qBAAqB,CAACpD,KAAU;EAE9C,OAAO,CAAC,EAAEA,KAAK,YAAYtC,WAAW,IAAIsC,KAAK,CAACpD,KAAK,CAACkC,OAAO,CAAC;AAChE","names":["invariant","dep","equal","Trie","isReference","makeReference","DeepMerger","maybeDeepFreeze","canUseWeakMap","isNonNullObject","hasOwn","fieldNameFromStoreName","DELETE","Object","create","delModifier","INVALIDATE","policies","group","objectOrReference","storeFieldName","_this","get","__ref","objOrRef","has","objOrIdOrRef","mergeIntoStore","identify","id","ref","merge","EntityStore","data","dataId","lookup","fieldName","depend","call","storeObject","rootTypenamesById","Layer","parent","dependOnExistence","older","newer","existing","incoming","__DEV__","merged","storeObjectReconciler","refs","caching","fieldsToDirty_1","__exists","keys","forEach","hasKeyArgs","__typename","dirty","fields","changedFields_1","needToMerge_1","allDeleted_1","sharedDetails_1","toReference","canRead","readField","fieldNameOrOptions","from","store","fieldValue","modify","newValue","storage","getStorage","args","typename","getFieldValue","getStoreFieldName","_a","options","limit","evicted","delete","evict","replace","obj","toObject","extraRootIds","getRootIdSet","push","length","__META","sort","newData","rest_1","retain","rootId","rootIds","count","ids","Set","add","snapshot","findChildRefIds","idsToRemove","root_1","found_1","root","workSet_1","child","key","keyMaker","lookupArray","arguments","resetCaching","CacheGroup","d","makeDepKey","maybeDependOnExistenceOfEntity","entityId","supportsResultCaching","__extends","_b","resultCaching","seed","_super","Stump","Root","layerId","replay","stump","addLayer","storageTrie","removeLayer","ownStoreObject","parentStoreObject","fromParent","__assign","p","apply","existingObject","incomingObject","property","existingValue","incomingValue"],"sourceRoot":"","sources":["../../../src/cache/inmemory/entityStore.ts"],"sourcesContent":["import { invariant } from '../../utilities/globals';\nimport { dep, OptimisticDependencyFunction } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\n\nimport {\n  isReference,\n  StoreValue,\n  StoreObject,\n  Reference,\n  makeReference,\n  DeepMerger,\n  maybeDeepFreeze,\n  canUseWeakMap,\n  isNonNullObject,\n} from '../../utilities';\nimport { NormalizedCache, NormalizedCacheObject } from './types';\nimport { hasOwn, fieldNameFromStoreName } from './helpers';\nimport { Policies, StorageType } from './policies';\nimport { Cache } from '../core/types/Cache';\nimport {\n  SafeReadonly,\n  Modifier,\n  Modifiers,\n  ReadFieldOptions,\n  ToReferenceFunction,\n  CanReadFunction,\n} from '../core/types/common';\n\nconst DELETE: any = Object.create(null);\nconst delModifier: Modifier<any> = () => DELETE;\nconst INVALIDATE: any = Object.create(null);\n\nexport abstract class EntityStore implements NormalizedCache {\n  protected data: NormalizedCacheObject = Object.create(null);\n\n  constructor(\n    public readonly policies: Policies,\n    public readonly group: CacheGroup,\n  ) {}\n\n  public abstract addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer;\n\n  public abstract removeLayer(layerId: string): EntityStore;\n\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n\n  public toObject(): NormalizedCacheObject {\n    return { ...this.data };\n  }\n\n  public has(dataId: string): boolean {\n    return this.lookup(dataId, true) !== void 0;\n  }\n\n  public get(dataId: string, fieldName: string): StoreValue {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" &&\n        hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n\n  protected lookup(dataId: string, dependOnExistence?: boolean): StoreObject | undefined {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  }\n\n  public merge(\n    older: string | StoreObject,\n    newer: StoreObject | string,\n  ): void {\n    let dataId: string | undefined;\n\n    // Convert unexpected references to ID strings.\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n\n    const existing: StoreObject | undefined =\n      typeof older === \"string\"\n        ? this.lookup(dataId = older)\n        : older;\n\n    const incoming: StoreObject | undefined =\n      typeof newer === \"string\"\n        ? this.lookup(dataId = newer)\n        : newer;\n\n    // If newer was a string ID, but that ID was not defined in this store,\n    // then there are no fields to be merged, so we're done.\n    if (!incoming) return;\n\n    invariant(\n      typeof dataId === \"string\",\n      \"store.merge expects a string ID\",\n    );\n\n    const merged: StoreObject =\n      new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty: Record<string, 1> = Object.create(null);\n\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach(storeFieldName => {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName &&\n                !this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty[fieldName] = 1;\n            }\n\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (fieldsToDirty.__typename &&\n            !(existing && existing.__typename) &&\n            // Since we return default root __typename strings\n            // automatically from store.get, we don't need to dirty the\n            // ROOT_QUERY.__typename field if merged.__typename is equal\n            // to the default string (usually \"Query\").\n            this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty.__typename;\n        }\n\n        Object.keys(fieldsToDirty).forEach(\n          fieldName => this.group.dirty(dataId as string, fieldName));\n      }\n    }\n  }\n\n  public modify(\n    dataId: string,\n    fields: Modifier<any> | Modifiers,\n  ): boolean {\n    const storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      const changedFields: Record<string, any> = Object.create(null);\n      let needToMerge = false;\n      let allDeleted = true;\n\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: <V = StoreValue>(\n          fieldNameOrOptions: string | ReadFieldOptions,\n          from?: StoreObject | Reference,\n        ) => this.policies.readField<V>(\n          typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId),\n          } : fieldNameOrOptions,\n          { store: this },\n        ),\n      };\n\n      Object.keys(storeObject).forEach(storeFieldName => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify: Modifier<StoreValue> = typeof fields === \"function\"\n          ? fields\n          : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          let newValue = modify === delModifier ? DELETE :\n            modify(maybeDeepFreeze(fieldValue), {\n              ...sharedDetails,\n              fieldName,\n              storeFieldName,\n              storage: this.getStorage(dataId, storeFieldName),\n            });\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  public delete(\n    dataId: string,\n    fieldName?: string,\n    args?: Record<string, any>,\n  ) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue<string>(storeObject, \"__typename\");\n      const storeFieldName = fieldName && args\n        ? this.policies.getStoreFieldName({ typename, fieldName, args })\n        : fieldName;\n      return this.modify(dataId, storeFieldName ? {\n        [storeFieldName]: delModifier,\n      } : delModifier);\n    }\n    return false;\n  }\n\n  public evict(\n    options: Cache.EvictOptions,\n    limit: EntityStore,\n  ): boolean {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public extract(): NormalizedCacheObject {\n    const obj = this.toObject();\n    const extraRootIds: string[] = [];\n    this.getRootIdSet().forEach(id => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = { extraRootIds: extraRootIds.sort() };\n    }\n    return obj;\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    Object.keys(this.data).forEach(dataId => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const { __META, ...rest } = newData;\n      Object.keys(rest).forEach(dataId => {\n        this.merge(dataId, rest[dataId] as StoreObject);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n\n  public abstract getStorage(\n    idOrObj: string | StoreObject,\n    ...storeFieldNames: (string | number)[]\n  ): StorageType;\n\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  private rootIds: {\n    [rootId: string]: number;\n  } = Object.create(null);\n\n  public retain(rootId: string): number {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  }\n\n  public release(rootId: string): number {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  public getRootIdSet(ids = new Set<string>()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  public gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach(id => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root: EntityStore = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach(id => root.delete(id));\n    }\n    return idsToRemove;\n  }\n\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  private refs: {\n    [dataId: string]: Record<string, true>;\n  } = Object.create(null);\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = this.refs[dataId] = Object.create(null);\n      const root = this.data[dataId];\n      if (!root) return found;\n\n      const workSet = new Set<Record<string | number, any>>([root]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      workSet.forEach(obj => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n          // In rare cases, a { __ref } Reference object may have other fields.\n          // This often indicates a mismerging of References with StoreObjects,\n          // but garbage collection should not be fooled by a stray __ref\n          // property in a StoreObject (ignoring all the other fields just\n          // because the StoreObject looks like a Reference). To avoid this\n          // premature termination of findChildRefIds recursion, we fall through\n          // to the code below, which will handle any other properties of obj.\n        }\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(key => {\n            const child = obj[key];\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            if (isNonNullObject(child)) {\n              workSet.add(child);\n            }\n          });\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n\n  // Used to compute cache keys specific to this.group.\n  public makeCacheKey(...args: any[]): object;\n  public makeCacheKey() {\n    return this.group.keyMaker.lookupArray(arguments);\n  }\n\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  public getFieldValue = <T = StoreValue>(\n    objectOrReference: StoreObject | Reference | undefined,\n    storeFieldName: string,\n  ) => maybeDeepFreeze(\n    isReference(objectOrReference)\n      ? this.get(objectOrReference.__ref, storeFieldName)\n      : objectOrReference && objectOrReference[storeFieldName]\n  ) as SafeReadonly<T>;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  public canRead: CanReadFunction = objOrRef => {\n    return isReference(objOrRef)\n      ? this.has(objOrRef.__ref)\n      : typeof objOrRef === \"object\";\n  };\n\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  public toReference: ToReferenceFunction = (\n    objOrIdOrRef,\n    mergeIntoStore,\n  ) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n\n    const [id] = this.policies.identify(objOrIdOrRef);\n\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n}\n\nexport type FieldValueGetter = EntityStore[\"getFieldValue\"];\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  private d: OptimisticDependencyFunction<string> | null = null;\n\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  public keyMaker: Trie<object>;\n\n  constructor(\n    public readonly caching: boolean,\n    private parent: CacheGroup | null = null,\n  ) {\n    this.resetCaching();\n  }\n\n  public resetCaching() {\n    this.d = this.caching ? dep<string>() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  }\n\n  public depend(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  }\n\n  public dirty(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d.dirty(\n        makeDepKey(dataId, storeFieldName),\n        // When storeFieldName === \"__exists\", that means the entity identified\n        // by dataId has either disappeared from the cache or was newly added,\n        // so the result caching system would do well to \"forget everything it\n        // knows\" about that object. To achieve that kind of invalidation, we\n        // not only dirty the associated result cache entry, but also remove it\n        // completely from the dependency graph. For the optimism implementation\n        // details, see https://github.com/benjamn/optimism/pull/195.\n        storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\",\n      );\n    }\n  }\n}\n\nfunction makeDepKey(dataId: string, storeFieldName: string) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + '#' + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(\n  store: NormalizedCache,\n  entityId: string,\n) {\n  if (supportsResultCaching(store)) {\n    // We use this pseudo-field __exists elsewhere in the EntityStore code to\n    // represent changes in the existence of the entity object identified by\n    // entityId. This dependency gets reliably dirtied whenever an object with\n    // this ID is deleted (or newly created) within this group, so any result\n    // cache entries (for example, StoreReader#executeSelectionSet results) that\n    // depend on __exists for this entityId will get dirtied as well, leading to\n    // the eventual recomputation (instead of reuse) of those result objects the\n    // next time someone reads them from the cache.\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\nexport namespace EntityStore {\n  // Refer to this class as EntityStore.Root outside this namespace.\n  export class Root extends EntityStore {\n    constructor({\n      policies,\n      resultCaching = true,\n      seed,\n    }: {\n      policies: Policies;\n      resultCaching?: boolean;\n      seed?: NormalizedCacheObject;\n    }) {\n      super(policies, new CacheGroup(resultCaching));\n      if (seed) this.replace(seed);\n    }\n\n    public readonly stump = new Stump(this);\n\n    public addLayer(\n      layerId: string,\n      replay: (layer: EntityStore) => any,\n    ): Layer {\n      // Adding an optimistic Layer on top of the Root actually adds the Layer\n      // on top of the Stump, so the Stump always comes between the Root and\n      // any Layer objects that we've added.\n      return this.stump.addLayer(layerId, replay);\n    }\n\n    public removeLayer(): Root {\n      // Never remove the root layer.\n      return this;\n    }\n\n    public readonly storageTrie = new Trie<StorageType>(canUseWeakMap);\n    public getStorage(): StorageType {\n      return this.storageTrie.lookupArray(arguments);\n    }\n  }\n}\n\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  constructor(\n    public readonly id: string,\n    public readonly parent: EntityStore,\n    public readonly replay: (layer: EntityStore) => any,\n    public readonly group: CacheGroup,\n  ) {\n    super(parent.policies, group);\n    replay(this);\n  }\n\n  public addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer {\n    return new Layer(layerId, this, replay, this.group);\n  }\n\n  public removeLayer(layerId: string): EntityStore {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        // Dirty every ID we're removing. Technically we might be able to avoid\n        // dirtying fields that have values in higher layers, but we don't have\n        // easy access to higher layers here, and we're about to recreate those\n        // layers anyway (see parent.addLayer below).\n        Object.keys(this.data).forEach(dataId => {\n          const ownStoreObject = this.data[dataId];\n          const parentStoreObject = parent[\"lookup\"](dataId);\n          if (!parentStoreObject) {\n            // The StoreObject identified by dataId was defined in this layer\n            // but will be undefined in the parent layer, so we can delete the\n            // whole entity using this.delete(dataId). Since we're about to\n            // throw this layer away, the only goal of this deletion is to dirty\n            // the removed fields.\n            this.delete(dataId);\n          } else if (!ownStoreObject) {\n            // This layer had an entry for dataId but it was undefined, which\n            // means the entity was deleted in this layer, and it's about to\n            // become undeleted when we remove this layer, so we need to dirty\n            // all fields that are about to be reexposed.\n            this.group.dirty(dataId, \"__exists\");\n            Object.keys(parentStoreObject).forEach(storeFieldName => {\n              this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            // If ownStoreObject is not exactly the same as parentStoreObject,\n            // dirty any fields whose values will change as a result of this\n            // removal.\n            Object.keys(ownStoreObject).forEach(storeFieldName => {\n              if (!equal(ownStoreObject[storeFieldName],\n                         parentStoreObject[storeFieldName])) {\n                this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? {\n      ...fromParent,\n      ...super.findChildRefIds(dataId),\n    } : fromParent;\n  }\n\n  public getStorage(): StorageType {\n    let p: EntityStore = this.parent;\n    while ((p as Layer).parent) p = (p as Layer).parent;\n    return p.getStorage.apply(p, arguments);\n  }\n}\n\n// Represents a Layer permanently installed just above the Root, which allows\n// reading optimistically (and registering optimistic dependencies) even when\n// no optimistic layers are currently active. The stump.group CacheGroup object\n// is shared by any/all Layer objects added on top of the Stump.\nclass Stump extends Layer {\n  constructor(root: EntityStore.Root) {\n    super(\n      \"EntityStore.Stump\",\n      root,\n      () => {},\n      new CacheGroup(root.group.caching, root.group),\n    );\n  }\n\n  public removeLayer() {\n    // Never remove the Stump layer.\n    return this;\n  }\n\n  public merge() {\n    // We never want to write any data into the Stump, so we forward any merge\n    // calls to the Root instead. Another option here would be to throw an\n    // exception, but the toReference(object, true) function can sometimes\n    // trigger Stump writes (which used to be Root writes, before the Stump\n    // concept was introduced).\n    return this.parent.merge.apply(this.parent, arguments);\n  }\n}\n\nfunction storeObjectReconciler(\n  existingObject: StoreObject,\n  incomingObject: StoreObject,\n  property: string,\n): StoreValue {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store: any): store is EntityStore {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store instanceof EntityStore && store.group.caching);\n}\n"]},"metadata":{},"sourceType":"module"}