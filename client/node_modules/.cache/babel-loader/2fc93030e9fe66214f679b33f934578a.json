{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { useRef } from \"react\";\nimport { equal } from \"@wry/equality\";\nimport { mergeDeepArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nexport function useFragment_experimental(options) {\n  var cache = useApolloClient().cache;\n  var fragment = options.fragment,\n    fragmentName = options.fragmentName,\n    from = options.from,\n    _a = options.optimistic,\n    optimistic = _a === void 0 ? true : _a,\n    rest = __rest(options, [\"fragment\", \"fragmentName\", \"from\", \"optimistic\"]);\n  var diffOptions = __assign(__assign({}, rest), {\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic: optimistic\n  });\n  var resultRef = useRef();\n  var latestDiff = cache.diff(diffOptions);\n  return useSyncExternalStore(function (forceUpdate) {\n    return cache.watch(__assign(__assign({}, diffOptions), {\n      immediate: true,\n      callback: function (diff) {\n        if (!equal(diff, latestDiff)) {\n          resultRef.current = diffToResult(latestDiff = diff);\n          forceUpdate();\n        }\n      }\n    }));\n  }, function () {\n    var latestDiffToResult = diffToResult(latestDiff);\n    return resultRef.current && equal(resultRef.current.data, latestDiffToResult.data) ? resultRef.current : resultRef.current = latestDiffToResult;\n  });\n}\nfunction diffToResult(diff) {\n  var result = {\n    data: diff.result,\n    complete: !!diff.complete\n  };\n  if (diff.missing) {\n    result.missing = mergeDeepArray(diff.missing.map(function (error) {\n      return error.missing;\n    }));\n  }\n  return result;\n}","map":{"version":3,"mappings":";AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,KAAK,QAAQ,eAAe;AAErC,SAASC,cAAc,QAAQ,0BAAkB;AAQjD,SAASC,eAAe,QAAQ,sBAAoB;AACpD,SAASC,oBAAoB,QAAQ,2BAAyB;AAsC9D,OAAM,SAAUC,wBAAwB,CACtCC,OAAyC;EAEjC,SAAK,GAAKH,eAAe,EAAE,MAAtB;EAGX,YAAQ,GAKNG,OAAO,SALD;IACRC,YAAY,GAIVD,OAAO,aAJG;IACZE,IAAI,GAGFF,OAAO,KAHL;IACJG,KAEEH,OAAO,WAFQ;IAAjBI,UAAU,mBAAG,IAAI;IACdC,IAAI,UACLL,OAAO,EANL,kDAML,CADQ;EAGT,IAAMM,WAAW,yBACZD,IAAI;IACPE,EAAE,EAAE,OAAOL,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGM,KAAK,CAACC,QAAQ,CAACP,IAAI,CAAC;IAC1DQ,KAAK,EAAEF,KAAK,CAAC,gBAAgB,CAAC,CAACG,QAAQ,EAAEV,YAAY,CAAC;IACtDG,UAAU;EAAA,EACX;EAED,IAAMQ,SAAS,GAAGlB,MAAM,EAA4B;EACpD,IAAImB,UAAU,GAAGL,KAAK,CAACM,IAAI,CAAQR,WAAW,CAAC;EAE/C,OAAOR,oBAAoB,CACzB,qBAAW;IACT,OAAOU,KAAK,CAACO,KAAK,uBACbT,WAAW;MACdU,SAAS,EAAE,IAAI;MACfC,QAAQ,YAACH,IAAI;QACX,IAAI,CAACnB,KAAK,CAACmB,IAAI,EAAED,UAAU,CAAC,EAAE;UAC5BD,SAAS,CAACM,OAAO,GAAGC,YAAY,CAACN,UAAU,GAAGC,IAAI,CAAC;UACnDM,WAAW,EAAE;;MAEjB;IAAC,GACD;EACJ,CAAC,EAED;IACE,IAAMC,kBAAkB,GAAGF,YAAY,CAACN,UAAU,CAAC;IACnD,OAAOD,SAAS,CAACM,OAAO,IACtBvB,KAAK,CAACiB,SAAS,CAACM,OAAO,CAACI,IAAI,EAAED,kBAAkB,CAACC,IAAI,CAAC,GACpDV,SAAS,CAACM,OAAO,GAChBN,SAAS,CAACM,OAAO,GAAGG,kBAAmB;EAC9C,CAAC,CACF;AACH;AAEA,SAASF,YAAY,CACnBL,IAA6B;EAE7B,IAAMS,MAAM,GAA6B;IACvCD,IAAI,EAAER,IAAI,CAACS,MAAM;IACjBC,QAAQ,EAAE,CAAC,CAACV,IAAI,CAACU;GAClB;EAED,IAAIV,IAAI,CAACW,OAAO,EAAE;IAChBF,MAAM,CAACE,OAAO,GAAG7B,cAAc,CAC7BkB,IAAI,CAACW,OAAO,CAACC,GAAG,CAAC,eAAK;MAAI,YAAK,CAACD,OAAO;IAAb,CAAa,CAAC,CACzC;;EAGH,OAAOF,MAAM;AACf","names":["useRef","equal","mergeDeepArray","useApolloClient","useSyncExternalStore","useFragment_experimental","options","fragmentName","from","_a","optimistic","rest","diffOptions","id","cache","identify","query","fragment","resultRef","latestDiff","diff","watch","immediate","callback","current","diffToResult","forceUpdate","latestDiffToResult","data","result","complete","missing","map"],"sourceRoot":"","sources":["../../../src/react/hooks/useFragment.ts"],"sourcesContent":["import { useRef } from \"react\";\nimport { equal } from \"@wry/equality\";\n\nimport { mergeDeepArray } from \"../../utilities\";\nimport {\n  Cache,\n  Reference,\n  StoreObject,\n  MissingTree,\n} from \"../../cache\";\n\nimport { useApolloClient } from \"./useApolloClient\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore\";\n\nexport interface UseFragmentOptions<TData, TVars>\nextends Omit<\n  Cache.DiffOptions<TData, TVars>,\n  | \"id\"\n  | \"query\"\n  | \"optimistic\"\n  | \"previousResult\"\n>, Omit<\n  Cache.ReadFragmentOptions<TData, TVars>,\n  | \"id\"\n> {\n  from: StoreObject | Reference | string;\n  // Override this field to make it optional (default: true).\n  optimistic?: boolean;\n}\n\n// Since the above definition of UseFragmentOptions can be hard to parse without\n// help from TypeScript/VSCode, here are the intended fields and their types.\n// Uncomment this code to check that it's consistent with the definition above.\n//\n// export interface UseFragmentOptions<TData, TVars> {\n//   from: string | StoreObject | Reference;\n//   fragment: DocumentNode | TypedDocumentNode<TData, TVars>;\n//   fragmentName?: string;\n//   optimistic?: boolean;\n//   variables?: TVars;\n//   returnPartialData?: boolean;\n//   canonizeResults?: boolean;\n// }\n\nexport interface UseFragmentResult<TData> {\n  data: TData | undefined;\n  complete: boolean;\n  missing?: MissingTree;\n}\n\nexport function useFragment_experimental<TData, TVars>(\n  options: UseFragmentOptions<TData, TVars>,\n): UseFragmentResult<TData> {\n  const { cache } = useApolloClient();\n\n  const {\n    fragment,\n    fragmentName,\n    from,\n    optimistic = true,\n    ...rest\n  } = options;\n\n  const diffOptions: Cache.DiffOptions<TData, TVars> = {\n    ...rest,\n    id: typeof from === \"string\" ? from : cache.identify(from),\n    query: cache[\"getFragmentDoc\"](fragment, fragmentName),\n    optimistic,\n  };\n\n  const resultRef = useRef<UseFragmentResult<TData>>();\n  let latestDiff = cache.diff<TData>(diffOptions);\n\n  return useSyncExternalStore(\n    forceUpdate => {\n      return cache.watch({\n        ...diffOptions,\n        immediate: true,\n        callback(diff) {\n          if (!equal(diff, latestDiff)) {\n            resultRef.current = diffToResult(latestDiff = diff);\n            forceUpdate();\n          }\n        },\n      });\n    },\n\n    () => {\n      const latestDiffToResult = diffToResult(latestDiff);\n      return resultRef.current &&\n        equal(resultRef.current.data, latestDiffToResult.data)\n        ? resultRef.current\n        : (resultRef.current = latestDiffToResult);\n    },\n  );\n}\n\nfunction diffToResult<TData>(\n  diff: Cache.DiffResult<TData>,\n): UseFragmentResult<TData> {\n  const result: UseFragmentResult<TData> = {\n    data: diff.result,\n    complete: !!diff.complete,\n  };\n\n  if (diff.missing) {\n    result.missing = mergeDeepArray(\n      diff.missing.map(error => error.missing),\n    );\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}