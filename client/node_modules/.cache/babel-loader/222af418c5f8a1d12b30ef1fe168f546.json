{"ast":null,"code":"import { InvariantError } from \"../../utilities/globals/index.js\";\nexport var serializeFetchParameter = function (p, label) {\n  var serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    var parseError = __DEV__ ? new InvariantError(\"Network request failed. \".concat(label, \" is not serializable: \").concat(e.message)) : new InvariantError(23);\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};","map":{"version":3,"mappings":"AAAA,SAASA,cAAc,QAAQ,kCAA0B;AAMzD,OAAO,IAAMC,uBAAuB,GAAG,UAACC,CAAM,EAAEC,KAAa;EAC3D,IAAIC,UAAU;EACd,IAAI;IACFA,UAAU,GAAGC,IAAI,CAACC,SAAS,CAACJ,CAAC,CAAC;GAC/B,CAAC,OAAOK,CAAC,EAAE;IACV,IAAMC,UAAU,GAAGC,OAAI,qBACrB,2BAA2B,OAAK,gCAA0B,CAAC,OAAO,CAAEF,CACjD,CAACG;IACtBF,UAAU,CAACA,UAAU,GAAGD,CAAC;IACzB,MAAMC,UAAU;;EAElB,OAAOJ,UAAU;AACnB,CAAC","names":["InvariantError","serializeFetchParameter","p","label","serialized","JSON","stringify","e","parseError","__DEV__","message"],"sourceRoot":"","sources":["../../../src/link/http/serializeFetchParameter.ts"],"sourcesContent":["import { InvariantError } from '../../utilities/globals';\n\nexport type ClientParseError = InvariantError & {\n  parseError: Error;\n};\n\nexport const serializeFetchParameter = (p: any, label: string) => {\n  let serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    const parseError = new InvariantError(\n      `Network request failed. ${label} is not serializable: ${e.message}`,\n    ) as ClientParseError;\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};\n"]},"metadata":{},"sourceType":"module"}