{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport \"./fixPolyfills.js\";\nimport { wrap } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { ApolloCache } from \"../core/cache.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { addTypenameToDocument, isReference } from \"../../utilities/index.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { makeVar, forgetCache, recallCache } from \"./reactiveVars.js\";\nimport { Policies } from \"./policies.js\";\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nvar InMemoryCache = function (_super) {\n  __extends(InMemoryCache, _super);\n  function InMemoryCache(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = _super.call(this) || this;\n    _this.watches = new Set();\n    _this.typenameDocumentCache = new Map();\n    _this.makeVar = makeVar;\n    _this.txCount = 0;\n    _this.config = normalizeConfig(config);\n    _this.addTypename = !!_this.config.addTypename;\n    _this.policies = new Policies({\n      cache: _this,\n      dataIdFromObject: _this.config.dataIdFromObject,\n      possibleTypes: _this.config.possibleTypes,\n      typePolicies: _this.config.typePolicies\n    });\n    _this.init();\n    return _this;\n  }\n  InMemoryCache.prototype.init = function () {\n    var rootStore = this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching\n    });\n    this.optimisticData = rootStore.stump;\n    this.resetResultCache();\n  };\n  InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {\n    var _this = this;\n    var previousReader = this.storeReader;\n    var fragments = this.config.fragments;\n    this.storeWriter = new StoreWriter(this, this.storeReader = new StoreReader({\n      cache: this,\n      addTypename: this.addTypename,\n      resultCacheMaxSize: this.config.resultCacheMaxSize,\n      canonizeResults: shouldCanonizeResults(this.config),\n      canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon,\n      fragments: fragments\n    }), fragments);\n    this.maybeBroadcastWatch = wrap(function (c, options) {\n      return _this.broadcastWatch(c, options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: function (c) {\n        var store = c.optimistic ? _this.optimisticData : _this.data;\n        if (supportsResultCaching(store)) {\n          var optimistic = c.optimistic,\n            id = c.id,\n            variables = c.variables;\n          return store.makeCacheKey(c.query, c.callback, canonicalStringify({\n            optimistic: optimistic,\n            id: id,\n            variables: variables\n          }));\n        }\n      }\n    });\n    new Set([this.data.group, this.optimisticData.group]).forEach(function (group) {\n      return group.resetCaching();\n    });\n  };\n  InMemoryCache.prototype.restore = function (data) {\n    this.init();\n    if (data) this.data.replace(data);\n    return this;\n  };\n  InMemoryCache.prototype.extract = function (optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return (optimistic ? this.optimisticData : this.data).extract();\n  };\n  InMemoryCache.prototype.read = function (options) {\n    var _a = options.returnPartialData,\n      returnPartialData = _a === void 0 ? false : _a;\n    try {\n      return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), {\n        store: options.optimistic ? this.optimisticData : this.data,\n        config: this.config,\n        returnPartialData: returnPartialData\n      })).result || null;\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        return null;\n      }\n      throw e;\n    }\n  };\n  InMemoryCache.prototype.write = function (options) {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n  InMemoryCache.prototype.modify = function (options) {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      return false;\n    }\n    var store = options.optimistic ? this.optimisticData : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n  InMemoryCache.prototype.diff = function (options) {\n    return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), {\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config\n    }));\n  };\n  InMemoryCache.prototype.watch = function (watch) {\n    var _this = this;\n    if (!this.watches.size) {\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return function () {\n      if (_this.watches.delete(watch) && !_this.watches.size) {\n        forgetCache(_this);\n      }\n      _this.maybeBroadcastWatch.forget(watch);\n    };\n  };\n  InMemoryCache.prototype.gc = function (options) {\n    canonicalStringify.reset();\n    var ids = this.optimisticData.gc();\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n    return ids;\n  };\n  InMemoryCache.prototype.retain = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  };\n  InMemoryCache.prototype.release = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  };\n  InMemoryCache.prototype.identify = function (object) {\n    if (isReference(object)) return object.__ref;\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      __DEV__ && invariant.warn(e);\n    }\n  };\n  InMemoryCache.prototype.evict = function (options) {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        return false;\n      }\n      options = __assign(__assign({}, options), {\n        id: \"ROOT_QUERY\"\n      });\n    }\n    try {\n      ++this.txCount;\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n  InMemoryCache.prototype.reset = function (options) {\n    var _this = this;\n    this.init();\n    canonicalStringify.reset();\n    if (options && options.discardWatches) {\n      this.watches.forEach(function (watch) {\n        return _this.maybeBroadcastWatch.forget(watch);\n      });\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      this.broadcastWatches();\n    }\n    return Promise.resolve();\n  };\n  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n    var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  };\n  InMemoryCache.prototype.batch = function (options) {\n    var _this = this;\n    var update = options.update,\n      _a = options.optimistic,\n      optimistic = _a === void 0 ? true : _a,\n      removeOptimistic = options.removeOptimistic,\n      onWatchUpdated = options.onWatchUpdated;\n    var updateResult;\n    var perform = function (layer) {\n      var _a = _this,\n        data = _a.data,\n        optimisticData = _a.optimisticData;\n      ++_this.txCount;\n      if (layer) {\n        _this.data = _this.optimisticData = layer;\n      }\n      try {\n        return updateResult = update(_this);\n      } finally {\n        --_this.txCount;\n        _this.data = data;\n        _this.optimisticData = optimisticData;\n      }\n    };\n    var alreadyDirty = new Set();\n    if (onWatchUpdated && !this.txCount) {\n      this.broadcastWatches(__assign(__assign({}, options), {\n        onWatchUpdated: function (watch) {\n          alreadyDirty.add(watch);\n          return false;\n        }\n      }));\n    }\n    if (typeof optimistic === 'string') {\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      perform(this.data);\n    } else {\n      perform();\n    }\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches(__assign(__assign({}, options), {\n        onWatchUpdated: function (watch, diff) {\n          var result = onWatchUpdated.call(this, watch, diff);\n          if (result !== false) {\n            alreadyDirty.delete(watch);\n          }\n          return result;\n        }\n      }));\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach(function (watch) {\n          return _this.maybeBroadcastWatch.dirty(watch);\n        });\n      }\n    } else {\n      this.broadcastWatches(options);\n    }\n    return updateResult;\n  };\n  InMemoryCache.prototype.performTransaction = function (update, optimisticId) {\n    return this.batch({\n      update: update,\n      optimistic: optimisticId || optimisticId !== null\n    });\n  };\n  InMemoryCache.prototype.transformDocument = function (document) {\n    if (this.addTypename) {\n      var result = this.typenameDocumentCache.get(document);\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        this.typenameDocumentCache.set(result, result);\n      }\n      return result;\n    }\n    return document;\n  };\n  InMemoryCache.prototype.transformForLink = function (document) {\n    var fragments = this.config.fragments;\n    return fragments ? fragments.transform(document) : document;\n  };\n  InMemoryCache.prototype.broadcastWatches = function (options) {\n    var _this = this;\n    if (!this.txCount) {\n      this.watches.forEach(function (c) {\n        return _this.maybeBroadcastWatch(c, options);\n      });\n    }\n  };\n  InMemoryCache.prototype.broadcastWatch = function (c, options) {\n    var lastDiff = c.lastDiff;\n    var diff = this.diff(c);\n    if (options) {\n      if (c.optimistic && typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n      if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n        return;\n      }\n    }\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback(c.lastDiff = diff, lastDiff);\n    }\n  };\n  return InMemoryCache;\n}(ApolloCache);\nexport { InMemoryCache };","map":{"version":3,"mappings":"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","names":["invariant","wrap","equal","ApolloCache","MissingFieldError","addTypenameToDocument","isReference","StoreReader","StoreWriter","EntityStore","supportsResultCaching","makeVar","forgetCache","recallCache","Policies","hasOwn","normalizeConfig","shouldCanonizeResults","canonicalStringify","__extends","config","_super","_this","Set","Map","addTypename","policies","cache","dataIdFromObject","possibleTypes","typePolicies","init","InMemoryCache","rootStore","data","Root","resultCaching","optimisticData","stump","resetResultCache","resetResultIdentities","previousReader","storeReader","storeWriter","resultCacheMaxSize","canonizeResults","canon","fragments","maybeBroadcastWatch","c","options","broadcastWatch","max","makeCacheKey","store","optimistic","id","variables","query","callback","group","forEach","resetCaching","replace","extract","returnPartialData","diffQueryAgainstStore","result","e","txCount","writeToStore","broadcast","broadcastWatches","call","modify","fields","rootId","watch","watches","size","add","immediate","delete","forget","reset","ids","gc","resetCanon","retain","release","object","__ref","identify","__DEV__","evict","discardWatches","clear","Promise","resolve","idToRemove","newOptimisticData","removeLayer","_a","removeOptimistic","onWatchUpdated","updateResult","perform","layer","update","alreadyDirty","addLayer","diff","dirty","optimisticId","batch","document","typenameDocumentCache","get","set","transform","fromOptimisticTransaction","lastDiff"],"sourceRoot":"","sources":["../../../src/cache/inmemory/inMemoryCache.ts"],"sourcesContent":["import { invariant } from '../../utilities/globals';\n\n// Make builtins like Map and Set safe to use with non-extensible objects.\nimport './fixPolyfills';\n\nimport { DocumentNode } from 'graphql';\nimport { OptimisticWrapperFunction, wrap } from 'optimism';\nimport { equal } from '@wry/equality';\n\nimport { ApolloCache } from '../core/cache';\nimport { Cache } from '../core/types/Cache';\nimport { MissingFieldError } from '../core/types/common';\nimport {\n  addTypenameToDocument,\n  StoreObject,\n  Reference,\n  isReference,\n} from '../../utilities';\nimport { InMemoryCacheConfig, NormalizedCacheObject } from './types';\nimport { StoreReader } from './readFromStore';\nimport { StoreWriter } from './writeToStore';\nimport { EntityStore, supportsResultCaching } from './entityStore';\nimport { makeVar, forgetCache, recallCache } from './reactiveVars';\nimport { Policies } from './policies';\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from './helpers';\nimport { canonicalStringify } from './object-canon';\n\ntype BroadcastOptions = Pick<\n  Cache.BatchOptions<InMemoryCache>,\n  | \"optimistic\"\n  | \"onWatchUpdated\"\n>\n\nexport class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\n  private data: EntityStore;\n  private optimisticData: EntityStore;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions>();\n  private addTypename: boolean;\n\n  private typenameDocumentCache = new Map<DocumentNode, DocumentNode>();\n  private storeReader: StoreReader;\n  private storeWriter: StoreWriter;\n\n  private maybeBroadcastWatch: OptimisticWrapperFunction<\n    [Cache.WatchOptions, BroadcastOptions?],\n    any,\n    [Cache.WatchOptions]>;\n\n  // Dynamically imported code can augment existing typePolicies or\n  // possibleTypes by calling cache.policies.addTypePolicies or\n  // cache.policies.addPossibletypes.\n  public readonly policies: Policies;\n\n  public readonly makeVar = makeVar;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = normalizeConfig(config);\n    this.addTypename = !!this.config.addTypename;\n\n    this.policies = new Policies({\n      cache: this,\n      dataIdFromObject: this.config.dataIdFromObject,\n      possibleTypes: this.config.possibleTypes,\n      typePolicies: this.config.typePolicies,\n    });\n\n    this.init();\n  }\n\n  private init() {\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    const rootStore = this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching,\n    });\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of EntityStore Layer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = rootStore.stump;\n\n    this.resetResultCache();\n  }\n\n  private resetResultCache(resetResultIdentities?: boolean) {\n    const previousReader = this.storeReader;\n    const { fragments } = this.config;\n\n    // The StoreWriter is mostly stateless and so doesn't really need to be\n    // reset, but it does need to have its writer.storeReader reference updated,\n    // so it's simpler to update this.storeWriter as well.\n    this.storeWriter = new StoreWriter(\n      this,\n      this.storeReader = new StoreReader({\n        cache: this,\n        addTypename: this.addTypename,\n        resultCacheMaxSize: this.config.resultCacheMaxSize,\n        canonizeResults: shouldCanonizeResults(this.config),\n        canon: resetResultIdentities\n          ? void 0\n          : previousReader && previousReader.canon,\n        fragments,\n      }),\n      fragments,\n    );\n\n    this.maybeBroadcastWatch = wrap((\n      c: Cache.WatchOptions,\n      options?: BroadcastOptions,\n    ) => {\n      return this.broadcastWatch(c, options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: (c: Cache.WatchOptions) => {\n        // Return a cache key (thus enabling result caching) only if we're\n        // currently using a data store that can track cache dependencies.\n        const store = c.optimistic ? this.optimisticData : this.data;\n        if (supportsResultCaching(store)) {\n          const { optimistic, id, variables } = c;\n          return store.makeCacheKey(\n            c.query,\n            // Different watches can have the same query, optimistic\n            // status, rootId, and variables, but if their callbacks are\n            // different, the (identical) result needs to be delivered to\n            // each distinct callback. The easiest way to achieve that\n            // separation is to include c.callback in the cache key for\n            // maybeBroadcastWatch calls. See issue #5733.\n            c.callback,\n            canonicalStringify({ optimistic, id, variables }),\n          );\n        }\n      }\n    });\n\n    // Since we have thrown away all the cached functions that depend on the\n    // CacheGroup dependencies maintained by EntityStore, we should also reset\n    // all CacheGroup dependency information.\n    new Set([\n      this.data.group,\n      this.optimisticData.group,\n    ]).forEach(group => group.resetCaching());\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    this.init();\n    // Since calling this.init() discards/replaces the entire StoreReader, along\n    // with the result caches it maintains, this.data.replace(data) won't have\n    // to bother deleting the old data.\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).extract();\n  }\n\n  public read<T>(options: Cache.ReadOptions): T | null {\n    const {\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = false,\n    } = options;\n    try {\n      return this.storeReader.diffQueryAgainstStore<T>({\n        ...options,\n        store: options.optimistic ? this.optimisticData : this.data,\n        config: this.config,\n        returnPartialData,\n      }).result || null;\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        // Swallow MissingFieldError and return null, so callers do not need to\n        // worry about catching \"normal\" exceptions resulting from incomplete\n        // cache data. Unexpected errors will be re-thrown. If you need more\n        // information about which fields were missing, use cache.diff instead,\n        // and examine diffResult.missing.\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  public write(options: Cache.WriteOptions): Reference | undefined {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    const store = options.optimistic // Defaults to false.\n      ? this.optimisticData\n      : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public diff<TData, TVariables = any>(\n    options: Cache.DiffOptions<TData, TVariables>,\n  ): Cache.DiffResult<TData> {\n    return this.storeReader.diffQueryAgainstStore({\n      ...options,\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config,\n    });\n  }\n\n  public watch<TData = any, TVariables = any>(\n    watch: Cache.WatchOptions<TData, TVariables>,\n  ): () => void {\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return () => {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (this.watches.delete(watch) && !this.watches.size) {\n        forgetCache(this);\n      }\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      this.maybeBroadcastWatch.forget(watch);\n    };\n  }\n\n  public gc(options?: {\n    // If true, also free non-essential result cache memory by bulk-releasing\n    // this.{store{Reader,Writer},maybeBroadcastWatch}. Defaults to false.\n    resetResultCache?: boolean;\n    // If resetResultCache is true, this.storeReader.canon will be preserved by\n    // default, but can also be discarded by passing resetResultIdentities:true.\n    // Defaults to false.\n    resetResultIdentities?: boolean;\n  }) {\n    canonicalStringify.reset();\n    const ids = this.optimisticData.gc();\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n    return ids;\n  }\n\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  public retain(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  }\n\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  public release(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  }\n\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  public identify(object: StoreObject | Reference): string | undefined {\n    if (isReference(object)) return object.__ref;\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      invariant.warn(e);\n    }\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = { ...options, id: \"ROOT_QUERY\" };\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      // Pass this.data as a limit on the depth of the eviction, so evictions\n      // during optimistic updates (when this.data is temporarily set equal to\n      // this.optimisticData) do not escape their optimistic Layer.\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public reset(options?: Cache.ResetOptions): Promise<void> {\n    this.init();\n\n    canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      // Similar to what happens in the unsubscribe function returned by\n      // cache.watch, applied to all current watches.\n      this.watches.forEach(watch => this.maybeBroadcastWatch.forget(watch));\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      // Calling this.init() above unblocks all maybeBroadcastWatch caching, so\n      // this.broadcastWatches() triggers a broadcast to every current watcher\n      // (letting them know their data is now missing). This default behavior is\n      // convenient because it means the watches do not have to be manually\n      // reestablished after resetting the cache. To prevent this broadcast and\n      // cancel all watches, pass true for options.discardWatches.\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  }\n\n  private txCount = 0;\n\n  public batch<TUpdateResult>(\n    options: Cache.BatchOptions<InMemoryCache, TUpdateResult>,\n  ): TUpdateResult {\n    const {\n      update,\n      optimistic = true,\n      removeOptimistic,\n      onWatchUpdated,\n    } = options;\n\n    let updateResult: TUpdateResult;\n    const perform = (layer?: EntityStore): TUpdateResult => {\n      const { data, optimisticData } = this;\n      ++this.txCount;\n      if (layer) {\n        this.data = this.optimisticData = layer;\n      }\n      try {\n        return updateResult = update(this);\n      } finally {\n        --this.txCount;\n        this.data = data;\n        this.optimisticData = optimisticData;\n      }\n    };\n\n    const alreadyDirty = new Set<Cache.WatchOptions>();\n\n    if (onWatchUpdated && !this.txCount) {\n      // If an options.onWatchUpdated callback is provided, we want to call it\n      // with only the Cache.WatchOptions objects affected by options.update,\n      // but there might be dirty watchers already waiting to be broadcast that\n      // have nothing to do with the update. To prevent including those watchers\n      // in the post-update broadcast, we perform this initial broadcast to\n      // collect the dirty watchers, so we can re-dirty them later, after the\n      // post-update broadcast, allowing them to receive their pending\n      // broadcasts the next time broadcastWatches is called, just as they would\n      // if we never called cache.batch.\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch) {\n          alreadyDirty.add(watch);\n          return false;\n        },\n      });\n    }\n\n    if (typeof optimistic === 'string') {\n      // Note that there can be multiple layers with the same optimistic ID.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the update. Note that\n      // this.data could be a Layer if we are currently executing an optimistic\n      // update function, but otherwise will always be an EntityStore.Root\n      // instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and run\n      // the update with broadcast batching.\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code\n    // takes the else branch and calls this.broadcastWatches(options), which\n    // does nothing when this.txCount > 0.\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches({\n        ...options,\n        onWatchUpdated(watch, diff) {\n          const result = onWatchUpdated.call(this, watch, diff);\n          if (result !== false) {\n            // Since onWatchUpdated did not return false, this diff is\n            // about to be broadcast to watch.callback, so we don't need\n            // to re-dirty it with the other alreadyDirty watches below.\n            alreadyDirty.delete(watch);\n          }\n          return result;\n        }\n      });\n      // Silently re-dirty any watches that were already dirty before the update\n      // was performed, and were not broadcast just now.\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach(watch => this.maybeBroadcastWatch.dirty(watch));\n      }\n    } else {\n      // If alreadyDirty is empty or we don't have an onWatchUpdated\n      // function, we don't need to go to the trouble of wrapping\n      // options.onWatchUpdated.\n      this.broadcastWatches(options);\n    }\n\n    return updateResult!;\n  }\n\n  public performTransaction(\n    update: (cache: InMemoryCache) => any,\n    optimisticId?: string | null,\n  ) {\n    return this.batch({\n      update,\n      optimistic: optimisticId || (optimisticId !== null),\n    });\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    if (this.addTypename) {\n      let result = this.typenameDocumentCache.get(document);\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        // If someone calls transformDocument and then mistakenly passes the\n        // result back into an API that also calls transformDocument, make sure\n        // we don't keep creating new query documents.\n        this.typenameDocumentCache.set(result, result);\n      }\n      return result;\n    }\n    return document;\n  }\n\n  public transformForLink(document: DocumentNode): DocumentNode {\n    const { fragments } = this.config;\n    return fragments\n      ? fragments.transform(document)\n      : document;\n  }\n\n  protected broadcastWatches(options?: BroadcastOptions) {\n    if (!this.txCount) {\n      this.watches.forEach(c => this.maybeBroadcastWatch(c, options));\n    }\n  }\n\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  private broadcastWatch(\n    c: Cache.WatchOptions,\n    options?: BroadcastOptions,\n  ) {\n    const { lastDiff } = c;\n\n    // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions\n    // currently requires no additional properties, so we can use c (a\n    // WatchOptions object) as DiffOptions, without having to allocate a new\n    // object, and without having to enumerate the relevant properties (query,\n    // variables, etc.) explicitly. There will be some additional properties\n    // (lastDiff, callback, etc.), but cache.diff ignores them.\n    const diff = this.diff<any>(c);\n\n    if (options) {\n      if (c.optimistic &&\n          typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (options.onWatchUpdated &&\n          options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n        // Returning false from the onWatchUpdated callback will prevent\n        // calling c.callback(diff) for this watcher.\n        return;\n      }\n    }\n\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback(c.lastDiff = diff, lastDiff);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}