{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { print } from 'graphql';\n;\nvar defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n  preserveHeaderCase: false\n};\nvar defaultHeaders = {\n  accept: '*/*',\n  'content-type': 'application/json'\n};\nvar defaultOptions = {\n  method: 'POST'\n};\nexport var fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions\n};\nexport var defaultPrinter = function (ast, printer) {\n  return printer(ast);\n};\nexport function selectHttpOptionsAndBody(operation, fallbackConfig) {\n  var configs = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal.apply(void 0, __spreadArray([operation, defaultPrinter], configs, false));\n}\nexport function selectHttpOptionsAndBodyInternal(operation, printer) {\n  var configs = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n  var options = {};\n  var http = {};\n  configs.forEach(function (config) {\n    options = __assign(__assign(__assign({}, options), config.options), {\n      headers: __assign(__assign({}, options.headers), config.headers)\n    });\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n    http = __assign(__assign({}, http), config.http);\n  });\n  options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n  var operationName = operation.operationName,\n    extensions = operation.extensions,\n    variables = operation.variables,\n    query = operation.query;\n  var body = {\n    operationName: operationName,\n    variables: variables\n  };\n  if (http.includeExtensions) body.extensions = extensions;\n  if (http.includeQuery) body.query = printer(query, print);\n  return {\n    options: options,\n    body: body\n  };\n}\n;\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n  if (!preserveHeaderCase) {\n    var normalizedHeaders_1 = Object.create(null);\n    Object.keys(Object(headers)).forEach(function (name) {\n      normalizedHeaders_1[name.toLowerCase()] = headers[name];\n    });\n    return normalizedHeaders_1;\n  }\n  var headerData = Object.create(null);\n  Object.keys(Object(headers)).forEach(function (name) {\n    headerData[name.toLowerCase()] = {\n      originalName: name,\n      value: headers[name]\n    };\n  });\n  var normalizedHeaders = Object.create(null);\n  Object.keys(headerData).forEach(function (name) {\n    normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n  });\n  return normalizedHeaders;\n}","map":{"version":3,"mappings":"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","names":["print","defaultHttpOptions","includeQuery","includeExtensions","preserveHeaderCase","defaultHeaders","accept","defaultOptions","method","fallbackHttpConfig","http","headers","options","defaultPrinter","ast","printer","selectHttpOptionsAndBody","operation","fallbackConfig","_i","configs","unshift","selectHttpOptionsAndBodyInternal","forEach","config","credentials","removeDuplicateHeaders","extensions","variables","query","body","operationName","normalizedHeaders_1","Object","create","keys","name","toLowerCase","headerData","originalName","value","normalizedHeaders"],"sourceRoot":"","sources":["../../../src/link/http/selectHttpOptionsAndBody.ts"],"sourcesContent":["import { ASTNode, print } from 'graphql';\n\nimport { Operation } from '../core';\n\nexport interface Printer {\n  (node: ASTNode, originalPrint: typeof print): string\n};\n\nexport interface UriFunction {\n  (operation: Operation): string;\n}\n\nexport interface Body {\n  query?: string;\n  operationName?: string;\n  variables?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface HttpOptions {\n  /**\n   * The URI to use when fetching operations.\n   *\n   * Defaults to '/graphql'.\n   */\n  uri?: string | UriFunction;\n\n  /**\n   * Passes the extensions field to your graphql server.\n   *\n   * Defaults to false.\n   */\n  includeExtensions?: boolean;\n\n  /**\n   * A `fetch`-compatible API to use when making requests.\n   */\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n\n  /**\n   * An object representing values to be sent as headers on the request.\n   */\n  headers?: any;\n\n  /**\n   * If set to true, header names won't be automatically normalized to \n   * lowercase. This allows for non-http-spec-compliant servers that might \n   * expect capitalized header names.\n   */\n  preserveHeaderCase?: boolean;\n\n  /**\n   * The credentials policy you want to use for the fetch call.\n   */\n  credentials?: string;\n\n  /**\n   * Any overrides of the fetch options argument to pass to the fetch call.\n   */\n  fetchOptions?: any;\n\n  /**\n   * If set to true, use the HTTP GET method for query operations. Mutations\n   * will still use the method specified in fetchOptions.method (which defaults\n   * to POST).\n   */\n  useGETForQueries?: boolean;\n\n  /**\n   * If set to true, the default behavior of stripping unused variables\n   * from the request will be disabled.\n   *\n   * Unused variables are likely to trigger server-side validation errors,\n   * per https://spec.graphql.org/draft/#sec-All-Variables-Used, but this\n   * includeUnusedVariables option can be useful if your server deviates\n   * from the GraphQL specification by not strictly enforcing that rule.\n   */\n  includeUnusedVariables?: boolean;\n  /**\n   * A function to substitute for the default query print function. Can be\n   * used to apply changes to the results of the print function.\n   */\n   print?: Printer;\n}\n\nexport interface HttpQueryOptions {\n  includeQuery?: boolean;\n  includeExtensions?: boolean;\n  preserveHeaderCase?: boolean;\n}\n\nexport interface HttpConfig {\n  http?: HttpQueryOptions;\n  options?: any;\n  headers?: any;\n  credentials?: any;\n}\n\nconst defaultHttpOptions: HttpQueryOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n  preserveHeaderCase: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: '*/*',\n  // The content-type header describes the type of the body of the request, and\n  // so it typically only is sent with requests that actually have bodies. One\n  // could imagine that Apollo Client would remove this header when constructing\n  // a GET request (which has no body), but we historically have not done that.\n  // This means that browsers will preflight all Apollo Client requests (even\n  // GET requests). Apollo Server's CSRF prevention feature (introduced in\n  // AS3.7) takes advantage of this fact and does not block requests with this\n  // header. If you want to drop this header from GET requests, then you should\n  // probably replace it with a `apollo-require-preflight` header, or servers\n  // with CSRF prevention enabled might block your GET request. See\n  // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n  // for more details.\n  'content-type': 'application/json',\n};\n\nconst defaultOptions = {\n  method: 'POST',\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const defaultPrinter: Printer = (ast, printer) => printer(ast);\n\nexport function selectHttpOptionsAndBody(\n  operation: Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) {\n  configs.unshift(fallbackConfig);\n  return selectHttpOptionsAndBodyInternal(\n    operation,\n    defaultPrinter,\n    ...configs,\n  );\n}\n\nexport function selectHttpOptionsAndBodyInternal(\n  operation: Operation,\n  printer: Printer,\n  ...configs: HttpConfig[]\n) {\n  let options = {} as HttpConfig & Record<string, any>;\n  let http = {} as HttpQueryOptions;\n\n  configs.forEach(config => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...config.headers,\n      }\n    };\n\n    if (config.credentials) {\n      options.credentials = config.credentials;\n    }\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: Body = { operationName, variables };\n\n  if (http.includeExtensions) (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = printer(query, print);\n\n  return {\n    options,\n    body,\n  };\n};\n\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of \n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(\n  headers: Record<string, string>,\n  preserveHeaderCase: boolean | undefined\n): typeof headers {\n\n  // If we're not preserving the case, just remove duplicates w/ normalization.\n  if (!preserveHeaderCase) {\n    const normalizedHeaders = Object.create(null);\n    Object.keys(Object(headers)).forEach(name => {\n      normalizedHeaders[name.toLowerCase()] = headers[name];\n    });\n    return normalizedHeaders; \n  }\n\n  // If we are preserving the case, remove duplicates w/ normalization,\n  // preserving the original name.\n  // This allows for non-http-spec-compliant servers that expect intentionally \n  // capitalized header names (See #6741).\n  const headerData = Object.create(null);\n  Object.keys(Object(headers)).forEach(name => {\n    headerData[name.toLowerCase()] = { originalName: name, value: headers[name] }\n  });\n\n  const normalizedHeaders = Object.create(null);\n  Object.keys(headerData).forEach(name => {\n    normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n  });\n  return normalizedHeaders;\n}\n"]},"metadata":{},"sourceType":"module"}