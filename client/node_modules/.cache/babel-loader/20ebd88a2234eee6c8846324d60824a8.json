{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { parse } from 'graphql';\nvar docCache = new Map();\nvar fragmentSourceMap = new Map();\nvar printFragmentWarnings = true;\nvar experimentalFragmentVariables = false;\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\nfunction processFragments(ast) {\n  var seenKeys = new Set();\n  var definitions = [];\n  ast.definitions.forEach(function (fragmentDefinition) {\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n      var sourceKeySet = fragmentSourceMap.get(fragmentName);\n      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\" + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\" + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n      } else if (!sourceKeySet) {\n        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set());\n      }\n      sourceKeySet.add(sourceKey);\n      if (!seenKeys.has(sourceKey)) {\n        seenKeys.add(sourceKey);\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  });\n  return __assign(__assign({}, ast), {\n    definitions: definitions\n  });\n}\nfunction stripLoc(doc) {\n  var workSet = new Set(doc.definitions);\n  workSet.forEach(function (node) {\n    if (node.loc) delete node.loc;\n    Object.keys(node).forEach(function (key) {\n      var value = node[key];\n      if (value && typeof value === 'object') {\n        workSet.add(value);\n      }\n    });\n  });\n  var loc = doc.loc;\n  if (loc) {\n    delete loc.startToken;\n    delete loc.endToken;\n  }\n  return doc;\n}\nfunction parseDocument(source) {\n  var cacheKey = normalize(source);\n  if (!docCache.has(cacheKey)) {\n    var parsed = parse(source, {\n      experimentalFragmentVariables: experimentalFragmentVariables,\n      allowLegacyFragmentVariables: experimentalFragmentVariables\n    });\n    if (!parsed || parsed.kind !== 'Document') {\n      throw new Error('Not a valid GraphQL document.');\n    }\n    docCache.set(cacheKey, stripLoc(processFragments(parsed)));\n  }\n  return docCache.get(cacheKey);\n}\nexport function gql(literals) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  if (typeof literals === 'string') {\n    literals = [literals];\n  }\n  var result = literals[0];\n  args.forEach(function (arg, i) {\n    if (arg && arg.kind === 'Document') {\n      result += arg.loc.source.body;\n    } else {\n      result += arg;\n    }\n    result += literals[i + 1];\n  });\n  return parseDocument(result);\n}\nexport function resetCaches() {\n  docCache.clear();\n  fragmentSourceMap.clear();\n}\nexport function disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\nexport function enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\nexport function disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\nvar extras = {\n  gql: gql,\n  resetCaches: resetCaches,\n  disableFragmentWarnings: disableFragmentWarnings,\n  enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables: disableExperimentalFragmentVariables\n};\n(function (gql_1) {\n  gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;\n})(gql || (gql = {}));\ngql[\"default\"] = gql;\nexport default gql;","map":{"version":3,"mappings":"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","names":["parse","docCache","Map","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","replace","trim","cacheKeyFromLoc","loc","source","body","substring","start","end","processFragments","ast","seenKeys","Set","definitions","forEach","fragmentDefinition","kind","fragmentName","name","value","sourceKey","sourceKeySet","get","has","console","warn","set","add","push","stripLoc","doc","workSet","node","Object","keys","key","startToken","endToken","parseDocument","cacheKey","parsed","allowLegacyFragmentVariables","Error","gql","literals","_i","args","result","arg","i","resetCaches","clear","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","extras","gql_1"],"sourceRoot":"","sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}