{"ast":null,"code":"import { Observable } from \"./Observable.js\";\nexport function asyncMap(observable, mapFn, catchFn) {\n  return new Observable(function (observer) {\n    var next = observer.next,\n      error = observer.error,\n      complete = observer.complete;\n    var activeCallbackCount = 0;\n    var completed = false;\n    var promiseQueue = {\n      then: function (callback) {\n        return new Promise(function (resolve) {\n          return resolve(callback());\n        });\n      }\n    };\n    function makeCallback(examiner, delegate) {\n      if (examiner) {\n        return function (arg) {\n          ++activeCallbackCount;\n          var both = function () {\n            return examiner(arg);\n          };\n          promiseQueue = promiseQueue.then(both, both).then(function (result) {\n            --activeCallbackCount;\n            next && next.call(observer, result);\n            if (completed) {\n              handler.complete();\n            }\n          }, function (error) {\n            --activeCallbackCount;\n            throw error;\n          }).catch(function (caught) {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return function (arg) {\n          return delegate && delegate.call(observer, arg);\n        };\n      }\n    }\n    var handler = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete: function () {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAkB,iBAAe;AAIpD,OAAM,SAAUC,QAAQ,CACtBC,UAAyB,EACzBC,KAAuC,EACvCC,OAA4C;EAE5C,OAAO,IAAIJ,UAAU,CAAI,kBAAQ;IACvB,QAAI,GAAsBK,QAAQ,KAA9B;MAAEC,KAAK,GAAeD,QAAQ,MAAvB;MAAEE,QAAQ,GAAKF,QAAQ,SAAb;IAC7B,IAAIG,mBAAmB,GAAG,CAAC;IAC3B,IAAIC,SAAS,GAAG,KAAK;IACrB,IAAIC,YAAY,GAAG;MAIjBC,IAAI,EAAJ,UAAKC,QAAmB;QACtB,OAAO,IAAIC,OAAO,CAAC,iBAAO;UAAI,cAAO,CAACD,QAAQ,EAAE,CAAC;QAAnB,CAAmB,CAAC;MACpD;KACgB;IAElB,SAASE,YAAY,CACnBC,QAAuC,EACvCC,QAAoC;MAEpC,IAAID,QAAQ,EAAE;QACZ,OAAO,aAAG;UACR,EAAEP,mBAAmB;UACrB,IAAMS,IAAI,GAAG;YAAM,eAAQ,CAACC,GAAG,CAAC;UAAb,CAAa;UAChCR,YAAY,GAAGA,YAAY,CAACC,IAAI,CAACM,IAAI,EAAEA,IAAI,CAAC,CAACN,IAAI,CAC/C,gBAAM;YACJ,EAAEH,mBAAmB;YACrBW,IAAI,IAAIA,IAAI,CAACC,IAAI,CAACf,QAAQ,EAAEgB,MAAM,CAAC;YACnC,IAAIZ,SAAS,EAAE;cACba,OAAO,CAACf,QAAS,EAAE;;UAEvB,CAAC,EACD,eAAK;YACH,EAAEC,mBAAmB;YACrB,MAAMF,KAAK;UACb,CAAC,CACF,CAACiB,KAAK,CAAC,gBAAM;YACZjB,KAAK,IAAIA,KAAK,CAACc,IAAI,CAACf,QAAQ,EAAEmB,MAAM,CAAC;UACvC,CAAC,CAAC;QACJ,CAAC;OACF,MAAM;QACL,OAAO,aAAG;UAAI,eAAQ,IAAIR,QAAQ,CAACI,IAAI,CAACf,QAAQ,EAAEa,GAAG,CAAC;QAAxC,CAAwC;;IAE1D;IAEA,IAAMI,OAAO,GAAgB;MAC3BH,IAAI,EAAEL,YAAY,CAACX,KAAK,EAAEgB,IAAI,CAAC;MAC/Bb,KAAK,EAAEQ,YAAY,CAACV,OAAO,EAAEE,KAAK,CAAC;MACnCC,QAAQ;QACNE,SAAS,GAAG,IAAI;QAChB,IAAI,CAACD,mBAAmB,EAAE;UACxBD,QAAQ,IAAIA,QAAQ,CAACa,IAAI,CAACf,QAAQ,CAAC;;MAEvC;KACD;IAED,IAAMoB,GAAG,GAAGvB,UAAU,CAACwB,SAAS,CAACJ,OAAO,CAAC;IACzC,OAAO;MAAM,UAAG,CAACK,WAAW,EAAE;IAAjB,CAAiB;EAChC,CAAC,CAAC;AACJ","names":["Observable","asyncMap","observable","mapFn","catchFn","observer","error","complete","activeCallbackCount","completed","promiseQueue","then","callback","Promise","makeCallback","examiner","delegate","both","arg","next","call","result","handler","catch","caught","sub","subscribe","unsubscribe"],"sourceRoot":"","sources":["../../../src/utilities/observables/asyncMap.ts"],"sourcesContent":["import { Observable, Observer } from \"./Observable\";\n\n// Like Observable.prototype.map, except that the mapping function can\n// optionally return a Promise (or be async).\nexport function asyncMap<V, R>(\n  observable: Observable<V>,\n  mapFn: (value: V) => R | PromiseLike<R>,\n  catchFn?: (error: any) => R | PromiseLike<R>,\n): Observable<R> {\n  return new Observable<R>(observer => {\n    const { next, error, complete } = observer;\n    let activeCallbackCount = 0;\n    let completed = false;\n    let promiseQueue = {\n      // Normally we would initialize promiseQueue to Promise.resolve(), but\n      // in this case, for backwards compatibility, we need to be careful to\n      // invoke the first callback synchronously.\n      then(callback: () => any) {\n        return new Promise(resolve => resolve(callback()));\n      },\n    } as Promise<void>;\n\n    function makeCallback(\n      examiner: typeof mapFn | typeof catchFn,\n      delegate: typeof next | typeof error,\n    ): (arg: any) => void {\n      if (examiner) {\n        return arg => {\n          ++activeCallbackCount;\n          const both = () => examiner(arg);\n          promiseQueue = promiseQueue.then(both, both).then(\n            result => {\n              --activeCallbackCount;\n              next && next.call(observer, result);\n              if (completed) {\n                handler.complete!();\n              }\n            },\n            error => {\n              --activeCallbackCount;\n              throw error;\n            },\n          ).catch(caught => {\n            error && error.call(observer, caught);\n          });\n        };\n      } else {\n        return arg => delegate && delegate.call(observer, arg);\n      }\n    }\n\n    const handler: Observer<V> = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete() {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      },\n    };\n\n    const sub = observable.subscribe(handler);\n    return () => sub.unsubscribe();\n  });\n}\n"]},"metadata":{},"sourceType":"module"}