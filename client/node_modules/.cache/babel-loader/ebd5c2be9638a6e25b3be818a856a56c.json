{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant } from \"../globals/index.js\";\nimport { visit } from 'graphql';\nimport { checkDocument, getOperationDefinition, getFragmentDefinition, getFragmentDefinitions, getMainDefinition } from \"./getFromAST.js\";\nimport { filterInPlace } from \"../common/filterInPlace.js\";\nimport { isField, isInlineFragment } from \"./storeUtils.js\";\nimport { createFragmentMap } from \"./fragments.js\";\nvar TYPENAME_FIELD = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename'\n  }\n};\nfunction isEmpty(op, fragmentMap) {\n  return !op || op.selectionSet.selections.every(function (selection) {\n    return selection.kind === 'FragmentSpread' && isEmpty(fragmentMap[selection.name.value], fragmentMap);\n  });\n}\nfunction nullIfDocIsEmpty(doc) {\n  return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;\n}\nfunction getDirectiveMatcher(directives) {\n  return function directiveMatcher(directive) {\n    return directives.some(function (dir) {\n      return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);\n    });\n  };\n}\nexport function removeDirectivesFromDocument(directives, doc) {\n  var variablesInUse = Object.create(null);\n  var variablesToRemove = [];\n  var fragmentSpreadsInUse = Object.create(null);\n  var fragmentSpreadsToRemove = [];\n  var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n    Variable: {\n      enter: function (node, _key, parent) {\n        if (parent.kind !== 'VariableDefinition') {\n          variablesInUse[node.name.value] = true;\n        }\n      }\n    },\n    Field: {\n      enter: function (node) {\n        if (directives && node.directives) {\n          var shouldRemoveField = directives.some(function (directive) {\n            return directive.remove;\n          });\n          if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {\n            if (node.arguments) {\n              node.arguments.forEach(function (arg) {\n                if (arg.value.kind === 'Variable') {\n                  variablesToRemove.push({\n                    name: arg.value.name.value\n                  });\n                }\n              });\n            }\n            if (node.selectionSet) {\n              getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                fragmentSpreadsToRemove.push({\n                  name: frag.name.value\n                });\n              });\n            }\n            return null;\n          }\n        }\n      }\n    },\n    FragmentSpread: {\n      enter: function (node) {\n        fragmentSpreadsInUse[node.name.value] = true;\n      }\n    },\n    Directive: {\n      enter: function (node) {\n        if (getDirectiveMatcher(directives)(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n  if (modifiedDoc && filterInPlace(variablesToRemove, function (v) {\n    return !!v.name && !variablesInUse[v.name];\n  }).length) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n  if (modifiedDoc && filterInPlace(fragmentSpreadsToRemove, function (fs) {\n    return !!fs.name && !fragmentSpreadsInUse[fs.name];\n  }).length) {\n    modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n  }\n  return modifiedDoc;\n}\nexport var addTypenameToDocument = Object.assign(function (doc) {\n  return visit(doc, {\n    SelectionSet: {\n      enter: function (node, _key, parent) {\n        if (parent && parent.kind === 'OperationDefinition') {\n          return;\n        }\n        var selections = node.selections;\n        if (!selections) {\n          return;\n        }\n        var skip = selections.some(function (selection) {\n          return isField(selection) && (selection.name.value === '__typename' || selection.name.value.lastIndexOf('__', 0) === 0);\n        });\n        if (skip) {\n          return;\n        }\n        var field = parent;\n        if (isField(field) && field.directives && field.directives.some(function (d) {\n          return d.name.value === 'export';\n        })) {\n          return;\n        }\n        return __assign(__assign({}, node), {\n          selections: __spreadArray(__spreadArray([], selections, true), [TYPENAME_FIELD], false)\n        });\n      }\n    }\n  });\n}, {\n  added: function (field) {\n    return field === TYPENAME_FIELD;\n  }\n});\nvar connectionRemoveConfig = {\n  test: function (directive) {\n    var willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (!directive.arguments || !directive.arguments.some(function (arg) {\n        return arg.name.value === 'key';\n      })) {\n        __DEV__ && invariant.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');\n      }\n    }\n    return willRemove;\n  }\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n  return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n  return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function (selection) {\n    return hasDirectivesInSelection(directives, selection, nestedCheck);\n  });\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n  if (!isField(selection)) {\n    return true;\n  }\n  if (!selection.directives) {\n    return false;\n  }\n  return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\nfunction getArgumentMatcher(config) {\n  return function argumentMatcher(argument) {\n    return config.some(function (aConfig) {\n      return argument.value && argument.value.kind === 'Variable' && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n    });\n  };\n}\nexport function removeArgumentsFromDocument(config, doc) {\n  var argMatcher = getArgumentMatcher(config);\n  return nullIfDocIsEmpty(visit(doc, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {\n            return !config.some(function (arg) {\n              return arg.name === varDef.variable.name.value;\n            });\n          }) : []\n        });\n      }\n    },\n    Field: {\n      enter: function (node) {\n        var shouldRemoveField = config.some(function (argConfig) {\n          return argConfig.remove;\n        });\n        if (shouldRemoveField) {\n          var argMatchCount_1 = 0;\n          if (node.arguments) {\n            node.arguments.forEach(function (arg) {\n              if (argMatcher(arg)) {\n                argMatchCount_1 += 1;\n              }\n            });\n          }\n          if (argMatchCount_1 === 1) {\n            return null;\n          }\n        }\n      }\n    },\n    Argument: {\n      enter: function (node) {\n        if (argMatcher(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n}\nexport function removeFragmentSpreadFromDocument(config, doc) {\n  function enter(node) {\n    if (config.some(function (def) {\n      return def.name === node.name.value;\n    })) {\n      return null;\n    }\n  }\n  return nullIfDocIsEmpty(visit(doc, {\n    FragmentSpread: {\n      enter: enter\n    },\n    FragmentDefinition: {\n      enter: enter\n    }\n  }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n  var allFragments = [];\n  selectionSet.selections.forEach(function (selection) {\n    if ((isField(selection) || isInlineFragment(selection)) && selection.selectionSet) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) {\n        return allFragments.push(frag);\n      });\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n  return allFragments;\n}\nexport function buildQueryFromSelectionSet(document) {\n  var definition = getMainDefinition(document);\n  var definitionOperation = definition.operation;\n  if (definitionOperation === 'query') {\n    return document;\n  }\n  var modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          operation: 'query'\n        });\n      }\n    }\n  });\n  return modifiedDoc;\n}\nexport function removeClientSetsFromDocument(document) {\n  checkDocument(document);\n  var modifiedDoc = removeDirectivesFromDocument([{\n    test: function (directive) {\n      return directive.name.value === 'client';\n    },\n    remove: true\n  }], document);\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter: function (node) {\n          if (node.selectionSet) {\n            var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n              return isField(selection) && selection.name.value === '__typename';\n            });\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        }\n      }\n    });\n  }\n  return modifiedDoc;\n}","map":{"version":3,"mappings":"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","names":["invariant","visit","checkDocument","getOperationDefinition","getFragmentDefinition","getFragmentDefinitions","getMainDefinition","filterInPlace","isField","isInlineFragment","createFragmentMap","TYPENAME_FIELD","kind","name","value","isEmpty","op","fragmentMap","selectionSet","selections","every","selection","nullIfDocIsEmpty","doc","getDirectiveMatcher","directives","directiveMatcher","directive","some","dir","test","removeDirectivesFromDocument","variablesInUse","Object","create","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","Variable","enter","node","_key","parent","Field","shouldRemoveField","remove","arguments","forEach","arg","push","getAllFragmentSpreadsFromSelectionSet","frag","FragmentSpread","Directive","v","length","removeArgumentsFromDocument","fs","removeFragmentSpreadFromDocument","addTypenameToDocument","assign","SelectionSet","skip","lastIndexOf","field","added","connectionRemoveConfig","willRemove","__DEV__","removeConnectionDirectiveFromDocument","hasDirectivesInSelectionSet","nestedCheck","hasDirectivesInSelection","getArgumentMatcher","config","argumentMatcher","argument","aConfig","argMatcher","OperationDefinition","variableDefinitions","filter","varDef","variable","argMatchCount_1","Argument","FragmentDefinition","allFragments","buildQueryFromSelectionSet","document","definition","definitionOperation","operation","removeClientSetsFromDocument","isTypenameOnly"],"sourceRoot":"","sources":["../../../src/utilities/graphql/transform.ts"],"sourcesContent":["import { invariant } from '../globals';\n\nimport {\n  DocumentNode,\n  SelectionNode,\n  SelectionSetNode,\n  OperationDefinitionNode,\n  FieldNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n  ArgumentNode,\n  FragmentSpreadNode,\n  VariableDefinitionNode,\n  VariableNode,\n  visit,\n  ASTNode,\n} from 'graphql';\n\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype Kind = any;\n\nimport {\n  checkDocument,\n  getOperationDefinition,\n  getFragmentDefinition,\n  getFragmentDefinitions,\n  getMainDefinition,\n} from './getFromAST';\nimport { filterInPlace } from '../common/filterInPlace';\nimport { isField, isInlineFragment } from './storeUtils';\nimport {\n  createFragmentMap,\n  FragmentMap,\n} from './fragments';\n\nexport type RemoveNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n  remove?: boolean;\n};\n\nexport type GetNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n};\n\nexport type RemoveDirectiveConfig = RemoveNodeConfig<DirectiveNode>;\nexport type GetDirectiveConfig = GetNodeConfig<DirectiveNode>;\nexport type RemoveArgumentsConfig = RemoveNodeConfig<ArgumentNode>;\nexport type GetFragmentSpreadConfig = GetNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentSpreadConfig = RemoveNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentDefinitionConfig = RemoveNodeConfig<\n  FragmentDefinitionNode\n>;\nexport type RemoveVariableDefinitionConfig = RemoveNodeConfig<\n  VariableDefinitionNode\n>;\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: 'Field' as Kind,\n  name: {\n    kind: 'Name' as Kind,\n    value: '__typename',\n  },\n};\n\nfunction isEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragmentMap: FragmentMap,\n): boolean {\n  return !op || op.selectionSet.selections.every(\n    selection => selection.kind === 'FragmentSpread' &&\n      isEmpty(fragmentMap[selection.name.value], fragmentMap)\n  );\n}\n\nfunction nullIfDocIsEmpty(doc: DocumentNode) {\n  return isEmpty(\n    getOperationDefinition(doc) || getFragmentDefinition(doc),\n    createFragmentMap(getFragmentDefinitions(doc)),\n  )\n    ? null\n    : doc;\n}\n\nfunction getDirectiveMatcher(\n  directives: (RemoveDirectiveConfig | GetDirectiveConfig)[],\n) {\n  return function directiveMatcher(directive: DirectiveNode) {\n    return directives.some(\n      dir =>\n        (dir.name && dir.name === directive.name.value) ||\n        (dir.test && dir.test(directive)),\n    );\n  };\n}\n\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const variablesInUse: Record<string, boolean> = Object.create(null);\n  let variablesToRemove: RemoveArgumentsConfig[] = [];\n\n  const fragmentSpreadsInUse: Record<string, boolean> = Object.create(null);\n  let fragmentSpreadsToRemove: RemoveFragmentSpreadConfig[] = [];\n\n  let modifiedDoc = nullIfDocIsEmpty(\n    visit(doc, {\n      Variable: {\n        enter(node, _key, parent) {\n          // Store each variable that's referenced as part of an argument\n          // (excluding operation definition variables), so we know which\n          // variables are being used. If we later want to remove a variable\n          // we'll first check to see if it's being used, before continuing with\n          // the removal.\n          if (\n            (parent as VariableDefinitionNode).kind !== 'VariableDefinition'\n          ) {\n            variablesInUse[node.name.value] = true;\n          }\n        },\n      },\n\n      Field: {\n        enter(node) {\n          if (directives && node.directives) {\n            // If `remove` is set to true for a directive, and a directive match\n            // is found for a field, remove the field as well.\n            const shouldRemoveField = directives.some(\n              directive => directive.remove,\n            );\n\n            if (\n              shouldRemoveField &&\n              node.directives &&\n              node.directives.some(getDirectiveMatcher(directives))\n            ) {\n              if (node.arguments) {\n                // Store field argument variables so they can be removed\n                // from the operation definition.\n                node.arguments.forEach(arg => {\n                  if (arg.value.kind === 'Variable') {\n                    variablesToRemove.push({\n                      name: (arg.value as VariableNode).name.value,\n                    });\n                  }\n                });\n              }\n\n              if (node.selectionSet) {\n                // Store fragment spread names so they can be removed from the\n                // document.\n                getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(\n                  frag => {\n                    fragmentSpreadsToRemove.push({\n                      name: frag.name.value,\n                    });\n                  },\n                );\n              }\n\n              // Remove the field.\n              return null;\n            }\n          }\n        },\n      },\n\n      FragmentSpread: {\n        enter(node) {\n          // Keep track of referenced fragment spreads. This is used to\n          // determine if top level fragment definitions should be removed.\n          fragmentSpreadsInUse[node.name.value] = true;\n        },\n      },\n\n      Directive: {\n        enter(node) {\n          // If a matching directive is found, remove it.\n          if (getDirectiveMatcher(directives)(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n\n  // If we've removed fields with arguments, make sure the associated\n  // variables are also removed from the rest of the document, as long as they\n  // aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(variablesToRemove, v => !!v.name && !variablesInUse[v.name]).length\n  ) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n\n  // If we've removed selection sets with fragment spreads, make sure the\n  // associated fragment definitions are also removed from the rest of the\n  // document, as long as they aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(fragmentSpreadsToRemove, fs => !!fs.name && !fragmentSpreadsInUse[fs.name])\n      .length\n  ) {\n    modifiedDoc = removeFragmentSpreadFromDocument(\n      fragmentSpreadsToRemove,\n      modifiedDoc,\n    );\n  }\n\n  return modifiedDoc;\n}\n\nexport const addTypenameToDocument = Object.assign(function <\n  TNode extends ASTNode\n>(\n  doc: TNode\n): TNode {\n  return visit(doc, {\n    SelectionSet: {\n      enter(node, _key, parent) {\n        // Don't add __typename to OperationDefinitions.\n        if (\n          parent &&\n          (parent as OperationDefinitionNode).kind === 'OperationDefinition'\n        ) {\n          return;\n        }\n\n        // No changes if no selections.\n        const { selections } = node;\n        if (!selections) {\n          return;\n        }\n\n        // If selections already have a __typename, or are part of an\n        // introspection query, do nothing.\n        const skip = selections.some(selection => {\n          return (\n            isField(selection) &&\n            (selection.name.value === '__typename' ||\n              selection.name.value.lastIndexOf('__', 0) === 0)\n          );\n        });\n        if (skip) {\n          return;\n        }\n\n        // If this SelectionSet is @export-ed as an input variable, it should\n        // not have a __typename field (see issue #4691).\n        const field = parent as FieldNode;\n        if (\n          isField(field) &&\n          field.directives &&\n          field.directives.some(d => d.name.value === 'export')\n        ) {\n          return;\n        }\n\n        // Create and return a new SelectionSet with a __typename Field.\n        return {\n          ...node,\n          selections: [...selections, TYPENAME_FIELD],\n        };\n      },\n    },\n  });\n}, {\n  added(field: FieldNode): boolean {\n    return field === TYPENAME_FIELD;\n  },\n});\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => {\n    const willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (\n        !directive.arguments ||\n        !directive.arguments.some(arg => arg.name.value === 'key')\n      ) {\n        invariant.warn(\n          'Removing an @connection directive even though it does not have a key. ' +\n            'You may want to use the key parameter to specify a store key.',\n        );\n      }\n    }\n\n    return willRemove;\n  },\n};\n\nexport function removeConnectionDirectiveFromDocument(doc: DocumentNode) {\n  return removeDirectivesFromDocument(\n    [connectionRemoveConfig],\n    checkDocument(doc),\n  );\n}\n\nfunction hasDirectivesInSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode | undefined,\n  nestedCheck = true,\n): boolean {\n  return (\n    !!selectionSet &&\n    selectionSet.selections &&\n    selectionSet.selections.some(selection =>\n      hasDirectivesInSelection(directives, selection, nestedCheck),\n    )\n  );\n}\n\nfunction hasDirectivesInSelection(\n  directives: GetDirectiveConfig[],\n  selection: SelectionNode,\n  nestedCheck = true,\n): boolean {\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return (\n    selection.directives.some(getDirectiveMatcher(directives)) ||\n    (nestedCheck &&\n      hasDirectivesInSelectionSet(\n        directives,\n        selection.selectionSet,\n        nestedCheck,\n      ))\n  );\n}\n\nfunction getArgumentMatcher(config: RemoveArgumentsConfig[]) {\n  return function argumentMatcher(argument: ArgumentNode) {\n    return config.some(\n      (aConfig: RemoveArgumentsConfig) =>\n        argument.value &&\n        argument.value.kind === 'Variable' &&\n        argument.value.name &&\n        (aConfig.name === argument.value.name.value ||\n          (aConfig.test && aConfig.test(argument))),\n    );\n  };\n}\n\nexport function removeArgumentsFromDocument(\n  config: RemoveArgumentsConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const argMatcher = getArgumentMatcher(config);\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      OperationDefinition: {\n        enter(node) {\n          return {\n            ...node,\n            // Remove matching top level variables definitions.\n            variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(\n              varDef =>\n                !config.some(arg => arg.name === varDef.variable.name.value),\n            ) : [],\n          };\n        },\n      },\n\n      Field: {\n        enter(node) {\n          // If `remove` is set to true for an argument, and an argument match\n          // is found for a field, remove the field as well.\n          const shouldRemoveField = config.some(argConfig => argConfig.remove);\n\n          if (shouldRemoveField) {\n            let argMatchCount = 0;\n            if (node.arguments) {\n              node.arguments.forEach(arg => {\n                if (argMatcher(arg)) {\n                  argMatchCount += 1;\n                }\n              });\n            }\n\n            if (argMatchCount === 1) {\n              return null;\n            }\n          }\n        },\n      },\n\n      Argument: {\n        enter(node) {\n          // Remove all matching arguments.\n          if (argMatcher(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n}\n\nexport function removeFragmentSpreadFromDocument(\n  config: RemoveFragmentSpreadConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  function enter(\n    node: FragmentSpreadNode | FragmentDefinitionNode,\n  ): null | void {\n    if (config.some(def => def.name === node.name.value)) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      FragmentSpread: { enter },\n      FragmentDefinition: { enter },\n    }),\n  );\n}\n\nfunction getAllFragmentSpreadsFromSelectionSet(\n  selectionSet: SelectionSetNode,\n): FragmentSpreadNode[] {\n  const allFragments: FragmentSpreadNode[] = [];\n\n  selectionSet.selections.forEach(selection => {\n    if (\n      (isField(selection) || isInlineFragment(selection)) &&\n      selection.selectionSet\n    ) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(\n        frag => allFragments.push(frag),\n      );\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n\n  return allFragments;\n}\n\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nexport function buildQueryFromSelectionSet(\n  document: DocumentNode,\n): DocumentNode {\n  const definition = getMainDefinition(document);\n  const definitionOperation = (<OperationDefinitionNode>definition).operation;\n\n  if (definitionOperation === 'query') {\n    // Already a query, so return the existing document.\n    return document;\n  }\n\n  // Build a new query using the selection set of the main operation.\n  const modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter(node) {\n        return {\n          ...node,\n          operation: 'query',\n        };\n      },\n    },\n  });\n  return modifiedDoc;\n}\n\n// Remove fields / selection sets that include an @client directive.\nexport function removeClientSetsFromDocument(\n  document: DocumentNode,\n): DocumentNode | null {\n  checkDocument(document);\n\n  let modifiedDoc = removeDirectivesFromDocument(\n    [\n      {\n        test: (directive: DirectiveNode) => directive.name.value === 'client',\n        remove: true,\n      },\n    ],\n    document,\n  );\n\n  // After a fragment definition has had its @client related document\n  // sets removed, if the only field it has left is a __typename field,\n  // remove the entire fragment operation to prevent it from being fired\n  // on the server.\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter(node) {\n          if (node.selectionSet) {\n            const isTypenameOnly = node.selectionSet.selections.every(\n              selection =>\n                isField(selection) && selection.name.value === '__typename',\n            );\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        },\n      },\n    });\n  }\n\n  return modifiedDoc;\n}\n"]},"metadata":{},"sourceType":"module"}