{"ast":null,"code":"import { InvariantError } from \"../globals/index.js\";\nimport { isNonNullObject } from \"../common/objects.js\";\nimport { getFragmentFromSelection } from \"./fragments.js\";\nexport function makeReference(id) {\n  return {\n    __ref: String(id)\n  };\n}\nexport function isReference(obj) {\n  return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\nexport function isDocumentNode(value) {\n  return isNonNullObject(value) && value.kind === \"Document\" && Array.isArray(value.definitions);\n}\nfunction isStringValue(value) {\n  return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n  return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n  return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n  return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n  return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n  return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n  return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n  return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n  return value.kind === 'NullValue';\n}\nexport function valueToObjectRepresentation(argObj, name, value, variables) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    var nestedArgObj_1 = {};\n    value.fields.map(function (obj) {\n      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n    });\n    argObj[name.value] = nestedArgObj_1;\n  } else if (isVariable(value)) {\n    var variableValue = (variables || {})[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(function (listValue) {\n      var nestedArgArrayObj = {};\n      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n      return nestedArgArrayObj[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw __DEV__ ? new InvariantError(\"The inline argument \\\"\".concat(name.value, \"\\\" of kind \\\"\").concat(value.kind, \"\\\"\") + 'is not supported. Use variables instead of inline arguments to ' + 'overcome this limitation.') : new InvariantError(54);\n  }\n}\nexport function storeKeyNameFromField(field, variables) {\n  var directivesObj = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(function (directive) {\n      directivesObj[directive.name.value] = {};\n      if (directive.arguments) {\n        directive.arguments.forEach(function (_a) {\n          var name = _a.name,\n            value = _a.value;\n          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n        });\n      }\n    });\n  }\n  var argObj = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n        value = _a.value;\n      return valueToObjectRepresentation(argObj, name, value, variables);\n    });\n  }\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = ['connection', 'include', 'skip', 'client', 'rest', 'export'];\nexport var getStoreKeyName = Object.assign(function (fieldName, args, directives) {\n  if (args && directives && directives['connection'] && directives['connection']['key']) {\n    if (directives['connection']['filter'] && directives['connection']['filter'].length > 0) {\n      var filterKeys = directives['connection']['filter'] ? directives['connection']['filter'] : [];\n      filterKeys.sort();\n      var filteredArgs_1 = {};\n      filterKeys.forEach(function (key) {\n        filteredArgs_1[key] = args[key];\n      });\n      return \"\".concat(directives['connection']['key'], \"(\").concat(stringify(filteredArgs_1), \")\");\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n  var completeFieldName = fieldName;\n  if (args) {\n    var stringifiedArgs = stringify(args);\n    completeFieldName += \"(\".concat(stringifiedArgs, \")\");\n  }\n  if (directives) {\n    Object.keys(directives).forEach(function (key) {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += \"@\".concat(key, \"(\").concat(stringify(directives[key]), \")\");\n      } else {\n        completeFieldName += \"@\".concat(key);\n      }\n    });\n  }\n  return completeFieldName;\n}, {\n  setStringify: function (s) {\n    var previous = stringify;\n    stringify = s;\n    return previous;\n  }\n});\nvar stringify = function defaultStringify(value) {\n  return JSON.stringify(value, stringifyReplacer);\n};\nfunction stringifyReplacer(_key, value) {\n  if (isNonNullObject(value) && !Array.isArray(value)) {\n    value = Object.keys(value).sort().reduce(function (copy, key) {\n      copy[key] = value[key];\n      return copy;\n    }, {});\n  }\n  return value;\n}\nexport function argumentsObjectFromField(field, variables) {\n  if (field.arguments && field.arguments.length) {\n    var argObj_1 = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n        value = _a.value;\n      return valueToObjectRepresentation(argObj_1, name, value, variables);\n    });\n    return argObj_1;\n  }\n  return null;\n}\nexport function resultKeyNameFromField(field) {\n  return field.alias ? field.alias.value : field.name.value;\n}\nexport function getTypenameFromResult(result, selectionSet, fragmentMap) {\n  if (typeof result.__typename === 'string') {\n    return result.__typename;\n  }\n  for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {\n    var selection = _a[_i];\n    if (isField(selection)) {\n      if (selection.name.value === '__typename') {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else {\n      var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);\n      if (typeof typename === 'string') {\n        return typename;\n      }\n    }\n  }\n}\nexport function isField(selection) {\n  return selection.kind === 'Field';\n}\nexport function isInlineFragment(selection) {\n  return selection.kind === 'InlineFragment';\n}","map":{"version":3,"mappings":"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","names":["InvariantError","isNonNullObject","getFragmentFromSelection","makeReference","id","__ref","String","isReference","obj","Boolean","isDocumentNode","value","kind","Array","isArray","definitions","isStringValue","isBooleanValue","isIntValue","isFloatValue","isVariable","isObjectValue","isListValue","isEnumValue","isNullValue","valueToObjectRepresentation","argObj","name","variables","Number","nestedArgObj_1","fields","map","variableValue","values","nestedArgArrayObj","listValue","__DEV__","storeKeyNameFromField","field","directivesObj","directives","forEach","directive","arguments","_a","length","getStoreKeyName","KNOWN_DIRECTIVES","Object","assign","fieldName","args","filterKeys","sort","filteredArgs_1","key","stringify","completeFieldName","stringifiedArgs","keys","indexOf","setStringify","s","previous","defaultStringify","JSON","stringifyReplacer","_key","reduce","copy","argumentsObjectFromField","argObj_1","resultKeyNameFromField","alias","getTypenameFromResult","result","selectionSet","fragmentMap","__typename","selections","_i","selection","isField","typename","isInlineFragment"],"sourceRoot":"","sources":["../../../src/utilities/graphql/storeUtils.ts"],"sourcesContent":["import { InvariantError } from '../globals';\n\nimport {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n  SelectionSetNode,\n  DocumentNode,\n} from 'graphql';\n\nimport { isNonNullObject } from '../common/objects';\nimport { FragmentMap, getFragmentFromSelection } from './fragments';\n\nexport interface Reference {\n  readonly __ref: string;\n}\n\nexport function makeReference(id: string): Reference {\n  return { __ref: String(id) };\n}\n\nexport function isReference(obj: any): obj is Reference {\n  return Boolean(obj && typeof obj === 'object' && typeof obj.__ref === 'string');\n}\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | Reference\n  | Reference[]\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport interface StoreObject {\n  __typename?: string;\n  [storeFieldName: string]: StoreValue;\n}\n\nexport function isDocumentNode(value: any): value is DocumentNode {\n  return (\n    isNonNullObject(value) &&\n    (value as DocumentNode).kind === \"Document\" &&\n    Array.isArray((value as DocumentNode).definitions)\n  );\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object,\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map(obj =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables),\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables,\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new InvariantError(\n      `The inline argument \"${name.value}\" of kind \"${(value as any).kind}\"` +\n        'is not supported. Use variables instead of inline arguments to ' +\n        'overcome this limitation.',\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object,\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables,\n          ),\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  'connection',\n  'include',\n  'skip',\n  'client',\n  'rest',\n  'export',\n];\n\nexport const getStoreKeyName = Object.assign(function (\n  fieldName: string,\n  args?: Record<string, any> | null,\n  directives?: Directives,\n): string {\n  if (\n    args &&\n    directives &&\n    directives['connection'] &&\n    directives['connection']['key']\n  ) {\n    if (\n      directives['connection']['filter'] &&\n      (directives['connection']['filter'] as string[]).length > 0\n    ) {\n      const filterKeys = directives['connection']['filter']\n        ? (directives['connection']['filter'] as string[])\n        : [];\n      filterKeys.sort();\n\n      const filteredArgs = {} as { [key: string]: any };\n      filterKeys.forEach(key => {\n        filteredArgs[key] = args[key];\n      });\n\n      return `${directives['connection']['key']}(${stringify(\n        filteredArgs,\n      )})`;\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  let completeFieldName: string = fieldName;\n\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    const stringifiedArgs: string = stringify(args);\n    completeFieldName += `(${stringifiedArgs})`;\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(key => {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += `@${key}(${stringify(directives[key])})`;\n      } else {\n        completeFieldName += `@${key}`;\n      }\n    });\n  }\n\n  return completeFieldName;\n}, {\n  setStringify(s: typeof stringify) {\n    const previous = stringify;\n    stringify = s;\n    return previous;\n  },\n});\n\n// Default stable JSON.stringify implementation. Can be updated/replaced with\n// something better by calling getStoreKeyName.setStringify.\nlet stringify = function defaultStringify(value: any): string {\n  return JSON.stringify(value, stringifyReplacer);\n};\n\nfunction stringifyReplacer(_key: string, value: any): any {\n  if (isNonNullObject(value) && !Array.isArray(value)) {\n    value = Object.keys(value).sort().reduce((copy, key) => {\n      copy[key] = value[key];\n      return copy;\n    }, {} as Record<string, any>);\n  }\n  return value;\n}\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables?: Record<string, any>,\n): Object | null {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n    return argObj;\n  }\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap,\n): string | undefined {\n  if (typeof result.__typename === 'string') {\n    return result.__typename;\n  }\n\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === '__typename') {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap,\n      );\n      if (typeof typename === 'string') {\n        return typename;\n      }\n    }\n  }\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode,\n): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n"]},"metadata":{},"sourceType":"module"}