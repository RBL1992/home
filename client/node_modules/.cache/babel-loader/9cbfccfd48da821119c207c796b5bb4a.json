{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, readJsonBody } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nimport { maybe } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () {\n  return fetch;\n});\nexport var createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n  var _a = linkOptions.uri,\n    uri = _a === void 0 ? '/graphql' : _a,\n    preferredFetch = linkOptions.fetch,\n    _b = linkOptions.print,\n    print = _b === void 0 ? defaultPrinter : _b,\n    includeExtensions = linkOptions.includeExtensions,\n    preserveHeaderCase = linkOptions.preserveHeaderCase,\n    useGETForQueries = linkOptions.useGETForQueries,\n    _c = linkOptions.includeUnusedVariables,\n    includeUnusedVariables = _c === void 0 ? false : _c,\n    requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n  if (__DEV__) {\n    checkFetcher(preferredFetch || backupFetch);\n  }\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions,\n      preserveHeaderCase: preserveHeaderCase\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n        name_1 = _a.name,\n        version = _a.version;\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n    var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig),\n      options = _b.options,\n      body = _b.body;\n    if (body.variables && !includeUnusedVariables) {\n      var unusedNames_1 = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable: function (node, _key, parent) {\n          if (parent && parent.kind !== 'VariableDefinition') {\n            unusedNames_1.delete(node.name.value);\n          }\n        }\n      });\n      if (unusedNames_1.size) {\n        body.variables = __assign({}, body.variables);\n        unusedNames_1.forEach(function (name) {\n          delete body.variables[name];\n        });\n      }\n    }\n    var controller;\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n        _controller = _c.controller,\n        signal = _c.signal;\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n    if (hasDirectives(['defer'], operation.query)) {\n      options.headers.accept = \"multipart/mixed; deferSpec=20220824, application/json\";\n    }\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n        newURI = _d.newURI,\n        parseError = _d.parseError;\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n    return new Observable(function (observer) {\n      var currentFetch = preferredFetch || maybe(function () {\n        return fetch;\n      }) || backupFetch;\n      currentFetch(chosenURI, options).then(function (response) {\n        var _a;\n        operation.setContext({\n          response: response\n        });\n        var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get('content-type');\n        if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n          return readMultipartBody(response, observer);\n        } else {\n          return readJsonBody(response, operation, observer);\n        }\n      }).catch(function (err) {\n        return handleError(err, observer);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"mappings":"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","names":["visit","ApolloLink","Observable","hasDirectives","serializeFetchParameter","selectURI","handleError","readMultipartBody","readJsonBody","checkFetcher","selectHttpOptionsAndBodyInternal","defaultPrinter","fallbackHttpConfig","createSignalIfSupported","rewriteURIForGET","fromError","maybe","backupFetch","createHttpLink","linkOptions","uri","preferredFetch","_b","print","includeExtensions","preserveHeaderCase","useGETForQueries","_c","includeUnusedVariables","requestOptions","__DEV__","linkConfig","http","options","fetchOptions","credentials","headers","chosenURI","operation","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","version","contextHeaders","contextConfig","body","variables","unusedNames_1","Set","Object","keys","query","Variable","node","_key","parent","kind","delete","name","value","size","forEach","controller","signal","_controller","definitionIsMutation","d","definitions","some","method","accept","newURI","parseError","currentFetch","then","setContext","response","ctype","get","test","observer","catch","err","abort"],"sourceRoot":"","sources":["../../../src/link/http/createHttpLink.ts"],"sourcesContent":["import '../../utilities/globals';\n\nimport { visit, DefinitionNode, VariableDefinitionNode } from 'graphql';\n\nimport { ApolloLink } from '../core';\nimport { Observable, hasDirectives } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport {\n  handleError,\n  readMultipartBody,\n  readJsonBody\n} from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBodyInternal,\n  defaultPrinter,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\nimport { maybe } from '../../utilities';\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    print = defaultPrinter,\n    includeExtensions,\n    preserveHeaderCase,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions, preserveHeaderCase },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    // does not match custom directives beginning with @defer\n    if (hasDirectives(['defer'], operation.query)) {\n      options.headers.accept = \"multipart/mixed; deferSpec=20220824, application/json\";\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      currentFetch!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          const ctype = response.headers?.get('content-type');\n\n          if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n            return readMultipartBody(response, observer);\n          } else {\n            return readJsonBody(response, operation, observer);\n          }\n        })\n        .catch(err => handleError(err, observer));\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}