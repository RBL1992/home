{"ast":null,"code":"var prefixCounts = new Map();\nexport function makeUniqueId(prefix) {\n  var count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return \"\".concat(prefix, \":\").concat(count, \":\").concat(Math.random().toString(36).slice(2));\n}","map":{"version":3,"mappings":"AAAA,IAAMA,YAAY,GAAG,IAAIC,GAAG,EAAkB;AAI9C,OAAM,SAAUC,YAAY,CAACC,MAAc;EACzC,IAAMC,KAAK,GAAGJ,YAAY,CAACK,GAAG,CAACF,MAAM,CAAC,IAAI,CAAC;EAC3CH,YAAY,CAACM,GAAG,CAACH,MAAM,EAAEC,KAAK,GAAG,CAAC,CAAC;EACnC,OAAO,UAAGD,MAAM,cAAIC,KAAK,cAAIG,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE;AACpE","names":["prefixCounts","Map","makeUniqueId","prefix","count","get","set","Math","random","toString","slice"],"sourceRoot":"","sources":["../../../src/utilities/common/makeUniqueId.ts"],"sourcesContent":["const prefixCounts = new Map<string, number>();\n\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nexport function makeUniqueId(prefix: string) {\n  const count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return `${prefix}:${count}:${Math.random().toString(36).slice(2)}`;\n}\n"]},"metadata":{},"sourceType":"module"}