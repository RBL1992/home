{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { isExecutionPatchIncrementalResult } from \"../utilities/common/incrementalResult.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, cloneDeep } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n      link = _a.link,\n      defaultOptions = _a.defaultOptions,\n      _b = _a.queryDeduplication,\n      queryDeduplication = _b === void 0 ? false : _b,\n      onBroadcast = _a.onBroadcast,\n      _c = _a.ssrMode,\n      ssrMode = _c === void 0 ? false : _c,\n      _d = _a.clientAwareness,\n      clientAwareness = _d === void 0 ? {} : _d,\n      localState = _a.localState,\n      assumeImmutableResults = _a.assumeImmutableResults;\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(13));\n  };\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n  QueryManager.prototype.mutate = function (_a) {\n    var _b, _c;\n    var mutation = _a.mutation,\n      variables = _a.variables,\n      optimisticResponse = _a.optimisticResponse,\n      updateQueries = _a.updateQueries,\n      _d = _a.refetchQueries,\n      refetchQueries = _d === void 0 ? [] : _d,\n      _e = _a.awaitRefetchQueries,\n      awaitRefetchQueries = _e === void 0 ? false : _e,\n      updateWithProxyFn = _a.update,\n      onQueryUpdated = _a.onQueryUpdated,\n      _f = _a.fetchPolicy,\n      fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f,\n      _g = _a.errorPolicy,\n      errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g,\n      keepRootFields = _a.keepRootFields,\n      context = _a.context;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, _h, document, hasClientExports, mutationStoreValue, self;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 14);\n            __DEV__ ? invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\") : invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', 15);\n            mutationId = this.generateMutationId();\n            _h = this.transform(mutation), document = _h.document, hasClientExports = _h.hasClientExports;\n            mutation = this.cache.transformForLink(document);\n            variables = this.getVariables(mutation, variables);\n            if (!hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n          case 1:\n            variables = _j.sent();\n            _j.label = 2;\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n            if (optimisticResponse) {\n              this.markMutationOptimistic(optimisticResponse, {\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n                context: context,\n                updateQueries: updateQueries,\n                update: updateWithProxyFn,\n                keepRootFields: keepRootFields\n              });\n            }\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                  throw new ApolloError({\n                    graphQLErrors: result.errors\n                  });\n                }\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n                var storeResult = __assign({}, result);\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n                if (errorPolicy === 'ignore' && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: optimisticResponse ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n                  resolve(storeResult);\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      });\n      var updateQueries_1 = mutation.updateQueries;\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n          var updater = updateQueries_1[queryName];\n          var _b = _this.queries.get(queryId),\n            document = _b.document,\n            variables = _b.variables;\n          var _c = cache.diff({\n              query: document,\n              variables: variables,\n              returnPartialData: true,\n              optimistic: false\n            }),\n            currentQueryResult = _c.result,\n            complete = _c.complete;\n          if (complete && currentQueryResult) {\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n    if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n          var update = mutation.update;\n          if (update) {\n            if (!skipCache) {\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                query: _this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n              if (diff.complete && !isExecutionPatchIncrementalResult(result)) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n              }\n            }\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables\n            });\n          }\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                  DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        optimistic: false,\n        removeOptimistic: mutation.removeOptimistic,\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n    return Promise.resolve(result);\n  };\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables) : optimisticResponse;\n    return this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        __DEV__ && invariant.error(error);\n      }\n    }, mutation.mutationId);\n  };\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n  };\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var noConnection = removeConnectionDirectiveFromDocument(transformed);\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = noConnection && this.localState.serverQuery(noConnection);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n        asQuery: __assign(__assign({}, transformed), {\n          definitions: transformed.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n            return def;\n          })\n        })\n      };\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n    return transformCache.get(document);\n  };\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n  QueryManager.prototype.watchQuery = function (options) {\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: observable.query,\n      observableQuery: observable,\n      variables: observable.variables\n    });\n    return observable;\n  };\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n    __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.') : invariant(options.query, 16);\n    __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.') : invariant(options.query.kind === 'Document', 17);\n    __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 18);\n    __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 19);\n    return this.fetchQuery(queryId, options).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(20));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n    return this.cache.reset(options);\n  };\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n    if (include === void 0) {\n      include = \"active\";\n    }\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n        document = _a.document;\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n        var queryName = oq.queryName,\n          fetchPolicy = oq.options.fetchPolicy;\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          __DEV__ && invariant.warn(\"Unknown query \".concat(typeof nameOrDoc === \"string\" ? \"named \" : \"\").concat(JSON.stringify(nameOrDoc, null, 2), \" requested in refetchQueries options.include array\"));\n        }\n      });\n    }\n    return queries;\n  };\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n    var query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      errorPolicy = _a.errorPolicy,\n      variables = _a.variables,\n      _b = _a.context,\n      context = _b === void 0 ? {} : _b;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables).map(function (result) {\n        if (fetchPolicy !== 'no-cache') {\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n          _this.broadcastQueries();\n        }\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n        return result;\n      });\n    };\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n    return makeObservable(variables);\n  };\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  };\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n    var _a;\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n    if (serverQuery) {\n      var _b = this,\n        inFlightLinkObservables_1 = _b.inFlightLinkObservables,\n        link = _b.link;\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = canonicalStringify(variables);\n        observable = byVariables_1.get(varJson_1);\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.beforeNext(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(serverQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n    var clientQuery = this.transform(query).clientQuery;\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n    return observable;\n  };\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    options = cloneDeep(options);\n    var linkDocument = this.cache.transformForLink(this.transform(queryInfo.document).document);\n    return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n      var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n      if ('incremental' in result && isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (incrementalResult) {\n          if (incrementalResult.errors) {\n            graphQLErrors.push.apply(graphQLErrors, incrementalResult.errors);\n          }\n        });\n      }\n      var hasErrors = isNonEmptyArray(graphQLErrors);\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: graphQLErrors\n          }));\n        }\n        queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: NetworkStatus.ready\n      };\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = graphQLErrors;\n        aqr.networkStatus = NetworkStatus.error;\n      }\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n      throw error;\n    });\n  };\n  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n    var _this = this;\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n    var query = this.transform(options.query).document;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var defaults = this.defaultOptions.watchQuery;\n    var _a = options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a,\n      _b = options.errorPolicy,\n      errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b,\n      _c = options.returnPartialData,\n      returnPartialData = _c === void 0 ? false : _c,\n      _d = options.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n      _e = options.context,\n      context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n      var concastSources = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n      if (normalized.fetchPolicy !== \"standby\" && concastSources.length > 0 && queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n      return concastSources;\n    };\n    var cleanupCancelFn = function () {\n      return _this.fetchCancelFns.delete(queryId);\n    };\n    this.fetchCancelFns.set(queryId, function (reason) {\n      cleanupCancelFn();\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n    return concast;\n  };\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n    var updateCache = _a.updateCache,\n      include = _a.include,\n      _b = _a.optimistic,\n      optimistic = _b === void 0 ? false : _b,\n      _c = _a.removeOptimistic,\n      removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n      onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n    var results = new Map();\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        optimistic: optimistic && removeOptimistic || false,\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n          if (oq) {\n            if (onQueryUpdated) {\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n              if (result === true) {\n                result = oq.refetch();\n              }\n              if (result !== false) {\n                results.set(oq, result);\n              }\n              return result;\n            }\n            if (onQueryUpdated !== null) {\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n          lastDiff = _a.lastDiff,\n          diff = _a.diff;\n        var result;\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset();\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n        if (result !== false) {\n          results.set(oq, result);\n        }\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n    if (removeOptimistic) {\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n    return results;\n  };\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n    var _this = this;\n    var query = _a.query,\n      variables = _a.variables,\n      fetchPolicy = _a.fetchPolicy,\n      refetchWritePolicy = _a.refetchWritePolicy,\n      errorPolicy = _a.errorPolicy,\n      returnPartialData = _a.returnPartialData,\n      context = _a.context,\n      notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: this.transform(query).document,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n    var readCache = function () {\n      return queryInfo.getDiff(variables);\n    };\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n      var data = diff.result;\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n      if (data && _this.transform(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n      return fromData(data);\n    };\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 : 2;\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n          if (diff.complete) {\n            return [resultsFromCache(diff, queryInfo.markReady())];\n          }\n          if (returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n          return [resultsFromLink()];\n        }\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n          return [resultsFromLink()];\n        }\n      case \"cache-only\":\n        return [resultsFromCache(readCache(), queryInfo.markReady())];\n      case \"network-only\":\n        if (shouldNotify) {\n          return [resultsFromCache(readCache()), resultsFromLink()];\n        }\n        return [resultsFromLink()];\n      case \"no-cache\":\n        if (shouldNotify) {\n          return [resultsFromCache(queryInfo.getDiff()), resultsFromLink()];\n        }\n        return [resultsFromLink()];\n      case \"standby\":\n        return [];\n    }\n  };\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId);\n  };\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n  return QueryManager;\n}();\nexport { QueryManager };","map":{"version":3,"mappings":"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","names":["invariant","InvariantError","equal","execute","isExecutionPatchIncrementalResult","canonicalStringify","getDefaultValues","getOperationDefinition","getOperationName","hasClientExports","graphQLResultHasError","removeConnectionDirectiveFromDocument","canUseWeakMap","Observable","asyncMap","isNonEmptyArray","Concast","makeUniqueId","isDocumentNode","isNonNullObject","cloneDeep","ApolloError","isApolloError","ObservableQuery","logMissingFieldErrors","NetworkStatus","isNetworkRequestInFlight","LocalState","QueryInfo","shouldWriteResult","Object","prototype","_a","cache","link","defaultOptions","_b","queryDeduplication","onBroadcast","_c","ssrMode","_d","clientAwareness","localState","assumeImmutableResults","Map","WeakMap","create","mutationStore","QueryManager","queries","forEach","_info","queryId","_this","stopQueryNoBroadcast","cancelPendingFetches","__DEV__","error","fetchCancelFns","clear","mutation","variables","optimisticResponse","updateQueries","refetchQueries","_e","awaitRefetchQueries","updateWithProxyFn","onQueryUpdated","_f","fetchPolicy","mutate","_g","errorPolicy","keepRootFields","context","mutationId","_h","loading","document","update","self","Promise","resolve","__assign","result","graphQLErrors","mutationStoreValue","storeResult","removeOptimistic","err","networkError","cacheWrites","skipCache","push","dataId","query","updateQueries_1","observableQuery","queryName","returnPartialData","optimistic","currentQueryResult","complete","nextQueryResult","updater","mutationResult","queryVariables","results_1","diff","id","data","modify","value","DELETE","include","options","getQueryStore","store","networkStatus","info","queryInfo","undefined","transformCache","transformed","noConnection","clientQuery","serverQuery","cacheEntry_1","hasForcedResolvers","defaultVars","definitions","def","kind","operation","add","doc","observable","queryManager","generateQueryId","generateMutationId","stopQueryInStoreNoBroadcast","discardWatches","queryNamesAndDocs","legacyQueryOptions","Set","Array","desc","oq","size","getQuery","includeStandby","observableQueryPromises","makeObservable","observablePromise_1","sub","removeQuery","delete","has","deduplication","inFlightLinkObservables_1","operationName","forceFetch","concast","byVariables_1","varJson_1","beforeNext","remoteResult","getObservableFromLink","incrementalResult","errors","hasErrors","requestId","markResult","aqr","getVariables","notifyOnNetworkStatusChange","normalized","fromVariables","concastSources","cleanupCancelFn","setTimeout","updateCache","includedQueriesById","lastDiff","results","watch","refetchWritePolicy","readCache","resultsFromCache","fromData","partial","onlyRunForcedResolvers","cacheWriteBehavior","resultsFromLink","shouldNotify","oldNetworkStatus"],"sourceRoot":"","sources":["../../src/core/QueryManager.ts"],"sourcesContent":["import { invariant, InvariantError } from '../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from '@wry/equality';\n\nimport { ApolloLink, execute, FetchResult } from '../link/core';\nimport { isExecutionPatchIncrementalResult } from '../utilities/common/incrementalResult';\nimport { Cache, ApolloCache, canonicalStringify } from '../cache';\n\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  removeConnectionDirectiveFromDocument,\n  canUseWeakMap,\n  ObservableSubscription,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  ConcastSourcesArray,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n  cloneDeep,\n} from '../utilities';\nimport { ApolloError, isApolloError } from '../errors';\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from './watchQueryOptions';\nimport { ObservableQuery, logMissingFieldErrors } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n} from './types';\nimport { LocalState } from './LocalState';\n\nimport {\n  QueryInfo,\n  QueryStoreValue,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from './QueryInfo';\n\nconst { hasOwnProperty } = Object.prototype;\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  document: DocumentNode;\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\ntype DefaultOptions = import(\"./ApolloClient\").DefaultOptions;\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public defaultOptions: DefaultOptions;\n\n  public readonly assumeImmutableResults: boolean;\n  public readonly ssrMode: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  private fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor({\n    cache,\n    link,\n    defaultOptions,\n    queryDeduplication = false,\n    onBroadcast,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults,\n  }: {\n    cache: ApolloCache<TStore>;\n    link: ApolloLink;\n    defaultOptions?: DefaultOptions;\n    queryDeduplication?: boolean;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    this.cache = cache;\n    this.link = link;\n    this.defaultOptions = defaultOptions || Object.create(null);\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n    if ((this.onBroadcast = onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      new InvariantError('QueryManager stopped while query was in flight'),\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach(cancel => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    fetchPolicy = this.defaultOptions.mutate?.fetchPolicy || \"network-only\",\n    errorPolicy = this.defaultOptions.mutate?.errorPolicy || \"none\",\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<FetchResult<TData>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache',\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n\n    const {\n      document,\n      hasClientExports,\n    } = this.transform(mutation);\n    mutation = this.cache.transformForLink(document);\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n    if (hasClientExports) {\n      variables = await this.localState.addExportedVariables(mutation, variables, context) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    if (optimisticResponse) {\n      this.markMutationOptimistic<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      >(optimisticResponse, {\n        mutationId,\n        document: mutation,\n        variables,\n        fetchPolicy,\n        errorPolicy,\n        context,\n        updateQueries,\n        update: updateWithProxyFn,\n        keepRootFields,\n      });\n    }\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse,\n          },\n          variables,\n          false,\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            throw new ApolloError({\n              graphQLErrors: result.errors,\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === 'ignore' &&\n              graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<\n            TData,\n            TVariables,\n            TContext,\n            TCache\n          >({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: optimisticResponse ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        },\n\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // At the moment, a mutation can have only one result, so we can\n          // immediately resolve upon receiving the first result. In the future,\n          // mutations containing @defer or @stream directives might receive\n          // multiple FetchResult payloads from the ApolloLink chain, so we will\n          // probably need to collect those results in this next method and call\n          // resolve only later, in an observer.complete function.\n          resolve(storeResult);\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (optimisticResponse) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError ? err : new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache,\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables,\n      });\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      mutation.refetchQueries ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache: TCache) => {\n          if (!skipCache) {\n            cacheWrites.forEach(write => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete && !(isExecutionPatchIncrementalResult(result))) {\n                result = { ...result, data: diff.result };\n              }\n            }\n\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables,\n            });\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n\n      }).forEach(result => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<TData, TVariables, TContext, TCache extends ApolloCache<any>>(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>,\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean,\n    },\n  ) {\n    const data = typeof optimisticResponse === \"function\"\n      ? optimisticResponse(mutation.variables)\n      : optimisticResponse;\n\n    return this.cache.recordOptimisticTransaction(cache => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>({\n          ...mutation,\n          result: { data },\n        }, cache);\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n  }\n\n  public fetchQuery<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchQueryObservable<TData, TVars>(\n      queryId,\n      options,\n      networkStatus,\n    ).promise;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  private transformCache = new (\n    canUseWeakMap ? WeakMap : Map\n  )<DocumentNode, TransformCacheEntry>();\n\n  public transform(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const transformed = this.cache.transformDocument(document);\n      const noConnection = removeConnectionDirectiveFromDocument(transformed);\n      const clientQuery = this.localState.clientQuery(transformed);\n      const serverQuery = noConnection && this.localState.serverQuery(noConnection);\n\n      const cacheEntry: TransformCacheEntry = {\n        document: transformed,\n        // TODO These two calls (hasClientExports and shouldForceResolvers)\n        // could probably be merged into a single traversal.\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery,\n        serverQuery,\n        defaultVars: getDefaultValues(\n          getOperationDefinition(transformed)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...transformed,\n          definitions: transformed.definitions.map(def => {\n            if (def.kind === \"OperationDefinition\" &&\n                def.operation !== \"query\") {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        }\n      };\n\n      const add = (doc: DocumentNode | null) => {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry);\n        }\n      }\n      // Add cacheEntry to the transformCache using several different keys,\n      // since any one of these documents could end up getting passed to the\n      // transform method again in the future.\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables,\n  ): OperationVariables {\n    return {\n      ...this.transform(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<T, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    // assign variable default values if supplied\n    options = {\n      ...options,\n      variables: this.getVariables(\n        options.query,\n        options.variables,\n      ) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    queryInfo.init({\n      document: observable.query,\n      observableQuery: observable,\n      variables: observable.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId(),\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    return this.fetchQuery<TData, TVars>(\n      queryId,\n      options,\n    ).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(options: Cache.ResetOptions = {\n    discardWatches: true,\n  }): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(new InvariantError(\n      'Store reset while query was in flight (not completed in link chain)',\n    ));\n\n    this.queries.forEach(queryInfo => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\",\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach(desc => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(`Unknown query ${\n            typeof nameOrDoc === \"string\" ? \"named \" : \"\"\n          }${\n            JSON.stringify(nameOrDoc, null, 2)\n          } requested in refetchQueries options.include array`);\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(\n      includeStandby ? \"all\" : \"active\"\n    ).forEach((observableQuery, queryId) => {\n      const { fetchPolicy } = observableQuery.options;\n      observableQuery.resetLastResults();\n      if (includeStandby ||\n          (fetchPolicy !== \"standby\" &&\n           fetchPolicy !== \"cache-only\")) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      this.getQuery(queryId).setDiff(null);\n    });\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy,\n    variables,\n    context = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(\n        query,\n        context,\n        variables,\n      ).map(result => {\n        if (fetchPolicy !== 'no-cache') {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            this.cache.write({\n              query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables,\n            });\n          }\n\n          this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors,\n          });\n        }\n\n        return result;\n      });\n\n    if (this.transform(query).hasClientExports) {\n      const observablePromise = this.localState.addExportedVariables(\n        query,\n        variables,\n        context,\n      ).then(makeObservable);\n\n      return new Observable<FetchResult<T>>(observer => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          observable => sub = observable.subscribe(observer),\n          observer.error,\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(info => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private inFlightLinkObservables = new Map<\n    DocumentNode,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    deduplication: boolean =\n      // Prefer context.queryDeduplication if specified.\n      context?.queryDeduplication ??\n      this.queryDeduplication,\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery } = this.transform(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const byVariables = inFlightLinkObservables.get(serverQuery) || new Map();\n        inFlightLinkObservables.set(serverQuery, byVariables);\n\n        const varJson = canonicalStringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>\n          ]);\n\n          byVariables.set(varJson, observable = concast);\n\n          concast.beforeNext(() => {\n            if (byVariables.delete(varJson) &&\n                byVariables.size < 1) {\n              inFlightLinkObservables.delete(serverQuery);\n            }\n          });\n        }\n\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>\n        ]);\n      }\n    } else {\n      observable = new Concast([\n        Observable.of({ data: {} } as FetchResult<T>)\n      ]);\n      context = this.prepareContext(context);\n    }\n\n    const { clientQuery } = this.transform(query);\n    if (clientQuery) {\n      observable = asyncMap(observable, result => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<WatchQueryOptions<TVars, TData>,\n      | \"variables\"\n      | \"context\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = queryInfo.lastRequestId = this.generateRequestId();\n\n    // Make sure we write the result below using the same options we were given,\n    // even though the input object may have been modified in the meantime.\n    options = cloneDeep(options);\n\n    // Performing transformForLink here gives this.cache a chance to fill in\n    // missing fragment definitions (for example) before sending this document\n    // through the link chain.\n    const linkDocument = this.cache.transformForLink(\n      // Use same document originally produced by this.cache.transformDocument.\n      this.transform(queryInfo.document!).document\n    );\n\n    return asyncMap(\n      this.getObservableFromLink(\n        linkDocument,\n        options.context,\n        options.variables,\n      ),\n\n      result => {\n        const graphQLErrors = isNonEmptyArray(result.errors)\n          ? result.errors.slice(0)\n          : [];\n\n        if ('incremental' in result && isNonEmptyArray(result.incremental)) {\n          result.incremental.forEach(incrementalResult => {\n            if (incrementalResult.errors) {\n              graphQLErrors.push(...incrementalResult.errors);\n            }\n          });\n        }\n\n        const hasErrors = isNonEmptyArray(graphQLErrors);\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(new ApolloError({\n              graphQLErrors,\n            }));\n          }\n          // Use linkDocument rather than queryInfo.document so the\n          // operation/fragments used to write the result are the same as the\n          // ones used to obtain it from the link.\n          queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = graphQLErrors;\n          aqr.networkStatus = NetworkStatus.error;\n        }\n\n        return aqr;\n      },\n\n      networkError => {\n        const error = isApolloError(networkError)\n          ? networkError\n          : new ApolloError({ networkError });\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      },\n    );\n  }\n\n  public fetchQueryObservable<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n  ): Concast<ApolloQueryResult<TData>> {\n    const query = this.transform(options.query).document;\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    const defaults = this.defaultOptions.watchQuery;\n    let {\n      fetchPolicy = defaults && defaults.fetchPolicy || \"cache-first\",\n      errorPolicy = defaults && defaults.errorPolicy || \"none\",\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n\n      const concastSources = this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus,\n      );\n\n      if (\n        // If we're in standby, postpone advancing options.fetchPolicy using\n        // applyNextFetchPolicy.\n        normalized.fetchPolicy !== \"standby\" &&\n        // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n        // this is another way to detect when nothing was done/fetched.\n        concastSources.length > 0 &&\n        queryInfo.observableQuery\n      ) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n\n      return concastSources;\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    const cleanupCancelFn = () => this.fetchCancelFns.delete(queryId);\n    this.fetchCancelFns.set(queryId, reason => {\n      cleanupCancelFn();\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    // A Concast<T> can be created either from an Iterable<Observable<T>>\n    // or from a PromiseLike<Iterable<Observable<T>>>, where T in this\n    // case is ApolloQueryResult<TData>.\n    const concast = new Concast(\n      // If the query has @export(as: ...) directives, then we need to\n      // process those directives asynchronously. When there are no\n      // @export directives (the common case), we deliberately avoid\n      // wrapping the result of this.fetchQueryByPolicy in a Promise,\n      // since the timing of result delivery is (unfortunately) important\n      // for backwards compatibility. TODO This code could be simpler if\n      // we deprecated and removed LocalState.\n      this.transform(normalized.query).hasClientExports\n        ? this.localState.addExportedVariables(\n          normalized.query,\n          normalized.variables,\n          normalized.context,\n        ).then(fromVariables)\n        : fromVariables(normalized.variables!)\n    );\n\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n\n    return concast;\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<ApolloCache<TStore>, TResult>\n  ): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<string, {\n      oq: ObservableQuery<any>;\n      lastDiff?: Cache.DiffResult<any>;\n      diff?: Cache.DiffResult<any>;\n    }>();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map;\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: optimistic && removeOptimistic || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo &&\n            watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result: TResult | boolean | Promise<ApolloQueryResult<any>> | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars>(\n    queryInfo: QueryInfo,\n    { query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus,\n  ): ConcastSourcesArray<ApolloQueryResult<TData>> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: this.transform(query).document,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff(variables);\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading,\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ &&\n          !returnPartialData &&\n          !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) => Observable.of({\n        data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus,\n        ...(diff.complete ? null : { partial: true }),\n      } as ApolloQueryResult<TData>);\n\n      if (data && this.transform(query).hasForcedResolvers) {\n        return this.localState.runResolvers({\n          document: query,\n          remoteResult: { data },\n          context,\n          variables,\n          onlyRunForcedResolvers: true,\n        }).then(resolved => fromData(resolved.data || void 0));\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\" ? CacheWriteBehavior.FORBID :\n      ( // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n        networkStatus === NetworkStatus.refetch &&\n        refetchWritePolicy !== \"merge\"\n      ) ? CacheWriteBehavior.OVERWRITE\n        : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () => this.getResultsFromLink<TData, TVars>(\n      queryInfo,\n      cacheWriteBehavior,\n      {\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      },\n    );\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n    default: case \"cache-first\": {\n      const diff = readCache();\n\n      if (diff.complete) {\n        return [\n          resultsFromCache(diff, queryInfo.markReady()),\n        ];\n      }\n\n      if (returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-and-network\": {\n      const diff = readCache();\n\n      if (diff.complete || returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-only\":\n      return [\n        resultsFromCache(readCache(), queryInfo.markReady()),\n      ];\n\n    case \"network-only\":\n      if (shouldNotify) {\n        return [\n          resultsFromCache(readCache()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"no-cache\":\n      if (shouldNotify) {\n        return [\n          // Note that queryInfo.getDiff() for no-cache queries does not call\n          // cache.diff, but instead returns a { complete: false } stub result\n          // when there is no queryInfo.diff already defined.\n          resultsFromCache(queryInfo.getDiff()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"standby\":\n      return [];\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}