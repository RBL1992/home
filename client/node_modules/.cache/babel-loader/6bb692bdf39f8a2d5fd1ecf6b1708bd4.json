{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { Kind } from 'graphql';\nimport { getFragmentFromSelection, getDefaultValues, getOperationDefinition, getTypenameFromResult, makeReference, isField, resultKeyNameFromField, isReference, shouldInclude, cloneDeep, addTypenameToDocument, isNonEmptyArray, argumentsObjectFromField } from \"../../utilities/index.js\";\nimport { isArray, makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject, extractFragmentContext } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nimport { normalizeReadFieldOptions } from \"./policies.js\";\n;\nfunction getContextFlavor(context, clientOnly, deferred) {\n  var key = \"\".concat(clientOnly).concat(deferred);\n  var flavored = context.flavors.get(key);\n  if (!flavored) {\n    context.flavors.set(key, flavored = context.clientOnly === clientOnly && context.deferred === deferred ? context : __assign(__assign({}, context), {\n      clientOnly: clientOnly,\n      deferred: deferred\n    }));\n  }\n  return flavored;\n}\nvar StoreWriter = function () {\n  function StoreWriter(cache, reader, fragments) {\n    this.cache = cache;\n    this.reader = reader;\n    this.fragments = fragments;\n  }\n  StoreWriter.prototype.writeToStore = function (store, _a) {\n    var _this = this;\n    var query = _a.query,\n      result = _a.result,\n      dataId = _a.dataId,\n      variables = _a.variables,\n      overwrite = _a.overwrite;\n    var operationDefinition = getOperationDefinition(query);\n    var merger = makeProcessedFieldsMerger();\n    variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);\n    var context = __assign(__assign({\n      store: store,\n      written: Object.create(null),\n      merge: function (existing, incoming) {\n        return merger.merge(existing, incoming);\n      },\n      variables: variables,\n      varString: canonicalStringify(variables)\n    }, extractFragmentContext(query, this.fragments)), {\n      overwrite: !!overwrite,\n      incomingById: new Map(),\n      clientOnly: false,\n      deferred: false,\n      flavors: new Map()\n    });\n    var ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId: dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: {\n        map: new Map()\n      },\n      context: context\n    });\n    if (!isReference(ref)) {\n      throw __DEV__ ? new InvariantError(\"Could not identify object \".concat(JSON.stringify(result))) : new InvariantError(7);\n    }\n    context.incomingById.forEach(function (_a, dataId) {\n      var storeObject = _a.storeObject,\n        mergeTree = _a.mergeTree,\n        fieldNodeSet = _a.fieldNodeSet;\n      var entityRef = makeReference(dataId);\n      if (mergeTree && mergeTree.map.size) {\n        var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);\n        if (isReference(applied)) {\n          return;\n        }\n        storeObject = applied;\n      }\n      if (__DEV__ && !context.overwrite) {\n        var fieldsWithSelectionSets_1 = Object.create(null);\n        fieldNodeSet.forEach(function (field) {\n          if (field.selectionSet) {\n            fieldsWithSelectionSets_1[field.name.value] = true;\n          }\n        });\n        var hasSelectionSet_1 = function (storeFieldName) {\n          return fieldsWithSelectionSets_1[fieldNameFromStoreName(storeFieldName)] === true;\n        };\n        var hasMergeFunction_1 = function (storeFieldName) {\n          var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n          return Boolean(childTree && childTree.info && childTree.info.merge);\n        };\n        Object.keys(storeObject).forEach(function (storeFieldName) {\n          if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {\n            warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n          }\n        });\n      }\n      store.merge(dataId, storeObject);\n    });\n    store.retain(ref.__ref);\n    return ref;\n  };\n  StoreWriter.prototype.processSelectionSet = function (_a) {\n    var _this = this;\n    var dataId = _a.dataId,\n      result = _a.result,\n      selectionSet = _a.selectionSet,\n      context = _a.context,\n      mergeTree = _a.mergeTree;\n    var policies = this.cache.policies;\n    var incoming = Object.create(null);\n    var typename = dataId && policies.rootTypenamesById[dataId] || getTypenameFromResult(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n    if (\"string\" === typeof typename) {\n      incoming.__typename = typename;\n    }\n    var readField = function () {\n      var options = normalizeReadFieldOptions(arguments, incoming, context.variables);\n      if (isReference(options.from)) {\n        var info = context.incomingById.get(options.from.__ref);\n        if (info) {\n          var result_1 = policies.readField(__assign(__assign({}, options), {\n            from: info.storeObject\n          }), context);\n          if (result_1 !== void 0) {\n            return result_1;\n          }\n        }\n      }\n      return policies.readField(options, context);\n    };\n    var fieldNodeSet = new Set();\n    this.flattenFields(selectionSet, result, context, typename).forEach(function (context, field) {\n      var _a;\n      var resultFieldKey = resultKeyNameFromField(field);\n      var value = result[resultFieldKey];\n      fieldNodeSet.add(field);\n      if (value !== void 0) {\n        var storeFieldName = policies.getStoreFieldName({\n          typename: typename,\n          fieldName: field.name.value,\n          field: field,\n          variables: context.variables\n        });\n        var childTree = getChildMergeTree(mergeTree, storeFieldName);\n        var incomingValue = _this.processFieldValue(value, field, field.selectionSet ? getContextFlavor(context, false, false) : context, childTree);\n        var childTypename = void 0;\n        if (field.selectionSet && (isReference(incomingValue) || storeValueIsStoreObject(incomingValue))) {\n          childTypename = readField(\"__typename\", incomingValue);\n        }\n        var merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n        if (merge) {\n          childTree.info = {\n            field: field,\n            typename: typename,\n            merge: merge\n          };\n        } else {\n          maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n        }\n        incoming = context.merge(incoming, (_a = {}, _a[storeFieldName] = incomingValue, _a));\n      } else if (__DEV__ && !context.clientOnly && !context.deferred && !addTypenameToDocument.added(field) && !policies.getReadFunction(typename, field.name.value)) {\n        __DEV__ && invariant.error(\"Missing field '\".concat(resultKeyNameFromField(field), \"' while writing result \").concat(JSON.stringify(result, null, 2)).substring(0, 1000));\n      }\n    });\n    try {\n      var _b = policies.identify(result, {\n          typename: typename,\n          selectionSet: selectionSet,\n          fragmentMap: context.fragmentMap,\n          storeObject: incoming,\n          readField: readField\n        }),\n        id = _b[0],\n        keyObject = _b[1];\n      dataId = dataId || id;\n      if (keyObject) {\n        incoming = context.merge(incoming, keyObject);\n      }\n    } catch (e) {\n      if (!dataId) throw e;\n    }\n    if (\"string\" === typeof dataId) {\n      var dataRef = makeReference(dataId);\n      var sets = context.written[dataId] || (context.written[dataId] = []);\n      if (sets.indexOf(selectionSet) >= 0) return dataRef;\n      sets.push(selectionSet);\n      if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {\n        return dataRef;\n      }\n      var previous_1 = context.incomingById.get(dataId);\n      if (previous_1) {\n        previous_1.storeObject = context.merge(previous_1.storeObject, incoming);\n        previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);\n        fieldNodeSet.forEach(function (field) {\n          return previous_1.fieldNodeSet.add(field);\n        });\n      } else {\n        context.incomingById.set(dataId, {\n          storeObject: incoming,\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          fieldNodeSet: fieldNodeSet\n        });\n      }\n      return dataRef;\n    }\n    return incoming;\n  };\n  StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {\n    var _this = this;\n    if (!field.selectionSet || value === null) {\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n    if (isArray(value)) {\n      return value.map(function (item, i) {\n        var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context: context,\n      mergeTree: mergeTree\n    });\n  };\n  StoreWriter.prototype.flattenFields = function (selectionSet, result, context, typename) {\n    if (typename === void 0) {\n      typename = getTypenameFromResult(result, selectionSet, context.fragmentMap);\n    }\n    var fieldMap = new Map();\n    var policies = this.cache.policies;\n    var limitingTrie = new Trie(false);\n    (function flatten(selectionSet, inheritedContext) {\n      var visitedNode = limitingTrie.lookup(selectionSet, inheritedContext.clientOnly, inheritedContext.deferred);\n      if (visitedNode.visited) return;\n      visitedNode.visited = true;\n      selectionSet.selections.forEach(function (selection) {\n        if (!shouldInclude(selection, context.variables)) return;\n        var clientOnly = inheritedContext.clientOnly,\n          deferred = inheritedContext.deferred;\n        if (!(clientOnly && deferred) && isNonEmptyArray(selection.directives)) {\n          selection.directives.forEach(function (dir) {\n            var name = dir.name.value;\n            if (name === \"client\") clientOnly = true;\n            if (name === \"defer\") {\n              var args = argumentsObjectFromField(dir, context.variables);\n              if (!args || args.if !== false) {\n                deferred = true;\n              }\n            }\n          });\n        }\n        if (isField(selection)) {\n          var existing = fieldMap.get(selection);\n          if (existing) {\n            clientOnly = clientOnly && existing.clientOnly;\n            deferred = deferred && existing.deferred;\n          }\n          fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n        } else {\n          var fragment = getFragmentFromSelection(selection, context.lookupFragment);\n          if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n            throw __DEV__ ? new InvariantError(\"No fragment named \".concat(selection.name.value)) : new InvariantError(8);\n          }\n          if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {\n            flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n          }\n        }\n      });\n    })(selectionSet, context);\n    return fieldMap;\n  };\n  StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {\n    var _a;\n    var _this = this;\n    if (mergeTree.map.size && !isReference(incoming)) {\n      var e_1 = !isArray(incoming) && (isReference(existing) || storeValueIsStoreObject(existing)) ? existing : void 0;\n      var i_1 = incoming;\n      if (e_1 && !getStorageArgs) {\n        getStorageArgs = [isReference(e_1) ? e_1.__ref : e_1];\n      }\n      var changedFields_1;\n      var getValue_1 = function (from, name) {\n        return isArray(from) ? typeof name === \"number\" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));\n      };\n      mergeTree.map.forEach(function (childTree, storeFieldName) {\n        var eVal = getValue_1(e_1, storeFieldName);\n        var iVal = getValue_1(i_1, storeFieldName);\n        if (void 0 === iVal) return;\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n        var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n        if (aVal !== iVal) {\n          changedFields_1 = changedFields_1 || new Map();\n          changedFields_1.set(storeFieldName, aVal);\n        }\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n      if (changedFields_1) {\n        incoming = isArray(i_1) ? i_1.slice(0) : __assign({}, i_1);\n        changedFields_1.forEach(function (value, name) {\n          incoming[name] = value;\n        });\n      }\n    }\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n    }\n    return incoming;\n  };\n  return StoreWriter;\n}();\nexport { StoreWriter };\nvar emptyMergeTreePool = [];\nfunction getChildMergeTree(_a, name) {\n  var map = _a.map;\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || {\n      map: new Map()\n    });\n  }\n  return map.get(name);\n}\nfunction mergeMergeTrees(left, right) {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n  var info = left.info && right.info ? __assign(__assign({}, left.info), right.info) : left.info || right.info;\n  var needToMergeMaps = left.map.size && right.map.size;\n  var map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;\n  var merged = {\n    info: info,\n    map: map\n  };\n  if (needToMergeMaps) {\n    var remainingRightKeys_1 = new Set(right.map.keys());\n    left.map.forEach(function (leftTree, key) {\n      merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n      remainingRightKeys_1.delete(key);\n    });\n    remainingRightKeys_1.forEach(function (key) {\n      merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n    });\n  }\n  return merged;\n}\nfunction mergeTreeIsEmpty(tree) {\n  return !tree || !(tree.info || tree.map.size);\n}\nfunction maybeRecycleChildMergeTree(_a, name) {\n  var map = _a.map;\n  var childTree = map.get(name);\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\nvar warnings = new Set();\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n  var getChild = function (objOrRef) {\n    var child = store.getFieldValue(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n  var existing = getChild(existingRef);\n  if (!existing) return;\n  var incoming = getChild(incomingObj);\n  if (!incoming) return;\n  if (isReference(existing)) return;\n  if (equal(existing, incoming)) return;\n  if (Object.keys(existing).every(function (key) {\n    return store.getFieldValue(incoming, key) !== void 0;\n  })) {\n    return;\n  }\n  var parentType = store.getFieldValue(existingRef, \"__typename\") || store.getFieldValue(incomingObj, \"__typename\");\n  var fieldName = fieldNameFromStoreName(storeFieldName);\n  var typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n  var childTypenames = [];\n  if (!isArray(existing) && !isArray(incoming)) {\n    [existing, incoming].forEach(function (child) {\n      var typename = store.getFieldValue(child, \"__typename\");\n      if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n  __DEV__ && invariant.warn(\"Cache data may be lost when replacing the \".concat(fieldName, \" field of a \").concat(parentType, \" object.\\n\\nTo address this problem (which is not a bug in Apollo Client), \").concat(childTypenames.length ? \"either ensure all objects of type \" + childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \" : \"\", \"define a custom merge function for the \").concat(typeDotName, \" field, so InMemoryCache can safely merge these objects:\\n\\n  existing: \").concat(JSON.stringify(existing).slice(0, 1000), \"\\n  incoming: \").concat(JSON.stringify(incoming).slice(0, 1000), \"\\n\\nFor more information about these options, please refer to the documentation:\\n\\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\\n\"));\n}","map":{"version":3,"mappings":"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","names":["invariant","InvariantError","equal","Trie","Kind","getFragmentFromSelection","getDefaultValues","getOperationDefinition","getTypenameFromResult","makeReference","isField","resultKeyNameFromField","isReference","shouldInclude","cloneDeep","addTypenameToDocument","isNonEmptyArray","argumentsObjectFromField","isArray","makeProcessedFieldsMerger","fieldNameFromStoreName","storeValueIsStoreObject","extractFragmentContext","canonicalStringify","normalizeReadFieldOptions","getContextFlavor","context","clientOnly","deferred","key","flavored","flavors","get","set","__assign","cache","reader","fragments","StoreWriter","store","_a","query","result","dataId","variables","overwrite","operationDefinition","merger","written","Object","create","merge","existing","incoming","varString","incomingById","Map","ref","processSelectionSet","selectionSet","mergeTree","map","__DEV__","stringify","forEach","storeObject","fieldNodeSet","entityRef","size","applied","_this","applyMerges","fieldsWithSelectionSets_1","field","name","value","hasSelectionSet_1","storeFieldName","hasMergeFunction_1","childTree","Boolean","info","keys","warnAboutDataLoss","retain","__ref","typename","policies","rootTypenamesById","fragmentMap","__typename","readField","options","arguments","from","result_1","Set","flattenFields","resultFieldKey","add","getStoreFieldName","fieldName","getChildMergeTree","incomingValue","processFieldValue","childTypename","getMergeFunction","maybeRecycleChildMergeTree","added","getReadFunction","concat","substring","identify","id","keyObject","e","dataRef","sets","indexOf","push","isFresh","previous_1","mergeMergeTrees","mergeTreeIsEmpty","item","i","fieldMap","limitingTrie","flatten","inheritedContext","visitedNode","lookup","visited","selections","selection","directives","dir","args","if","fragment","lookupFragment","kind","FRAGMENT_SPREAD","fragmentMatches","getStorageArgs","e_1","i_1","changedFields_1","getValue_1","getFieldValue","String","eVal","iVal","aVal","pop","slice","runMergeFunction","getStorage","emptyMergeTreePool","has","left","right","needToMergeMaps","merged","remainingRightKeys_1","leftTree","delete","tree","warnings","existingRef","incomingObj","getChild","objOrRef","child","every","parentType","typeDotName","childTypenames","includes","join","JSON"],"sourceRoot":"","sources":["../../../src/cache/inmemory/writeToStore.ts"],"sourcesContent":["import { invariant, InvariantError } from '../../utilities/globals';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport {\n  SelectionSetNode,\n  FieldNode,\n  Kind,\n} from 'graphql';\n\nimport {\n  FragmentMap,\n  FragmentMapFunction,\n  getFragmentFromSelection,\n  getDefaultValues,\n  getOperationDefinition,\n  getTypenameFromResult,\n  makeReference,\n  isField,\n  resultKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  Reference,\n  isReference,\n  shouldInclude,\n  cloneDeep,\n  addTypenameToDocument,\n  isNonEmptyArray,\n  argumentsObjectFromField,\n} from '../../utilities';\n\nimport { NormalizedCache, ReadMergeModifyContext, MergeTree, InMemoryCacheConfig } from './types';\nimport { isArray, makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject, extractFragmentContext } from './helpers';\nimport { StoreReader } from './readFromStore';\nimport { InMemoryCache } from './inMemoryCache';\nimport { EntityStore } from './entityStore';\nimport { Cache } from '../../core';\nimport { canonicalStringify } from './object-canon';\nimport { normalizeReadFieldOptions } from './policies';\nimport { ReadFieldFunction } from '../core/types/common';\n\nexport interface WriteContext extends ReadMergeModifyContext {\n  readonly written: {\n    [dataId: string]: SelectionSetNode[];\n  };\n  readonly fragmentMap: FragmentMap;\n  lookupFragment: FragmentMapFunction;\n  // General-purpose deep-merge function for use during writes.\n  merge<T>(existing: T, incoming: T): T;\n  // If true, merge functions will be called with undefined existing data.\n  overwrite: boolean;\n  incomingById: Map<string, {\n    storeObject: StoreObject;\n    mergeTree?: MergeTree;\n    fieldNodeSet: Set<FieldNode>;\n  }>;\n  // Directive metadata for @client and @defer. We could use a bitfield for this\n  // information to save some space, and use that bitfield number as the keys in\n  // the context.flavors Map.\n  clientOnly: boolean;\n  deferred: boolean;\n  flavors: Map<string, FlavorableWriteContext>;\n};\n\ntype FlavorableWriteContext = Pick<\n  WriteContext,\n  | \"clientOnly\"\n  | \"deferred\"\n  | \"flavors\"\n>;\n\n// Since there are only four possible combinations of context.clientOnly and\n// context.deferred values, we should need at most four \"flavors\" of any given\n// WriteContext. To avoid creating multiple copies of the same context, we cache\n// the contexts in the context.flavors Map (shared by all flavors) according to\n// their clientOnly and deferred values (always in that order).\nfunction getContextFlavor<TContext extends FlavorableWriteContext>(\n  context: TContext,\n  clientOnly: TContext[\"clientOnly\"],\n  deferred: TContext[\"deferred\"],\n): TContext {\n  const key = `${clientOnly}${deferred}`;\n  let flavored = context.flavors.get(key);\n  if (!flavored) {\n    context.flavors.set(key, flavored = (\n      context.clientOnly === clientOnly &&\n      context.deferred === deferred\n    ) ? context : {\n      ...context,\n      clientOnly,\n      deferred,\n    });\n  }\n  return flavored as TContext;\n}\n\ninterface ProcessSelectionSetOptions {\n  dataId?: string,\n  result: Record<string, any>;\n  selectionSet: SelectionSetNode;\n  context: WriteContext;\n  mergeTree: MergeTree;\n}\n\nexport class StoreWriter {\n  constructor(\n    public readonly cache: InMemoryCache,\n    private reader?: StoreReader,\n    private fragments?: InMemoryCacheConfig[\"fragments\"],\n  ) {}\n\n  public writeToStore(store: NormalizedCache, {\n    query,\n    result,\n    dataId,\n    variables,\n    overwrite,\n  }: Cache.WriteOptions): Reference | undefined {\n    const operationDefinition = getOperationDefinition(query)!;\n    const merger = makeProcessedFieldsMerger();\n\n    variables = {\n      ...getDefaultValues(operationDefinition),\n      ...variables!,\n    };\n\n    const context: WriteContext = {\n      store,\n      written: Object.create(null),\n      merge<T>(existing: T, incoming: T) {\n        return merger.merge(existing, incoming) as T;\n      },\n      variables,\n      varString: canonicalStringify(variables),\n      ...extractFragmentContext(query, this.fragments),\n      overwrite: !!overwrite,\n      incomingById: new Map,\n      clientOnly: false,\n      deferred: false,\n      flavors: new Map,\n    };\n\n    const ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: { map: new Map },\n      context,\n    });\n\n    if (!isReference(ref)) {\n      throw new InvariantError(`Could not identify object ${JSON.stringify(result)}`);\n    }\n\n    // So far, the store has not been modified, so now it's time to process\n    // context.incomingById and merge those incoming fields into context.store.\n    context.incomingById.forEach(({ storeObject, mergeTree, fieldNodeSet }, dataId) => {\n      const entityRef = makeReference(dataId);\n\n      if (mergeTree && mergeTree.map.size) {\n        const applied = this.applyMerges(mergeTree, entityRef, storeObject, context);\n        if (isReference(applied)) {\n          // Assume References returned by applyMerges have already been merged\n          // into the store. See makeMergeObjectsFunction in policies.ts for an\n          // example of how this can happen.\n          return;\n        }\n        // Otherwise, applyMerges returned a StoreObject, whose fields we should\n        // merge into the store (see store.merge statement below).\n        storeObject = applied;\n      }\n\n      if (__DEV__ && !context.overwrite) {\n        const fieldsWithSelectionSets: Record<string, true> = Object.create(null);\n        fieldNodeSet.forEach(field => {\n          if (field.selectionSet) {\n            fieldsWithSelectionSets[field.name.value] = true;\n          }\n        });\n\n        const hasSelectionSet = (storeFieldName: string) =>\n          fieldsWithSelectionSets[\n            fieldNameFromStoreName(storeFieldName)\n          ] === true;\n\n        const hasMergeFunction = (storeFieldName: string) => {\n          const childTree = mergeTree && mergeTree.map.get(storeFieldName);\n          return Boolean(childTree && childTree.info && childTree.info.merge);\n        };\n\n        Object.keys(storeObject).forEach(storeFieldName => {\n          // If a merge function was defined for this field, trust that it\n          // did the right thing about (not) clobbering data. If the field\n          // has no selection set, it's a scalar field, so it doesn't need\n          // a merge function (even if it's an object, like JSON data).\n          if (hasSelectionSet(storeFieldName) &&\n              !hasMergeFunction(storeFieldName)) {\n            warnAboutDataLoss(\n              entityRef,\n              storeObject,\n              storeFieldName,\n              context.store,\n            );\n          }\n        });\n      }\n\n      store.merge(dataId, storeObject);\n    });\n\n    // Any IDs written explicitly to the cache will be retained as\n    // reachable root IDs for garbage collection purposes. Although this\n    // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their\n    // retainment counts are effectively ignored because cache.gc() always\n    // includes them in its root ID set.\n    store.retain(ref.__ref);\n\n    return ref;\n  }\n\n  private processSelectionSet({\n    dataId,\n    result,\n    selectionSet,\n    context,\n    // This object allows processSelectionSet to report useful information\n    // to its callers without explicitly returning that information.\n    mergeTree,\n  }: ProcessSelectionSetOptions): StoreObject | Reference {\n    const { policies } = this.cache;\n\n    // This variable will be repeatedly updated using context.merge to\n    // accumulate all fields that need to be written into the store.\n    let incoming: StoreObject = Object.create(null);\n\n    // If typename was not passed in, infer it. Note that typename is\n    // always passed in for tricky-to-infer cases such as \"Query\" for\n    // ROOT_QUERY.\n    const typename: string | undefined =\n      (dataId && policies.rootTypenamesById[dataId]) ||\n      getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n      (dataId && context.store.get(dataId, \"__typename\") as string);\n\n    if (\"string\" === typeof typename) {\n      incoming.__typename = typename;\n    }\n\n    // This readField function will be passed as context.readField in the\n    // KeyFieldsContext object created within policies.identify (called below).\n    // In addition to reading from the existing context.store (thanks to the\n    // policies.readField(options, context) line at the very bottom), this\n    // version of readField can read from Reference objects that are currently\n    // pending in context.incomingById, which is important whenever keyFields\n    // need to be extracted from a child object that processSelectionSet has\n    // turned into a Reference.\n    const readField: ReadFieldFunction = function (this: void) {\n      const options = normalizeReadFieldOptions(\n        arguments,\n        incoming,\n        context.variables,\n      );\n\n      if (isReference(options.from)) {\n        const info = context.incomingById.get(options.from.__ref);\n        if (info) {\n          const result = policies.readField({\n            ...options,\n            from: info.storeObject\n          }, context);\n\n          if (result !== void 0) {\n            return result;\n          }\n        }\n      }\n\n      return policies.readField(options, context);\n    };\n\n    const fieldNodeSet = new Set<FieldNode>();\n\n    this.flattenFields(\n      selectionSet,\n      result,\n      // This WriteContext will be the default context value for fields returned\n      // by the flattenFields method, but some fields may be assigned a modified\n      // context, depending on the presence of @client and other directives.\n      context,\n      typename,\n    ).forEach((context, field) => {\n      const resultFieldKey = resultKeyNameFromField(field);\n      const value = result[resultFieldKey];\n\n      fieldNodeSet.add(field);\n\n      if (value !== void 0) {\n        const storeFieldName = policies.getStoreFieldName({\n          typename,\n          fieldName: field.name.value,\n          field,\n          variables: context.variables,\n        });\n\n        const childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n        let incomingValue = this.processFieldValue(\n          value,\n          field,\n          // Reset context.clientOnly and context.deferred to their default\n          // values before processing nested selection sets.\n          field.selectionSet\n            ? getContextFlavor(context, false, false)\n            : context,\n          childTree,\n        );\n\n        // To determine if this field holds a child object with a merge function\n        // defined in its type policy (see PR #7070), we need to figure out the\n        // child object's __typename.\n        let childTypename: string | undefined;\n\n        // The field's value can be an object that has a __typename only if the\n        // field has a selection set. Otherwise incomingValue is scalar.\n        if (field.selectionSet &&\n            (isReference(incomingValue) ||\n             storeValueIsStoreObject(incomingValue))) {\n          childTypename = readField<string>(\"__typename\", incomingValue);\n        }\n\n        const merge = policies.getMergeFunction(\n          typename,\n          field.name.value,\n          childTypename,\n        );\n\n        if (merge) {\n          childTree.info = {\n            // TODO Check compatibility against any existing childTree.field?\n            field,\n            typename,\n            merge,\n          };\n        } else {\n          maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n        }\n\n        incoming = context.merge(incoming, {\n          [storeFieldName]: incomingValue,\n        });\n\n      } else if (\n        __DEV__ &&\n        !context.clientOnly &&\n        !context.deferred &&\n        !addTypenameToDocument.added(field) &&\n        // If the field has a read function, it may be a synthetic field or\n        // provide a default value, so its absence from the written data should\n        // not be cause for alarm.\n        !policies.getReadFunction(typename, field.name.value)\n      ) {\n        invariant.error(`Missing field '${\n          resultKeyNameFromField(field)\n        }' while writing result ${\n          JSON.stringify(result, null, 2)\n        }`.substring(0, 1000));\n      }\n    });\n\n    // Identify the result object, even if dataId was already provided,\n    // since we always need keyObject below.\n    try {\n      const [id, keyObject] = policies.identify(result, {\n        typename,\n        selectionSet,\n        fragmentMap: context.fragmentMap,\n        storeObject: incoming,\n        readField,\n      });\n\n      // If dataId was not provided, fall back to the id just generated by\n      // policies.identify.\n      dataId = dataId || id;\n\n      // Write any key fields that were used during identification, even if\n      // they were not mentioned in the original query.\n      if (keyObject) {\n        // TODO Reverse the order of the arguments?\n        incoming = context.merge(incoming, keyObject);\n      }\n    } catch (e) {\n      // If dataId was provided, tolerate failure of policies.identify.\n      if (!dataId) throw e;\n    }\n\n    if (\"string\" === typeof dataId) {\n      const dataRef = makeReference(dataId);\n\n      // Avoid processing the same entity object using the same selection\n      // set more than once. We use an array instead of a Set since most\n      // entity IDs will be written using only one selection set, so the\n      // size of this array is likely to be very small, meaning indexOf is\n      // likely to be faster than Set.prototype.has.\n      const sets = context.written[dataId] || (context.written[dataId] = []);\n      if (sets.indexOf(selectionSet) >= 0) return dataRef;\n      sets.push(selectionSet);\n\n      // If we're about to write a result object into the store, but we\n      // happen to know that the exact same (===) result object would be\n      // returned if we were to reread the result with the same inputs,\n      // then we can skip the rest of the processSelectionSet work for\n      // this object, and immediately return a Reference to it.\n      if (this.reader && this.reader.isFresh(\n        result,\n        dataRef,\n        selectionSet,\n        context,\n      )) {\n        return dataRef;\n      }\n\n      const previous = context.incomingById.get(dataId);\n      if (previous) {\n        previous.storeObject = context.merge(previous.storeObject, incoming);\n        previous.mergeTree = mergeMergeTrees(previous.mergeTree, mergeTree);\n        fieldNodeSet.forEach(field => previous.fieldNodeSet.add(field));\n      } else {\n        context.incomingById.set(dataId, {\n          storeObject: incoming,\n          // Save a reference to mergeTree only if it is not empty, because\n          // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and\n          // reused for entirely different parts of the result tree.\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          fieldNodeSet,\n        });\n      }\n\n      return dataRef;\n    }\n\n    return incoming;\n  }\n\n  private processFieldValue(\n    value: any,\n    field: FieldNode,\n    context: WriteContext,\n    mergeTree: MergeTree,\n  ): StoreValue {\n    if (!field.selectionSet || value === null) {\n      // In development, we need to clone scalar values so that they can be\n      // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,\n      // it's cheaper to store the scalar values directly in the cache.\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n\n    if (isArray(value)) {\n      return value.map((item, i) => {\n        const value = this.processFieldValue(\n          item, field, context, getChildMergeTree(mergeTree, i));\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context,\n      mergeTree,\n    });\n  }\n\n  // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with\n  // some additions for tracking @client and @defer directives.\n  private flattenFields<TContext extends Pick<\n    WriteContext,\n    | \"clientOnly\"\n    | \"deferred\"\n    | \"flavors\"\n    | \"fragmentMap\"\n    | \"lookupFragment\"\n    | \"variables\"\n  >>(\n    selectionSet: SelectionSetNode,\n    result: Record<string, any>,\n    context: TContext,\n    typename = getTypenameFromResult(result, selectionSet, context.fragmentMap),\n  ): Map<FieldNode, TContext> {\n    const fieldMap = new Map<FieldNode, TContext>();\n    const { policies } = this.cache;\n\n    const limitingTrie = new Trie<{\n      // Tracks whether (selectionSet, clientOnly, deferred) has been flattened\n      // before. The GraphQL specification only uses the fragment name for\n      // skipping previously visited fragments, but the top-level fragment\n      // selection set corresponds 1:1 with the fagment name (and is slightly\n      // easier too work with), and we need to consider clientOnly and deferred\n      // values as well, potentially revisiting selection sets that were\n      // previously visited with different inherited configurations of those\n      // directives.\n      visited?: boolean;\n    }>(false); // No need for WeakMap, since limitingTrie does not escape.\n\n    (function flatten(\n      this: void,\n      selectionSet: SelectionSetNode,\n      inheritedContext: TContext,\n    ) {\n      const visitedNode = limitingTrie.lookup(\n        selectionSet,\n        // Because we take inheritedClientOnly and inheritedDeferred into\n        // consideration here (in addition to selectionSet), it's possible for\n        // the same selection set to be flattened more than once, if it appears\n        // in the query with different @client and/or @directive configurations.\n        inheritedContext.clientOnly,\n        inheritedContext.deferred,\n      );\n      if (visitedNode.visited) return;\n      visitedNode.visited = true;\n\n      selectionSet.selections.forEach(selection => {\n        if (!shouldInclude(selection, context.variables)) return;\n\n        let { clientOnly, deferred } = inheritedContext;\n        if (\n          // Since the presence of @client or @defer on this field can only\n          // cause clientOnly or deferred to become true, we can skip the\n          // forEach loop if both clientOnly and deferred are already true.\n          !(clientOnly && deferred) &&\n          isNonEmptyArray(selection.directives)\n        ) {\n          selection.directives.forEach(dir => {\n            const name = dir.name.value;\n            if (name === \"client\") clientOnly = true;\n            if (name === \"defer\") {\n              const args = argumentsObjectFromField(dir, context.variables);\n              // The @defer directive takes an optional args.if boolean\n              // argument, similar to @include(if: boolean). Note that\n              // @defer(if: false) does not make context.deferred false, but\n              // instead behaves as if there was no @defer directive.\n              if (!args || (args as { if?: boolean }).if !== false) {\n                deferred = true;\n              }\n              // TODO In the future, we may want to record args.label using\n              // context.deferred, if a label is specified.\n            }\n          });\n        }\n\n        if (isField(selection)) {\n          const existing = fieldMap.get(selection);\n          if (existing) {\n            // If this field has been visited along another recursive path\n            // before, the final context should have clientOnly or deferred set\n            // to true only if *all* paths have the directive (hence the &&).\n            clientOnly = clientOnly && existing.clientOnly;\n            deferred = deferred && existing.deferred;\n          }\n\n          fieldMap.set(\n            selection,\n            getContextFlavor(context, clientOnly, deferred),\n          );\n\n        } else {\n          const fragment = getFragmentFromSelection(\n            selection,\n            context.lookupFragment,\n          );\n\n          if (!fragment && selection.kind === Kind.FRAGMENT_SPREAD) {\n            throw new InvariantError(`No fragment named ${selection.name.value}`);\n          }\n\n          if (fragment &&\n              policies.fragmentMatches(\n                fragment, typename, result, context.variables)) {\n\n            flatten(\n              fragment.selectionSet,\n              getContextFlavor(context, clientOnly, deferred),\n            );\n          }\n        }\n      });\n    })(selectionSet, context);\n\n    return fieldMap;\n  }\n\n  private applyMerges<T extends StoreValue>(\n    mergeTree: MergeTree,\n    existing: StoreValue,\n    incoming: T,\n    context: WriteContext,\n    getStorageArgs?: Parameters<EntityStore[\"getStorage\"]>,\n  ): T | Reference {\n    if (mergeTree.map.size && !isReference(incoming)) {\n      const e: StoreObject | Reference | undefined = (\n        // Items in the same position in different arrays are not\n        // necessarily related to each other, so when incoming is an array\n        // we process its elements as if there was no existing data.\n        !isArray(incoming) &&\n        // Likewise, existing must be either a Reference or a StoreObject\n        // in order for its fields to be safe to merge with the fields of\n        // the incoming object.\n        (isReference(existing) || storeValueIsStoreObject(existing))\n      ) ? existing : void 0;\n\n      // This narrowing is implied by mergeTree.map.size > 0 and\n      // !isReference(incoming), though TypeScript understandably cannot\n      // hope to infer this type.\n      const i = incoming as StoreObject | StoreValue[];\n\n      // The options.storage objects provided to read and merge functions\n      // are derived from the identity of the parent object plus a\n      // sequence of storeFieldName strings/numbers identifying the nested\n      // field name path of each field value to be merged.\n      if (e && !getStorageArgs) {\n        getStorageArgs = [isReference(e) ? e.__ref : e];\n      }\n\n      // It's possible that applying merge functions to this subtree will\n      // not change the incoming data, so this variable tracks the fields\n      // that did change, so we can create a new incoming object when (and\n      // only when) at least one incoming field has changed. We use a Map\n      // to preserve the type of numeric keys.\n      let changedFields: Map<string | number, StoreValue> | undefined;\n\n      const getValue = (\n        from: typeof e | typeof i,\n        name: string | number,\n      ): StoreValue => {\n        return isArray(from)\n          ? (typeof name === \"number\" ? from[name] : void 0)\n          : context.store.getFieldValue(from, String(name))\n      };\n\n      mergeTree.map.forEach((childTree, storeFieldName) => {\n        const eVal = getValue(e, storeFieldName);\n        const iVal = getValue(i, storeFieldName);\n        // If we have no incoming data, leave any existing data untouched.\n        if (void 0 === iVal) return;\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n        const aVal = this.applyMerges(\n          childTree,\n          eVal,\n          iVal,\n          context,\n          getStorageArgs,\n        );\n        if (aVal !== iVal) {\n          changedFields = changedFields || new Map;\n          changedFields.set(storeFieldName, aVal);\n        }\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields) {\n        // Shallow clone i so we can add changed fields to it.\n        incoming = (isArray(i) ? i.slice(0) : { ...i }) as T;\n        changedFields.forEach((value, name) => {\n          (incoming as any)[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(\n        existing,\n        incoming,\n        mergeTree.info,\n        context,\n        getStorageArgs && context.store.getStorage(...getStorageArgs),\n      );\n    }\n\n    return incoming;\n  }\n}\n\nconst emptyMergeTreePool: MergeTree[] = [];\n\nfunction getChildMergeTree(\n  { map }: MergeTree,\n  name: string | number,\n): MergeTree {\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || { map: new Map });\n  }\n  return map.get(name)!;\n}\n\nfunction mergeMergeTrees(\n  left: MergeTree | undefined,\n  right: MergeTree | undefined,\n): MergeTree {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left!;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n\n  const info = left.info && right.info ? {\n    ...left.info,\n    ...right.info,\n  } : left.info || right.info;\n\n  const needToMergeMaps = left.map.size && right.map.size;\n  const map = needToMergeMaps ? new Map :\n    left.map.size ? left.map : right.map;\n\n  const merged = { info, map };\n\n  if (needToMergeMaps) {\n    const remainingRightKeys = new Set(right.map.keys());\n\n    left.map.forEach((leftTree, key) => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(leftTree, right.map.get(key)),\n      );\n      remainingRightKeys.delete(key);\n    });\n\n    remainingRightKeys.forEach(key => {\n      merged.map.set(\n        key,\n        mergeMergeTrees(\n          right.map.get(key),\n          left.map.get(key),\n        ),\n      );\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree: MergeTree | undefined): boolean {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree(\n  { map }: MergeTree,\n  name: string | number,\n) {\n  const childTree = map.get(name);\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nconst warnings = new Set<string>();\n\n// Note that this function is unused in production, and thus should be\n// pruned by any well-configured minifier.\nfunction warnAboutDataLoss(\n  existingRef: Reference,\n  incomingObj: StoreObject,\n  storeFieldName: string,\n  store: NormalizedCache,\n) {\n  const getChild = (objOrRef: StoreObject | Reference): StoreObject | false => {\n    const child = store.getFieldValue<StoreObject>(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  const existing = getChild(existingRef);\n  if (!existing) return;\n\n  const incoming = getChild(incomingObj);\n  if (!incoming) return;\n\n  // It's always safe to replace a reference, since it refers to data\n  // safely stored elsewhere.\n  if (isReference(existing)) return;\n\n  // If the values are structurally equivalent, we do not need to worry\n  // about incoming replacing existing.\n  if (equal(existing, incoming)) return;\n\n  // If we're replacing every key of the existing object, then the\n  // existing data would be overwritten even if the objects were\n  // normalized, so warning would not be helpful here.\n  if (Object.keys(existing).every(\n    key => store.getFieldValue(incoming, key) !== void 0)) {\n    return;\n  }\n\n  const parentType =\n    store.getFieldValue<string>(existingRef, \"__typename\") ||\n    store.getFieldValue<string>(incomingObj, \"__typename\");\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const typeDotName = `${parentType}.${fieldName}`;\n  // Avoid warning more than once for the same type and field name.\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n\n  const childTypenames: string[] = [];\n  // Arrays do not have __typename fields, and always need a custom merge\n  // function, even if their elements are normalized entities.\n  if (!isArray(existing) &&\n      !isArray(incoming)) {\n    [existing, incoming].forEach(child => {\n      const typename = store.getFieldValue(child, \"__typename\");\n      if (typeof typename === \"string\" &&\n          !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  invariant.warn(\n`Cache data may be lost when replacing the ${fieldName} field of a ${parentType} object.\n\nTo address this problem (which is not a bug in Apollo Client), ${\n  childTypenames.length\n    ? \"either ensure all objects of type \" +\n        childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \"\n    : \"\"\n}define a custom merge function for the ${\n  typeDotName\n} field, so InMemoryCache can safely merge these objects:\n\n  existing: ${JSON.stringify(existing).slice(0, 1000)}\n  incoming: ${JSON.stringify(incoming).slice(0, 1000)}\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n`);\n}\n"]},"metadata":{},"sourceType":"module"}