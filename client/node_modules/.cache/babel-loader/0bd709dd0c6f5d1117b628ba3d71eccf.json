{"ast":null,"code":"import \"../../utilities/globals/index.js\";\nimport { useState, useRef, useEffect } from 'react';\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useSubscription(subscription, options) {\n  var hasIssuedDeprecationWarningRef = useRef(false);\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  var _a = useState({\n      loading: !(options === null || options === void 0 ? void 0 : options.skip),\n      error: void 0,\n      data: void 0,\n      variables: options === null || options === void 0 ? void 0 : options.variables\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionData) {\n      __DEV__ && invariant.warn(options.onData ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\" : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\");\n    }\n    if (options === null || options === void 0 ? void 0 : options.onSubscriptionComplete) {\n      __DEV__ && invariant.warn(options.onComplete ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\" : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\");\n    }\n  }\n  var _b = useState(function () {\n      if (options === null || options === void 0 ? void 0 : options.skip) {\n        return null;\n      }\n      return client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      });\n    }),\n    observable = _b[0],\n    setObservable = _b[1];\n  var canResetObservableRef = useRef(false);\n  useEffect(function () {\n    return function () {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n  var ref = useRef({\n    client: client,\n    subscription: subscription,\n    options: options\n  });\n  useEffect(function () {\n    var _a, _b, _c, _d;\n    var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options);\n    }\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.skip) || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (shouldResubscribe !== false && (client !== ref.current.client || subscription !== ref.current.subscription || (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) || !equal(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables)) || canResetObservableRef.current) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options === null || options === void 0 ? void 0 : options.variables\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      }));\n      canResetObservableRef.current = false;\n    }\n    Object.assign(ref.current, {\n      client: client,\n      subscription: subscription,\n      options: options\n    });\n  }, [client, subscription, options, canResetObservableRef.current]);\n  useEffect(function () {\n    if (!observable) {\n      return;\n    }\n    var subscription = observable.subscribe({\n      next: function (fetchResult) {\n        var _a, _b;\n        var result = {\n          loading: false,\n          data: fetchResult.data,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        };\n        setResult(result);\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onData) {\n          ref.current.options.onData({\n            client: client,\n            data: result\n          });\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client: client,\n            subscriptionData: result\n          });\n        }\n      },\n      error: function (error) {\n        var _a, _b;\n        setResult({\n          loading: false,\n          data: void 0,\n          error: error,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n      },\n      complete: function () {\n        var _a, _b;\n        if ((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onComplete) {\n          ref.current.options.onComplete();\n        } else if ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.onSubscriptionComplete) {\n          ref.current.options.onSubscriptionComplete();\n        }\n      }\n    });\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n  return result;\n}","map":{"version":3,"mappings":"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","names":["useState","useRef","useEffect","invariant","equal","DocumentType","verifyDocumentType","useApolloClient","useSubscription","subscription","options","hasIssuedDeprecationWarningRef","client","Subscription","loading","skip","error","data","variables","result","setResult","current","onSubscriptionData","__DEV__","onSubscriptionComplete","subscribe","query","fetchPolicy","context","observable","setObservable","canResetObservableRef","ref","shouldResubscribe","Object","assign","next","fetchResult","onData","subscriptionData","onError","complete","onComplete","unsubscribe"],"sourceRoot":"","sources":["../../../src/react/hooks/useSubscription.ts"],"sourcesContent":["import '../../utilities/globals';\nimport { useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { invariant } from '../../utilities/globals'\nimport { equal } from '@wry/equality';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport {\n  SubscriptionHookOptions,\n  SubscriptionResult\n} from '../types/types';\nimport { OperationVariables } from '../../core';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>,\n) {\n  const hasIssuedDeprecationWarningRef = useRef(false);\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = useState<SubscriptionResult<TData>>({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n\n    if (options?.onSubscriptionData) {\n      invariant.warn(\n        options.onData\n          ? \"'useSubscription' supports only the 'onSubscriptionData' or 'onData' option, but not both. Only the 'onData' option will be used.\"\n          : \"'onSubscriptionData' is deprecated and will be removed in a future major version. Please use the 'onData' option instead.\"\n      );\n    }\n\n    if (options?.onSubscriptionComplete) {\n      invariant.warn(\n        options.onComplete\n          ? \"'useSubscription' supports only the 'onSubscriptionComplete' or 'onComplete' option, but not both. Only the 'onComplete' option will be used.\"\n          : \"'onSubscriptionComplete' is deprecated and will be removed in a future major version. Please use the 'onComplete' option instead.\"\n      );\n    }\n  }\n\n  const [observable, setObservable] = useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const canResetObservableRef = useRef(false);\n  useEffect(() => {\n    return () => {\n      canResetObservableRef.current = true;\n    };\n  }, []);\n\n  const ref = useRef({ client, subscription, options });\n  useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip) {\n      if (!options?.skip !== !ref.current.options?.skip || canResetObservableRef.current) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options?.variables,\n        });\n        setObservable(null);\n        canResetObservableRef.current = false;\n      }\n    } else if (\n      (shouldResubscribe !== false &&\n        (client !== ref.current.client ||\n          subscription !== ref.current.subscription ||\n          options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n          !options?.skip !== !ref.current.options?.skip ||\n          !equal(options?.variables, ref.current.options?.variables))) ||\n      canResetObservableRef.current\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options?.variables,\n        fetchPolicy: options?.fetchPolicy,\n        context: options?.context,\n      }));\n      canResetObservableRef.current = false;\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options, canResetObservableRef.current]);\n\n  useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        if (ref.current.options?.onData) {\n          ref.current.options.onData({\n            client,\n            data: result\n          });\n        } else if (ref.current.options?.onSubscriptionData) {\n          ref.current.options.onSubscriptionData({\n            client,\n            subscriptionData: result\n          });\n        }\n      },\n      error(error) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error,\n          variables: options?.variables,\n        });\n        ref.current.options?.onError?.(error);\n      },\n      complete() {\n        if (ref.current.options?.onComplete) {\n          ref.current.options.onComplete();\n        } else if (ref.current.options?.onSubscriptionComplete) {\n          ref.current.options.onSubscriptionComplete();\n        }\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}