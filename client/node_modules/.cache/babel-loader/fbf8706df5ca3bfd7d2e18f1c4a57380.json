{"ast":null,"code":"import { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function readerIterator(reader) {\n  var iterator = {\n    next: function () {\n      return reader.read();\n    }\n  };\n  if (canUseAsyncIteratorSymbol) {\n    iterator[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n  return iterator;\n}","map":{"version":3,"mappings":"AAKA,SAASA,yBAAyB,QAAQ,6BAAqB;AAO/D,eAAc,SAAUC,cAAc,CACpCC,MAAsC;EAEtC,IAAMC,QAAQ,GAAsB;IAClCC,IAAI;MACF,OAAOF,MAAM,CAACG,IAAI,EAAE;IACtB;GACD;EAED,IAAIL,yBAAyB,EAAE;IAC7BG,QAAQ,CAACG,MAAM,CAACC,aAAa,CAAC,GAAG;MAC/B,OAAO,IAAI;IACb,CAAC;;EAGH,OAAOJ,QAAoC;AAC7C","names":["canUseAsyncIteratorSymbol","readerIterator","reader","iterator","next","read","Symbol","asyncIterator"],"sourceRoot":"","sources":["../../../../src/link/http/iterators/reader.ts"],"sourcesContent":["/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/reader.ts\n */\n\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities\";\n\ninterface ReaderIterator<T> {\n  next(): Promise<ReadableStreamDefaultReadResult<T>>;\n  [Symbol.asyncIterator]?(): AsyncIterator<T>;\n}\n\nexport default function readerIterator<T>(\n  reader: ReadableStreamDefaultReader<T>\n): AsyncIterableIterator<T> {\n  const iterator: ReaderIterator<T> = {\n    next() {\n      return reader.read();\n    },\n  };\n\n  if (canUseAsyncIteratorSymbol) {\n    iterator[Symbol.asyncIterator] = function (): AsyncIterator<T> {\n      return this;\n    };\n  }\n\n  return iterator as AsyncIterableIterator<T>;\n}\n"]},"metadata":{},"sourceType":"module"}